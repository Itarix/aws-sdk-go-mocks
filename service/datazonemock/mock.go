// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/datazone/datazoneiface (interfaces: DataZoneAPI)

// Package datazonemock is a generated GoMock package.
package datazonemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	datazone "github.com/aws/aws-sdk-go/service/datazone"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataZoneAPI is a mock of DataZoneAPI interface
type MockDataZoneAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDataZoneAPIMockRecorder
}

// MockDataZoneAPIMockRecorder is the mock recorder for MockDataZoneAPI
type MockDataZoneAPIMockRecorder struct {
	mock *MockDataZoneAPI
}

// NewMockDataZoneAPI creates a new mock instance
func NewMockDataZoneAPI(ctrl *gomock.Controller) *MockDataZoneAPI {
	mock := &MockDataZoneAPI{ctrl: ctrl}
	mock.recorder = &MockDataZoneAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataZoneAPI) EXPECT() *MockDataZoneAPIMockRecorder {
	return m.recorder
}

// AcceptPredictions mocks base method
func (m *MockDataZoneAPI) AcceptPredictions(arg0 *datazone.AcceptPredictionsInput) (*datazone.AcceptPredictionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptPredictions", arg0)
	ret0, _ := ret[0].(*datazone.AcceptPredictionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptPredictions indicates an expected call of AcceptPredictions
func (mr *MockDataZoneAPIMockRecorder) AcceptPredictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPredictions", reflect.TypeOf((*MockDataZoneAPI)(nil).AcceptPredictions), arg0)
}

// AcceptPredictionsRequest mocks base method
func (m *MockDataZoneAPI) AcceptPredictionsRequest(arg0 *datazone.AcceptPredictionsInput) (*request.Request, *datazone.AcceptPredictionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptPredictionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.AcceptPredictionsOutput)
	return ret0, ret1
}

// AcceptPredictionsRequest indicates an expected call of AcceptPredictionsRequest
func (mr *MockDataZoneAPIMockRecorder) AcceptPredictionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPredictionsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).AcceptPredictionsRequest), arg0)
}

// AcceptPredictionsWithContext mocks base method
func (m *MockDataZoneAPI) AcceptPredictionsWithContext(arg0 context.Context, arg1 *datazone.AcceptPredictionsInput, arg2 ...request.Option) (*datazone.AcceptPredictionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptPredictionsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.AcceptPredictionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptPredictionsWithContext indicates an expected call of AcceptPredictionsWithContext
func (mr *MockDataZoneAPIMockRecorder) AcceptPredictionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPredictionsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).AcceptPredictionsWithContext), varargs...)
}

// AcceptSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) AcceptSubscriptionRequest(arg0 *datazone.AcceptSubscriptionRequestInput) (*datazone.AcceptSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*datazone.AcceptSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptSubscriptionRequest indicates an expected call of AcceptSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) AcceptSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).AcceptSubscriptionRequest), arg0)
}

// AcceptSubscriptionRequestRequest mocks base method
func (m *MockDataZoneAPI) AcceptSubscriptionRequestRequest(arg0 *datazone.AcceptSubscriptionRequestInput) (*request.Request, *datazone.AcceptSubscriptionRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptSubscriptionRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.AcceptSubscriptionRequestOutput)
	return ret0, ret1
}

// AcceptSubscriptionRequestRequest indicates an expected call of AcceptSubscriptionRequestRequest
func (mr *MockDataZoneAPIMockRecorder) AcceptSubscriptionRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSubscriptionRequestRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).AcceptSubscriptionRequestRequest), arg0)
}

// AcceptSubscriptionRequestWithContext mocks base method
func (m *MockDataZoneAPI) AcceptSubscriptionRequestWithContext(arg0 context.Context, arg1 *datazone.AcceptSubscriptionRequestInput, arg2 ...request.Option) (*datazone.AcceptSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptSubscriptionRequestWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.AcceptSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptSubscriptionRequestWithContext indicates an expected call of AcceptSubscriptionRequestWithContext
func (mr *MockDataZoneAPIMockRecorder) AcceptSubscriptionRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSubscriptionRequestWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).AcceptSubscriptionRequestWithContext), varargs...)
}

// AssociateEnvironmentRole mocks base method
func (m *MockDataZoneAPI) AssociateEnvironmentRole(arg0 *datazone.AssociateEnvironmentRoleInput) (*datazone.AssociateEnvironmentRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateEnvironmentRole", arg0)
	ret0, _ := ret[0].(*datazone.AssociateEnvironmentRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateEnvironmentRole indicates an expected call of AssociateEnvironmentRole
func (mr *MockDataZoneAPIMockRecorder) AssociateEnvironmentRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateEnvironmentRole", reflect.TypeOf((*MockDataZoneAPI)(nil).AssociateEnvironmentRole), arg0)
}

// AssociateEnvironmentRoleRequest mocks base method
func (m *MockDataZoneAPI) AssociateEnvironmentRoleRequest(arg0 *datazone.AssociateEnvironmentRoleInput) (*request.Request, *datazone.AssociateEnvironmentRoleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateEnvironmentRoleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.AssociateEnvironmentRoleOutput)
	return ret0, ret1
}

// AssociateEnvironmentRoleRequest indicates an expected call of AssociateEnvironmentRoleRequest
func (mr *MockDataZoneAPIMockRecorder) AssociateEnvironmentRoleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateEnvironmentRoleRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).AssociateEnvironmentRoleRequest), arg0)
}

// AssociateEnvironmentRoleWithContext mocks base method
func (m *MockDataZoneAPI) AssociateEnvironmentRoleWithContext(arg0 context.Context, arg1 *datazone.AssociateEnvironmentRoleInput, arg2 ...request.Option) (*datazone.AssociateEnvironmentRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateEnvironmentRoleWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.AssociateEnvironmentRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateEnvironmentRoleWithContext indicates an expected call of AssociateEnvironmentRoleWithContext
func (mr *MockDataZoneAPIMockRecorder) AssociateEnvironmentRoleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateEnvironmentRoleWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).AssociateEnvironmentRoleWithContext), varargs...)
}

// CancelMetadataGenerationRun mocks base method
func (m *MockDataZoneAPI) CancelMetadataGenerationRun(arg0 *datazone.CancelMetadataGenerationRunInput) (*datazone.CancelMetadataGenerationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMetadataGenerationRun", arg0)
	ret0, _ := ret[0].(*datazone.CancelMetadataGenerationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMetadataGenerationRun indicates an expected call of CancelMetadataGenerationRun
func (mr *MockDataZoneAPIMockRecorder) CancelMetadataGenerationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMetadataGenerationRun", reflect.TypeOf((*MockDataZoneAPI)(nil).CancelMetadataGenerationRun), arg0)
}

// CancelMetadataGenerationRunRequest mocks base method
func (m *MockDataZoneAPI) CancelMetadataGenerationRunRequest(arg0 *datazone.CancelMetadataGenerationRunInput) (*request.Request, *datazone.CancelMetadataGenerationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMetadataGenerationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CancelMetadataGenerationRunOutput)
	return ret0, ret1
}

// CancelMetadataGenerationRunRequest indicates an expected call of CancelMetadataGenerationRunRequest
func (mr *MockDataZoneAPIMockRecorder) CancelMetadataGenerationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMetadataGenerationRunRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CancelMetadataGenerationRunRequest), arg0)
}

// CancelMetadataGenerationRunWithContext mocks base method
func (m *MockDataZoneAPI) CancelMetadataGenerationRunWithContext(arg0 context.Context, arg1 *datazone.CancelMetadataGenerationRunInput, arg2 ...request.Option) (*datazone.CancelMetadataGenerationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMetadataGenerationRunWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CancelMetadataGenerationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMetadataGenerationRunWithContext indicates an expected call of CancelMetadataGenerationRunWithContext
func (mr *MockDataZoneAPIMockRecorder) CancelMetadataGenerationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMetadataGenerationRunWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CancelMetadataGenerationRunWithContext), varargs...)
}

// CancelSubscription mocks base method
func (m *MockDataZoneAPI) CancelSubscription(arg0 *datazone.CancelSubscriptionInput) (*datazone.CancelSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscription", arg0)
	ret0, _ := ret[0].(*datazone.CancelSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSubscription indicates an expected call of CancelSubscription
func (mr *MockDataZoneAPIMockRecorder) CancelSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscription", reflect.TypeOf((*MockDataZoneAPI)(nil).CancelSubscription), arg0)
}

// CancelSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) CancelSubscriptionRequest(arg0 *datazone.CancelSubscriptionInput) (*request.Request, *datazone.CancelSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CancelSubscriptionOutput)
	return ret0, ret1
}

// CancelSubscriptionRequest indicates an expected call of CancelSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) CancelSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CancelSubscriptionRequest), arg0)
}

// CancelSubscriptionWithContext mocks base method
func (m *MockDataZoneAPI) CancelSubscriptionWithContext(arg0 context.Context, arg1 *datazone.CancelSubscriptionInput, arg2 ...request.Option) (*datazone.CancelSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CancelSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSubscriptionWithContext indicates an expected call of CancelSubscriptionWithContext
func (mr *MockDataZoneAPIMockRecorder) CancelSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscriptionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CancelSubscriptionWithContext), varargs...)
}

// CreateAsset mocks base method
func (m *MockDataZoneAPI) CreateAsset(arg0 *datazone.CreateAssetInput) (*datazone.CreateAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", arg0)
	ret0, _ := ret[0].(*datazone.CreateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset
func (mr *MockDataZoneAPIMockRecorder) CreateAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAsset), arg0)
}

// CreateAssetFilter mocks base method
func (m *MockDataZoneAPI) CreateAssetFilter(arg0 *datazone.CreateAssetFilterInput) (*datazone.CreateAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetFilter", arg0)
	ret0, _ := ret[0].(*datazone.CreateAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetFilter indicates an expected call of CreateAssetFilter
func (mr *MockDataZoneAPIMockRecorder) CreateAssetFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetFilter", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetFilter), arg0)
}

// CreateAssetFilterRequest mocks base method
func (m *MockDataZoneAPI) CreateAssetFilterRequest(arg0 *datazone.CreateAssetFilterInput) (*request.Request, *datazone.CreateAssetFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateAssetFilterOutput)
	return ret0, ret1
}

// CreateAssetFilterRequest indicates an expected call of CreateAssetFilterRequest
func (mr *MockDataZoneAPIMockRecorder) CreateAssetFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetFilterRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetFilterRequest), arg0)
}

// CreateAssetFilterWithContext mocks base method
func (m *MockDataZoneAPI) CreateAssetFilterWithContext(arg0 context.Context, arg1 *datazone.CreateAssetFilterInput, arg2 ...request.Option) (*datazone.CreateAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssetFilterWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetFilterWithContext indicates an expected call of CreateAssetFilterWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateAssetFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetFilterWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetFilterWithContext), varargs...)
}

// CreateAssetRequest mocks base method
func (m *MockDataZoneAPI) CreateAssetRequest(arg0 *datazone.CreateAssetInput) (*request.Request, *datazone.CreateAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateAssetOutput)
	return ret0, ret1
}

// CreateAssetRequest indicates an expected call of CreateAssetRequest
func (mr *MockDataZoneAPIMockRecorder) CreateAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetRequest), arg0)
}

// CreateAssetRevision mocks base method
func (m *MockDataZoneAPI) CreateAssetRevision(arg0 *datazone.CreateAssetRevisionInput) (*datazone.CreateAssetRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetRevision", arg0)
	ret0, _ := ret[0].(*datazone.CreateAssetRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetRevision indicates an expected call of CreateAssetRevision
func (mr *MockDataZoneAPIMockRecorder) CreateAssetRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetRevision", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetRevision), arg0)
}

// CreateAssetRevisionRequest mocks base method
func (m *MockDataZoneAPI) CreateAssetRevisionRequest(arg0 *datazone.CreateAssetRevisionInput) (*request.Request, *datazone.CreateAssetRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateAssetRevisionOutput)
	return ret0, ret1
}

// CreateAssetRevisionRequest indicates an expected call of CreateAssetRevisionRequest
func (mr *MockDataZoneAPIMockRecorder) CreateAssetRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetRevisionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetRevisionRequest), arg0)
}

// CreateAssetRevisionWithContext mocks base method
func (m *MockDataZoneAPI) CreateAssetRevisionWithContext(arg0 context.Context, arg1 *datazone.CreateAssetRevisionInput, arg2 ...request.Option) (*datazone.CreateAssetRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssetRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateAssetRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetRevisionWithContext indicates an expected call of CreateAssetRevisionWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateAssetRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetRevisionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetRevisionWithContext), varargs...)
}

// CreateAssetType mocks base method
func (m *MockDataZoneAPI) CreateAssetType(arg0 *datazone.CreateAssetTypeInput) (*datazone.CreateAssetTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetType", arg0)
	ret0, _ := ret[0].(*datazone.CreateAssetTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetType indicates an expected call of CreateAssetType
func (mr *MockDataZoneAPIMockRecorder) CreateAssetType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetType", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetType), arg0)
}

// CreateAssetTypeRequest mocks base method
func (m *MockDataZoneAPI) CreateAssetTypeRequest(arg0 *datazone.CreateAssetTypeInput) (*request.Request, *datazone.CreateAssetTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateAssetTypeOutput)
	return ret0, ret1
}

// CreateAssetTypeRequest indicates an expected call of CreateAssetTypeRequest
func (mr *MockDataZoneAPIMockRecorder) CreateAssetTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetTypeRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetTypeRequest), arg0)
}

// CreateAssetTypeWithContext mocks base method
func (m *MockDataZoneAPI) CreateAssetTypeWithContext(arg0 context.Context, arg1 *datazone.CreateAssetTypeInput, arg2 ...request.Option) (*datazone.CreateAssetTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssetTypeWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateAssetTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetTypeWithContext indicates an expected call of CreateAssetTypeWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateAssetTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetTypeWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetTypeWithContext), varargs...)
}

// CreateAssetWithContext mocks base method
func (m *MockDataZoneAPI) CreateAssetWithContext(arg0 context.Context, arg1 *datazone.CreateAssetInput, arg2 ...request.Option) (*datazone.CreateAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetWithContext indicates an expected call of CreateAssetWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateAssetWithContext), varargs...)
}

// CreateDataSource mocks base method
func (m *MockDataZoneAPI) CreateDataSource(arg0 *datazone.CreateDataSourceInput) (*datazone.CreateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSource", arg0)
	ret0, _ := ret[0].(*datazone.CreateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSource indicates an expected call of CreateDataSource
func (mr *MockDataZoneAPIMockRecorder) CreateDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSource", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateDataSource), arg0)
}

// CreateDataSourceRequest mocks base method
func (m *MockDataZoneAPI) CreateDataSourceRequest(arg0 *datazone.CreateDataSourceInput) (*request.Request, *datazone.CreateDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateDataSourceOutput)
	return ret0, ret1
}

// CreateDataSourceRequest indicates an expected call of CreateDataSourceRequest
func (mr *MockDataZoneAPIMockRecorder) CreateDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSourceRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateDataSourceRequest), arg0)
}

// CreateDataSourceWithContext mocks base method
func (m *MockDataZoneAPI) CreateDataSourceWithContext(arg0 context.Context, arg1 *datazone.CreateDataSourceInput, arg2 ...request.Option) (*datazone.CreateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSourceWithContext indicates an expected call of CreateDataSourceWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSourceWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateDataSourceWithContext), varargs...)
}

// CreateDomain mocks base method
func (m *MockDataZoneAPI) CreateDomain(arg0 *datazone.CreateDomainInput) (*datazone.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(*datazone.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain
func (mr *MockDataZoneAPIMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateDomain), arg0)
}

// CreateDomainRequest mocks base method
func (m *MockDataZoneAPI) CreateDomainRequest(arg0 *datazone.CreateDomainInput) (*request.Request, *datazone.CreateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateDomainOutput)
	return ret0, ret1
}

// CreateDomainRequest indicates an expected call of CreateDomainRequest
func (mr *MockDataZoneAPIMockRecorder) CreateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateDomainRequest), arg0)
}

// CreateDomainWithContext mocks base method
func (m *MockDataZoneAPI) CreateDomainWithContext(arg0 context.Context, arg1 *datazone.CreateDomainInput, arg2 ...request.Option) (*datazone.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithContext indicates an expected call of CreateDomainWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateDomainWithContext), varargs...)
}

// CreateEnvironment mocks base method
func (m *MockDataZoneAPI) CreateEnvironment(arg0 *datazone.CreateEnvironmentInput) (*datazone.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(*datazone.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentAction mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentAction(arg0 *datazone.CreateEnvironmentActionInput) (*datazone.CreateEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentAction", arg0)
	ret0, _ := ret[0].(*datazone.CreateEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentAction indicates an expected call of CreateEnvironmentAction
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentAction", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentAction), arg0)
}

// CreateEnvironmentActionRequest mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentActionRequest(arg0 *datazone.CreateEnvironmentActionInput) (*request.Request, *datazone.CreateEnvironmentActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateEnvironmentActionOutput)
	return ret0, ret1
}

// CreateEnvironmentActionRequest indicates an expected call of CreateEnvironmentActionRequest
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentActionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentActionRequest), arg0)
}

// CreateEnvironmentActionWithContext mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentActionWithContext(arg0 context.Context, arg1 *datazone.CreateEnvironmentActionInput, arg2 ...request.Option) (*datazone.CreateEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentActionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentActionWithContext indicates an expected call of CreateEnvironmentActionWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentActionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentActionWithContext), varargs...)
}

// CreateEnvironmentProfile mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentProfile(arg0 *datazone.CreateEnvironmentProfileInput) (*datazone.CreateEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentProfile", arg0)
	ret0, _ := ret[0].(*datazone.CreateEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentProfile indicates an expected call of CreateEnvironmentProfile
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentProfile), arg0)
}

// CreateEnvironmentProfileRequest mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentProfileRequest(arg0 *datazone.CreateEnvironmentProfileInput) (*request.Request, *datazone.CreateEnvironmentProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateEnvironmentProfileOutput)
	return ret0, ret1
}

// CreateEnvironmentProfileRequest indicates an expected call of CreateEnvironmentProfileRequest
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentProfileRequest), arg0)
}

// CreateEnvironmentProfileWithContext mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentProfileWithContext(arg0 context.Context, arg1 *datazone.CreateEnvironmentProfileInput, arg2 ...request.Option) (*datazone.CreateEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentProfileWithContext indicates an expected call of CreateEnvironmentProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentProfileWithContext), varargs...)
}

// CreateEnvironmentRequest mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentRequest(arg0 *datazone.CreateEnvironmentInput) (*request.Request, *datazone.CreateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateEnvironmentOutput)
	return ret0, ret1
}

// CreateEnvironmentRequest indicates an expected call of CreateEnvironmentRequest
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentRequest), arg0)
}

// CreateEnvironmentWithContext mocks base method
func (m *MockDataZoneAPI) CreateEnvironmentWithContext(arg0 context.Context, arg1 *datazone.CreateEnvironmentInput, arg2 ...request.Option) (*datazone.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentWithContext indicates an expected call of CreateEnvironmentWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateEnvironmentWithContext), varargs...)
}

// CreateFormType mocks base method
func (m *MockDataZoneAPI) CreateFormType(arg0 *datazone.CreateFormTypeInput) (*datazone.CreateFormTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormType", arg0)
	ret0, _ := ret[0].(*datazone.CreateFormTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFormType indicates an expected call of CreateFormType
func (mr *MockDataZoneAPIMockRecorder) CreateFormType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormType", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateFormType), arg0)
}

// CreateFormTypeRequest mocks base method
func (m *MockDataZoneAPI) CreateFormTypeRequest(arg0 *datazone.CreateFormTypeInput) (*request.Request, *datazone.CreateFormTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateFormTypeOutput)
	return ret0, ret1
}

// CreateFormTypeRequest indicates an expected call of CreateFormTypeRequest
func (mr *MockDataZoneAPIMockRecorder) CreateFormTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormTypeRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateFormTypeRequest), arg0)
}

// CreateFormTypeWithContext mocks base method
func (m *MockDataZoneAPI) CreateFormTypeWithContext(arg0 context.Context, arg1 *datazone.CreateFormTypeInput, arg2 ...request.Option) (*datazone.CreateFormTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFormTypeWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateFormTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFormTypeWithContext indicates an expected call of CreateFormTypeWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateFormTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormTypeWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateFormTypeWithContext), varargs...)
}

// CreateGlossary mocks base method
func (m *MockDataZoneAPI) CreateGlossary(arg0 *datazone.CreateGlossaryInput) (*datazone.CreateGlossaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlossary", arg0)
	ret0, _ := ret[0].(*datazone.CreateGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlossary indicates an expected call of CreateGlossary
func (mr *MockDataZoneAPIMockRecorder) CreateGlossary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlossary", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGlossary), arg0)
}

// CreateGlossaryRequest mocks base method
func (m *MockDataZoneAPI) CreateGlossaryRequest(arg0 *datazone.CreateGlossaryInput) (*request.Request, *datazone.CreateGlossaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlossaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateGlossaryOutput)
	return ret0, ret1
}

// CreateGlossaryRequest indicates an expected call of CreateGlossaryRequest
func (mr *MockDataZoneAPIMockRecorder) CreateGlossaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlossaryRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGlossaryRequest), arg0)
}

// CreateGlossaryTerm mocks base method
func (m *MockDataZoneAPI) CreateGlossaryTerm(arg0 *datazone.CreateGlossaryTermInput) (*datazone.CreateGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlossaryTerm", arg0)
	ret0, _ := ret[0].(*datazone.CreateGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlossaryTerm indicates an expected call of CreateGlossaryTerm
func (mr *MockDataZoneAPIMockRecorder) CreateGlossaryTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlossaryTerm", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGlossaryTerm), arg0)
}

// CreateGlossaryTermRequest mocks base method
func (m *MockDataZoneAPI) CreateGlossaryTermRequest(arg0 *datazone.CreateGlossaryTermInput) (*request.Request, *datazone.CreateGlossaryTermOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlossaryTermRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateGlossaryTermOutput)
	return ret0, ret1
}

// CreateGlossaryTermRequest indicates an expected call of CreateGlossaryTermRequest
func (mr *MockDataZoneAPIMockRecorder) CreateGlossaryTermRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlossaryTermRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGlossaryTermRequest), arg0)
}

// CreateGlossaryTermWithContext mocks base method
func (m *MockDataZoneAPI) CreateGlossaryTermWithContext(arg0 context.Context, arg1 *datazone.CreateGlossaryTermInput, arg2 ...request.Option) (*datazone.CreateGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGlossaryTermWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlossaryTermWithContext indicates an expected call of CreateGlossaryTermWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateGlossaryTermWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlossaryTermWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGlossaryTermWithContext), varargs...)
}

// CreateGlossaryWithContext mocks base method
func (m *MockDataZoneAPI) CreateGlossaryWithContext(arg0 context.Context, arg1 *datazone.CreateGlossaryInput, arg2 ...request.Option) (*datazone.CreateGlossaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGlossaryWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlossaryWithContext indicates an expected call of CreateGlossaryWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateGlossaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlossaryWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGlossaryWithContext), varargs...)
}

// CreateGroupProfile mocks base method
func (m *MockDataZoneAPI) CreateGroupProfile(arg0 *datazone.CreateGroupProfileInput) (*datazone.CreateGroupProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupProfile", arg0)
	ret0, _ := ret[0].(*datazone.CreateGroupProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupProfile indicates an expected call of CreateGroupProfile
func (mr *MockDataZoneAPIMockRecorder) CreateGroupProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGroupProfile), arg0)
}

// CreateGroupProfileRequest mocks base method
func (m *MockDataZoneAPI) CreateGroupProfileRequest(arg0 *datazone.CreateGroupProfileInput) (*request.Request, *datazone.CreateGroupProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateGroupProfileOutput)
	return ret0, ret1
}

// CreateGroupProfileRequest indicates an expected call of CreateGroupProfileRequest
func (mr *MockDataZoneAPIMockRecorder) CreateGroupProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGroupProfileRequest), arg0)
}

// CreateGroupProfileWithContext mocks base method
func (m *MockDataZoneAPI) CreateGroupProfileWithContext(arg0 context.Context, arg1 *datazone.CreateGroupProfileInput, arg2 ...request.Option) (*datazone.CreateGroupProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateGroupProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupProfileWithContext indicates an expected call of CreateGroupProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateGroupProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateGroupProfileWithContext), varargs...)
}

// CreateListingChangeSet mocks base method
func (m *MockDataZoneAPI) CreateListingChangeSet(arg0 *datazone.CreateListingChangeSetInput) (*datazone.CreateListingChangeSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListingChangeSet", arg0)
	ret0, _ := ret[0].(*datazone.CreateListingChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListingChangeSet indicates an expected call of CreateListingChangeSet
func (mr *MockDataZoneAPIMockRecorder) CreateListingChangeSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListingChangeSet", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateListingChangeSet), arg0)
}

// CreateListingChangeSetRequest mocks base method
func (m *MockDataZoneAPI) CreateListingChangeSetRequest(arg0 *datazone.CreateListingChangeSetInput) (*request.Request, *datazone.CreateListingChangeSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListingChangeSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateListingChangeSetOutput)
	return ret0, ret1
}

// CreateListingChangeSetRequest indicates an expected call of CreateListingChangeSetRequest
func (mr *MockDataZoneAPIMockRecorder) CreateListingChangeSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListingChangeSetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateListingChangeSetRequest), arg0)
}

// CreateListingChangeSetWithContext mocks base method
func (m *MockDataZoneAPI) CreateListingChangeSetWithContext(arg0 context.Context, arg1 *datazone.CreateListingChangeSetInput, arg2 ...request.Option) (*datazone.CreateListingChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateListingChangeSetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateListingChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListingChangeSetWithContext indicates an expected call of CreateListingChangeSetWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateListingChangeSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListingChangeSetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateListingChangeSetWithContext), varargs...)
}

// CreateProject mocks base method
func (m *MockDataZoneAPI) CreateProject(arg0 *datazone.CreateProjectInput) (*datazone.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(*datazone.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockDataZoneAPIMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateProject), arg0)
}

// CreateProjectMembership mocks base method
func (m *MockDataZoneAPI) CreateProjectMembership(arg0 *datazone.CreateProjectMembershipInput) (*datazone.CreateProjectMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectMembership", arg0)
	ret0, _ := ret[0].(*datazone.CreateProjectMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectMembership indicates an expected call of CreateProjectMembership
func (mr *MockDataZoneAPIMockRecorder) CreateProjectMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectMembership", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateProjectMembership), arg0)
}

// CreateProjectMembershipRequest mocks base method
func (m *MockDataZoneAPI) CreateProjectMembershipRequest(arg0 *datazone.CreateProjectMembershipInput) (*request.Request, *datazone.CreateProjectMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateProjectMembershipOutput)
	return ret0, ret1
}

// CreateProjectMembershipRequest indicates an expected call of CreateProjectMembershipRequest
func (mr *MockDataZoneAPIMockRecorder) CreateProjectMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectMembershipRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateProjectMembershipRequest), arg0)
}

// CreateProjectMembershipWithContext mocks base method
func (m *MockDataZoneAPI) CreateProjectMembershipWithContext(arg0 context.Context, arg1 *datazone.CreateProjectMembershipInput, arg2 ...request.Option) (*datazone.CreateProjectMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateProjectMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectMembershipWithContext indicates an expected call of CreateProjectMembershipWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateProjectMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectMembershipWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateProjectMembershipWithContext), varargs...)
}

// CreateProjectRequest mocks base method
func (m *MockDataZoneAPI) CreateProjectRequest(arg0 *datazone.CreateProjectInput) (*request.Request, *datazone.CreateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateProjectOutput)
	return ret0, ret1
}

// CreateProjectRequest indicates an expected call of CreateProjectRequest
func (mr *MockDataZoneAPIMockRecorder) CreateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateProjectRequest), arg0)
}

// CreateProjectWithContext mocks base method
func (m *MockDataZoneAPI) CreateProjectWithContext(arg0 context.Context, arg1 *datazone.CreateProjectInput, arg2 ...request.Option) (*datazone.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectWithContext indicates an expected call of CreateProjectWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateProjectWithContext), varargs...)
}

// CreateSubscriptionGrant mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionGrant(arg0 *datazone.CreateSubscriptionGrantInput) (*datazone.CreateSubscriptionGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionGrant", arg0)
	ret0, _ := ret[0].(*datazone.CreateSubscriptionGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionGrant indicates an expected call of CreateSubscriptionGrant
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionGrant", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionGrant), arg0)
}

// CreateSubscriptionGrantRequest mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionGrantRequest(arg0 *datazone.CreateSubscriptionGrantInput) (*request.Request, *datazone.CreateSubscriptionGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateSubscriptionGrantOutput)
	return ret0, ret1
}

// CreateSubscriptionGrantRequest indicates an expected call of CreateSubscriptionGrantRequest
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionGrantRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionGrantRequest), arg0)
}

// CreateSubscriptionGrantWithContext mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionGrantWithContext(arg0 context.Context, arg1 *datazone.CreateSubscriptionGrantInput, arg2 ...request.Option) (*datazone.CreateSubscriptionGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscriptionGrantWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateSubscriptionGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionGrantWithContext indicates an expected call of CreateSubscriptionGrantWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionGrantWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionGrantWithContext), varargs...)
}

// CreateSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionRequest(arg0 *datazone.CreateSubscriptionRequestInput) (*datazone.CreateSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*datazone.CreateSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionRequest indicates an expected call of CreateSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionRequest), arg0)
}

// CreateSubscriptionRequestRequest mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionRequestRequest(arg0 *datazone.CreateSubscriptionRequestInput) (*request.Request, *datazone.CreateSubscriptionRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateSubscriptionRequestOutput)
	return ret0, ret1
}

// CreateSubscriptionRequestRequest indicates an expected call of CreateSubscriptionRequestRequest
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionRequestRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionRequestRequest), arg0)
}

// CreateSubscriptionRequestWithContext mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionRequestWithContext(arg0 context.Context, arg1 *datazone.CreateSubscriptionRequestInput, arg2 ...request.Option) (*datazone.CreateSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscriptionRequestWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionRequestWithContext indicates an expected call of CreateSubscriptionRequestWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionRequestWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionRequestWithContext), varargs...)
}

// CreateSubscriptionTarget mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionTarget(arg0 *datazone.CreateSubscriptionTargetInput) (*datazone.CreateSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionTarget", arg0)
	ret0, _ := ret[0].(*datazone.CreateSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionTarget indicates an expected call of CreateSubscriptionTarget
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionTarget", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionTarget), arg0)
}

// CreateSubscriptionTargetRequest mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionTargetRequest(arg0 *datazone.CreateSubscriptionTargetInput) (*request.Request, *datazone.CreateSubscriptionTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateSubscriptionTargetOutput)
	return ret0, ret1
}

// CreateSubscriptionTargetRequest indicates an expected call of CreateSubscriptionTargetRequest
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionTargetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionTargetRequest), arg0)
}

// CreateSubscriptionTargetWithContext mocks base method
func (m *MockDataZoneAPI) CreateSubscriptionTargetWithContext(arg0 context.Context, arg1 *datazone.CreateSubscriptionTargetInput, arg2 ...request.Option) (*datazone.CreateSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscriptionTargetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionTargetWithContext indicates an expected call of CreateSubscriptionTargetWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateSubscriptionTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionTargetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateSubscriptionTargetWithContext), varargs...)
}

// CreateUserProfile mocks base method
func (m *MockDataZoneAPI) CreateUserProfile(arg0 *datazone.CreateUserProfileInput) (*datazone.CreateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProfile", arg0)
	ret0, _ := ret[0].(*datazone.CreateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProfile indicates an expected call of CreateUserProfile
func (mr *MockDataZoneAPIMockRecorder) CreateUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateUserProfile), arg0)
}

// CreateUserProfileRequest mocks base method
func (m *MockDataZoneAPI) CreateUserProfileRequest(arg0 *datazone.CreateUserProfileInput) (*request.Request, *datazone.CreateUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.CreateUserProfileOutput)
	return ret0, ret1
}

// CreateUserProfileRequest indicates an expected call of CreateUserProfileRequest
func (mr *MockDataZoneAPIMockRecorder) CreateUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateUserProfileRequest), arg0)
}

// CreateUserProfileWithContext mocks base method
func (m *MockDataZoneAPI) CreateUserProfileWithContext(arg0 context.Context, arg1 *datazone.CreateUserProfileInput, arg2 ...request.Option) (*datazone.CreateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.CreateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProfileWithContext indicates an expected call of CreateUserProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) CreateUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).CreateUserProfileWithContext), varargs...)
}

// DeleteAsset mocks base method
func (m *MockDataZoneAPI) DeleteAsset(arg0 *datazone.DeleteAssetInput) (*datazone.DeleteAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", arg0)
	ret0, _ := ret[0].(*datazone.DeleteAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsset indicates an expected call of DeleteAsset
func (mr *MockDataZoneAPIMockRecorder) DeleteAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAsset), arg0)
}

// DeleteAssetFilter mocks base method
func (m *MockDataZoneAPI) DeleteAssetFilter(arg0 *datazone.DeleteAssetFilterInput) (*datazone.DeleteAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetFilter", arg0)
	ret0, _ := ret[0].(*datazone.DeleteAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetFilter indicates an expected call of DeleteAssetFilter
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetFilter", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetFilter), arg0)
}

// DeleteAssetFilterRequest mocks base method
func (m *MockDataZoneAPI) DeleteAssetFilterRequest(arg0 *datazone.DeleteAssetFilterInput) (*request.Request, *datazone.DeleteAssetFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteAssetFilterOutput)
	return ret0, ret1
}

// DeleteAssetFilterRequest indicates an expected call of DeleteAssetFilterRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetFilterRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetFilterRequest), arg0)
}

// DeleteAssetFilterWithContext mocks base method
func (m *MockDataZoneAPI) DeleteAssetFilterWithContext(arg0 context.Context, arg1 *datazone.DeleteAssetFilterInput, arg2 ...request.Option) (*datazone.DeleteAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssetFilterWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetFilterWithContext indicates an expected call of DeleteAssetFilterWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetFilterWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetFilterWithContext), varargs...)
}

// DeleteAssetRequest mocks base method
func (m *MockDataZoneAPI) DeleteAssetRequest(arg0 *datazone.DeleteAssetInput) (*request.Request, *datazone.DeleteAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteAssetOutput)
	return ret0, ret1
}

// DeleteAssetRequest indicates an expected call of DeleteAssetRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetRequest), arg0)
}

// DeleteAssetType mocks base method
func (m *MockDataZoneAPI) DeleteAssetType(arg0 *datazone.DeleteAssetTypeInput) (*datazone.DeleteAssetTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetType", arg0)
	ret0, _ := ret[0].(*datazone.DeleteAssetTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetType indicates an expected call of DeleteAssetType
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetType", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetType), arg0)
}

// DeleteAssetTypeRequest mocks base method
func (m *MockDataZoneAPI) DeleteAssetTypeRequest(arg0 *datazone.DeleteAssetTypeInput) (*request.Request, *datazone.DeleteAssetTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteAssetTypeOutput)
	return ret0, ret1
}

// DeleteAssetTypeRequest indicates an expected call of DeleteAssetTypeRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetTypeRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetTypeRequest), arg0)
}

// DeleteAssetTypeWithContext mocks base method
func (m *MockDataZoneAPI) DeleteAssetTypeWithContext(arg0 context.Context, arg1 *datazone.DeleteAssetTypeInput, arg2 ...request.Option) (*datazone.DeleteAssetTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssetTypeWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteAssetTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetTypeWithContext indicates an expected call of DeleteAssetTypeWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetTypeWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetTypeWithContext), varargs...)
}

// DeleteAssetWithContext mocks base method
func (m *MockDataZoneAPI) DeleteAssetWithContext(arg0 context.Context, arg1 *datazone.DeleteAssetInput, arg2 ...request.Option) (*datazone.DeleteAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetWithContext indicates an expected call of DeleteAssetWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteAssetWithContext), varargs...)
}

// DeleteDataSource mocks base method
func (m *MockDataZoneAPI) DeleteDataSource(arg0 *datazone.DeleteDataSourceInput) (*datazone.DeleteDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSource", arg0)
	ret0, _ := ret[0].(*datazone.DeleteDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSource indicates an expected call of DeleteDataSource
func (mr *MockDataZoneAPIMockRecorder) DeleteDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSource", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteDataSource), arg0)
}

// DeleteDataSourceRequest mocks base method
func (m *MockDataZoneAPI) DeleteDataSourceRequest(arg0 *datazone.DeleteDataSourceInput) (*request.Request, *datazone.DeleteDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteDataSourceOutput)
	return ret0, ret1
}

// DeleteDataSourceRequest indicates an expected call of DeleteDataSourceRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSourceRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteDataSourceRequest), arg0)
}

// DeleteDataSourceWithContext mocks base method
func (m *MockDataZoneAPI) DeleteDataSourceWithContext(arg0 context.Context, arg1 *datazone.DeleteDataSourceInput, arg2 ...request.Option) (*datazone.DeleteDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSourceWithContext indicates an expected call of DeleteDataSourceWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSourceWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteDataSourceWithContext), varargs...)
}

// DeleteDomain mocks base method
func (m *MockDataZoneAPI) DeleteDomain(arg0 *datazone.DeleteDomainInput) (*datazone.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0)
	ret0, _ := ret[0].(*datazone.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomain indicates an expected call of DeleteDomain
func (mr *MockDataZoneAPIMockRecorder) DeleteDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteDomain), arg0)
}

// DeleteDomainRequest mocks base method
func (m *MockDataZoneAPI) DeleteDomainRequest(arg0 *datazone.DeleteDomainInput) (*request.Request, *datazone.DeleteDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteDomainOutput)
	return ret0, ret1
}

// DeleteDomainRequest indicates an expected call of DeleteDomainRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteDomainRequest), arg0)
}

// DeleteDomainWithContext mocks base method
func (m *MockDataZoneAPI) DeleteDomainWithContext(arg0 context.Context, arg1 *datazone.DeleteDomainInput, arg2 ...request.Option) (*datazone.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainWithContext indicates an expected call of DeleteDomainWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteDomainWithContext), varargs...)
}

// DeleteEnvironment mocks base method
func (m *MockDataZoneAPI) DeleteEnvironment(arg0 *datazone.DeleteEnvironmentInput) (*datazone.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironment), arg0)
}

// DeleteEnvironmentAction mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentAction(arg0 *datazone.DeleteEnvironmentActionInput) (*datazone.DeleteEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentAction", arg0)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentAction indicates an expected call of DeleteEnvironmentAction
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentAction", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentAction), arg0)
}

// DeleteEnvironmentActionRequest mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentActionRequest(arg0 *datazone.DeleteEnvironmentActionInput) (*request.Request, *datazone.DeleteEnvironmentActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteEnvironmentActionOutput)
	return ret0, ret1
}

// DeleteEnvironmentActionRequest indicates an expected call of DeleteEnvironmentActionRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentActionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentActionRequest), arg0)
}

// DeleteEnvironmentActionWithContext mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentActionWithContext(arg0 context.Context, arg1 *datazone.DeleteEnvironmentActionInput, arg2 ...request.Option) (*datazone.DeleteEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentActionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentActionWithContext indicates an expected call of DeleteEnvironmentActionWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentActionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentActionWithContext), varargs...)
}

// DeleteEnvironmentBlueprintConfiguration mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentBlueprintConfiguration(arg0 *datazone.DeleteEnvironmentBlueprintConfigurationInput) (*datazone.DeleteEnvironmentBlueprintConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentBlueprintConfiguration", arg0)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentBlueprintConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentBlueprintConfiguration indicates an expected call of DeleteEnvironmentBlueprintConfiguration
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentBlueprintConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentBlueprintConfiguration", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentBlueprintConfiguration), arg0)
}

// DeleteEnvironmentBlueprintConfigurationRequest mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentBlueprintConfigurationRequest(arg0 *datazone.DeleteEnvironmentBlueprintConfigurationInput) (*request.Request, *datazone.DeleteEnvironmentBlueprintConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentBlueprintConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteEnvironmentBlueprintConfigurationOutput)
	return ret0, ret1
}

// DeleteEnvironmentBlueprintConfigurationRequest indicates an expected call of DeleteEnvironmentBlueprintConfigurationRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentBlueprintConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentBlueprintConfigurationRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentBlueprintConfigurationRequest), arg0)
}

// DeleteEnvironmentBlueprintConfigurationWithContext mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentBlueprintConfigurationWithContext(arg0 context.Context, arg1 *datazone.DeleteEnvironmentBlueprintConfigurationInput, arg2 ...request.Option) (*datazone.DeleteEnvironmentBlueprintConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentBlueprintConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentBlueprintConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentBlueprintConfigurationWithContext indicates an expected call of DeleteEnvironmentBlueprintConfigurationWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentBlueprintConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentBlueprintConfigurationWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentBlueprintConfigurationWithContext), varargs...)
}

// DeleteEnvironmentProfile mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentProfile(arg0 *datazone.DeleteEnvironmentProfileInput) (*datazone.DeleteEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentProfile", arg0)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentProfile indicates an expected call of DeleteEnvironmentProfile
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentProfile), arg0)
}

// DeleteEnvironmentProfileRequest mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentProfileRequest(arg0 *datazone.DeleteEnvironmentProfileInput) (*request.Request, *datazone.DeleteEnvironmentProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteEnvironmentProfileOutput)
	return ret0, ret1
}

// DeleteEnvironmentProfileRequest indicates an expected call of DeleteEnvironmentProfileRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentProfileRequest), arg0)
}

// DeleteEnvironmentProfileWithContext mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentProfileWithContext(arg0 context.Context, arg1 *datazone.DeleteEnvironmentProfileInput, arg2 ...request.Option) (*datazone.DeleteEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentProfileWithContext indicates an expected call of DeleteEnvironmentProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentProfileWithContext), varargs...)
}

// DeleteEnvironmentRequest mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentRequest(arg0 *datazone.DeleteEnvironmentInput) (*request.Request, *datazone.DeleteEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteEnvironmentOutput)
	return ret0, ret1
}

// DeleteEnvironmentRequest indicates an expected call of DeleteEnvironmentRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentRequest), arg0)
}

// DeleteEnvironmentWithContext mocks base method
func (m *MockDataZoneAPI) DeleteEnvironmentWithContext(arg0 context.Context, arg1 *datazone.DeleteEnvironmentInput, arg2 ...request.Option) (*datazone.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentWithContext indicates an expected call of DeleteEnvironmentWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteEnvironmentWithContext), varargs...)
}

// DeleteFormType mocks base method
func (m *MockDataZoneAPI) DeleteFormType(arg0 *datazone.DeleteFormTypeInput) (*datazone.DeleteFormTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFormType", arg0)
	ret0, _ := ret[0].(*datazone.DeleteFormTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFormType indicates an expected call of DeleteFormType
func (mr *MockDataZoneAPIMockRecorder) DeleteFormType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFormType", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteFormType), arg0)
}

// DeleteFormTypeRequest mocks base method
func (m *MockDataZoneAPI) DeleteFormTypeRequest(arg0 *datazone.DeleteFormTypeInput) (*request.Request, *datazone.DeleteFormTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFormTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteFormTypeOutput)
	return ret0, ret1
}

// DeleteFormTypeRequest indicates an expected call of DeleteFormTypeRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteFormTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFormTypeRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteFormTypeRequest), arg0)
}

// DeleteFormTypeWithContext mocks base method
func (m *MockDataZoneAPI) DeleteFormTypeWithContext(arg0 context.Context, arg1 *datazone.DeleteFormTypeInput, arg2 ...request.Option) (*datazone.DeleteFormTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFormTypeWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteFormTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFormTypeWithContext indicates an expected call of DeleteFormTypeWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteFormTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFormTypeWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteFormTypeWithContext), varargs...)
}

// DeleteGlossary mocks base method
func (m *MockDataZoneAPI) DeleteGlossary(arg0 *datazone.DeleteGlossaryInput) (*datazone.DeleteGlossaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlossary", arg0)
	ret0, _ := ret[0].(*datazone.DeleteGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGlossary indicates an expected call of DeleteGlossary
func (mr *MockDataZoneAPIMockRecorder) DeleteGlossary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlossary", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteGlossary), arg0)
}

// DeleteGlossaryRequest mocks base method
func (m *MockDataZoneAPI) DeleteGlossaryRequest(arg0 *datazone.DeleteGlossaryInput) (*request.Request, *datazone.DeleteGlossaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlossaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteGlossaryOutput)
	return ret0, ret1
}

// DeleteGlossaryRequest indicates an expected call of DeleteGlossaryRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteGlossaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlossaryRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteGlossaryRequest), arg0)
}

// DeleteGlossaryTerm mocks base method
func (m *MockDataZoneAPI) DeleteGlossaryTerm(arg0 *datazone.DeleteGlossaryTermInput) (*datazone.DeleteGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlossaryTerm", arg0)
	ret0, _ := ret[0].(*datazone.DeleteGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGlossaryTerm indicates an expected call of DeleteGlossaryTerm
func (mr *MockDataZoneAPIMockRecorder) DeleteGlossaryTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlossaryTerm", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteGlossaryTerm), arg0)
}

// DeleteGlossaryTermRequest mocks base method
func (m *MockDataZoneAPI) DeleteGlossaryTermRequest(arg0 *datazone.DeleteGlossaryTermInput) (*request.Request, *datazone.DeleteGlossaryTermOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlossaryTermRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteGlossaryTermOutput)
	return ret0, ret1
}

// DeleteGlossaryTermRequest indicates an expected call of DeleteGlossaryTermRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteGlossaryTermRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlossaryTermRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteGlossaryTermRequest), arg0)
}

// DeleteGlossaryTermWithContext mocks base method
func (m *MockDataZoneAPI) DeleteGlossaryTermWithContext(arg0 context.Context, arg1 *datazone.DeleteGlossaryTermInput, arg2 ...request.Option) (*datazone.DeleteGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGlossaryTermWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGlossaryTermWithContext indicates an expected call of DeleteGlossaryTermWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteGlossaryTermWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlossaryTermWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteGlossaryTermWithContext), varargs...)
}

// DeleteGlossaryWithContext mocks base method
func (m *MockDataZoneAPI) DeleteGlossaryWithContext(arg0 context.Context, arg1 *datazone.DeleteGlossaryInput, arg2 ...request.Option) (*datazone.DeleteGlossaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGlossaryWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGlossaryWithContext indicates an expected call of DeleteGlossaryWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteGlossaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlossaryWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteGlossaryWithContext), varargs...)
}

// DeleteListing mocks base method
func (m *MockDataZoneAPI) DeleteListing(arg0 *datazone.DeleteListingInput) (*datazone.DeleteListingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListing", arg0)
	ret0, _ := ret[0].(*datazone.DeleteListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListing indicates an expected call of DeleteListing
func (mr *MockDataZoneAPIMockRecorder) DeleteListing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListing", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteListing), arg0)
}

// DeleteListingRequest mocks base method
func (m *MockDataZoneAPI) DeleteListingRequest(arg0 *datazone.DeleteListingInput) (*request.Request, *datazone.DeleteListingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteListingOutput)
	return ret0, ret1
}

// DeleteListingRequest indicates an expected call of DeleteListingRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteListingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListingRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteListingRequest), arg0)
}

// DeleteListingWithContext mocks base method
func (m *MockDataZoneAPI) DeleteListingWithContext(arg0 context.Context, arg1 *datazone.DeleteListingInput, arg2 ...request.Option) (*datazone.DeleteListingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteListingWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListingWithContext indicates an expected call of DeleteListingWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteListingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListingWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteListingWithContext), varargs...)
}

// DeleteProject mocks base method
func (m *MockDataZoneAPI) DeleteProject(arg0 *datazone.DeleteProjectInput) (*datazone.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(*datazone.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockDataZoneAPIMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteProject), arg0)
}

// DeleteProjectMembership mocks base method
func (m *MockDataZoneAPI) DeleteProjectMembership(arg0 *datazone.DeleteProjectMembershipInput) (*datazone.DeleteProjectMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectMembership", arg0)
	ret0, _ := ret[0].(*datazone.DeleteProjectMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectMembership indicates an expected call of DeleteProjectMembership
func (mr *MockDataZoneAPIMockRecorder) DeleteProjectMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectMembership", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteProjectMembership), arg0)
}

// DeleteProjectMembershipRequest mocks base method
func (m *MockDataZoneAPI) DeleteProjectMembershipRequest(arg0 *datazone.DeleteProjectMembershipInput) (*request.Request, *datazone.DeleteProjectMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteProjectMembershipOutput)
	return ret0, ret1
}

// DeleteProjectMembershipRequest indicates an expected call of DeleteProjectMembershipRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteProjectMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectMembershipRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteProjectMembershipRequest), arg0)
}

// DeleteProjectMembershipWithContext mocks base method
func (m *MockDataZoneAPI) DeleteProjectMembershipWithContext(arg0 context.Context, arg1 *datazone.DeleteProjectMembershipInput, arg2 ...request.Option) (*datazone.DeleteProjectMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteProjectMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectMembershipWithContext indicates an expected call of DeleteProjectMembershipWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteProjectMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectMembershipWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteProjectMembershipWithContext), varargs...)
}

// DeleteProjectRequest mocks base method
func (m *MockDataZoneAPI) DeleteProjectRequest(arg0 *datazone.DeleteProjectInput) (*request.Request, *datazone.DeleteProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteProjectOutput)
	return ret0, ret1
}

// DeleteProjectRequest indicates an expected call of DeleteProjectRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteProjectRequest), arg0)
}

// DeleteProjectWithContext mocks base method
func (m *MockDataZoneAPI) DeleteProjectWithContext(arg0 context.Context, arg1 *datazone.DeleteProjectInput, arg2 ...request.Option) (*datazone.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectWithContext indicates an expected call of DeleteProjectWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteProjectWithContext), varargs...)
}

// DeleteSubscriptionGrant mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionGrant(arg0 *datazone.DeleteSubscriptionGrantInput) (*datazone.DeleteSubscriptionGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionGrant", arg0)
	ret0, _ := ret[0].(*datazone.DeleteSubscriptionGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionGrant indicates an expected call of DeleteSubscriptionGrant
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionGrant", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionGrant), arg0)
}

// DeleteSubscriptionGrantRequest mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionGrantRequest(arg0 *datazone.DeleteSubscriptionGrantInput) (*request.Request, *datazone.DeleteSubscriptionGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteSubscriptionGrantOutput)
	return ret0, ret1
}

// DeleteSubscriptionGrantRequest indicates an expected call of DeleteSubscriptionGrantRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionGrantRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionGrantRequest), arg0)
}

// DeleteSubscriptionGrantWithContext mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionGrantWithContext(arg0 context.Context, arg1 *datazone.DeleteSubscriptionGrantInput, arg2 ...request.Option) (*datazone.DeleteSubscriptionGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscriptionGrantWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteSubscriptionGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionGrantWithContext indicates an expected call of DeleteSubscriptionGrantWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionGrantWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionGrantWithContext), varargs...)
}

// DeleteSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionRequest(arg0 *datazone.DeleteSubscriptionRequestInput) (*datazone.DeleteSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*datazone.DeleteSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionRequest indicates an expected call of DeleteSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionRequest), arg0)
}

// DeleteSubscriptionRequestRequest mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionRequestRequest(arg0 *datazone.DeleteSubscriptionRequestInput) (*request.Request, *datazone.DeleteSubscriptionRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteSubscriptionRequestOutput)
	return ret0, ret1
}

// DeleteSubscriptionRequestRequest indicates an expected call of DeleteSubscriptionRequestRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionRequestRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionRequestRequest), arg0)
}

// DeleteSubscriptionRequestWithContext mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionRequestWithContext(arg0 context.Context, arg1 *datazone.DeleteSubscriptionRequestInput, arg2 ...request.Option) (*datazone.DeleteSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscriptionRequestWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionRequestWithContext indicates an expected call of DeleteSubscriptionRequestWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionRequestWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionRequestWithContext), varargs...)
}

// DeleteSubscriptionTarget mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionTarget(arg0 *datazone.DeleteSubscriptionTargetInput) (*datazone.DeleteSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionTarget", arg0)
	ret0, _ := ret[0].(*datazone.DeleteSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionTarget indicates an expected call of DeleteSubscriptionTarget
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionTarget", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionTarget), arg0)
}

// DeleteSubscriptionTargetRequest mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionTargetRequest(arg0 *datazone.DeleteSubscriptionTargetInput) (*request.Request, *datazone.DeleteSubscriptionTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteSubscriptionTargetOutput)
	return ret0, ret1
}

// DeleteSubscriptionTargetRequest indicates an expected call of DeleteSubscriptionTargetRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionTargetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionTargetRequest), arg0)
}

// DeleteSubscriptionTargetWithContext mocks base method
func (m *MockDataZoneAPI) DeleteSubscriptionTargetWithContext(arg0 context.Context, arg1 *datazone.DeleteSubscriptionTargetInput, arg2 ...request.Option) (*datazone.DeleteSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscriptionTargetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscriptionTargetWithContext indicates an expected call of DeleteSubscriptionTargetWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteSubscriptionTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionTargetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteSubscriptionTargetWithContext), varargs...)
}

// DeleteTimeSeriesDataPoints mocks base method
func (m *MockDataZoneAPI) DeleteTimeSeriesDataPoints(arg0 *datazone.DeleteTimeSeriesDataPointsInput) (*datazone.DeleteTimeSeriesDataPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeSeriesDataPoints", arg0)
	ret0, _ := ret[0].(*datazone.DeleteTimeSeriesDataPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimeSeriesDataPoints indicates an expected call of DeleteTimeSeriesDataPoints
func (mr *MockDataZoneAPIMockRecorder) DeleteTimeSeriesDataPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeSeriesDataPoints", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteTimeSeriesDataPoints), arg0)
}

// DeleteTimeSeriesDataPointsRequest mocks base method
func (m *MockDataZoneAPI) DeleteTimeSeriesDataPointsRequest(arg0 *datazone.DeleteTimeSeriesDataPointsInput) (*request.Request, *datazone.DeleteTimeSeriesDataPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeSeriesDataPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DeleteTimeSeriesDataPointsOutput)
	return ret0, ret1
}

// DeleteTimeSeriesDataPointsRequest indicates an expected call of DeleteTimeSeriesDataPointsRequest
func (mr *MockDataZoneAPIMockRecorder) DeleteTimeSeriesDataPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeSeriesDataPointsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteTimeSeriesDataPointsRequest), arg0)
}

// DeleteTimeSeriesDataPointsWithContext mocks base method
func (m *MockDataZoneAPI) DeleteTimeSeriesDataPointsWithContext(arg0 context.Context, arg1 *datazone.DeleteTimeSeriesDataPointsInput, arg2 ...request.Option) (*datazone.DeleteTimeSeriesDataPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTimeSeriesDataPointsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DeleteTimeSeriesDataPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimeSeriesDataPointsWithContext indicates an expected call of DeleteTimeSeriesDataPointsWithContext
func (mr *MockDataZoneAPIMockRecorder) DeleteTimeSeriesDataPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeSeriesDataPointsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DeleteTimeSeriesDataPointsWithContext), varargs...)
}

// DisassociateEnvironmentRole mocks base method
func (m *MockDataZoneAPI) DisassociateEnvironmentRole(arg0 *datazone.DisassociateEnvironmentRoleInput) (*datazone.DisassociateEnvironmentRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateEnvironmentRole", arg0)
	ret0, _ := ret[0].(*datazone.DisassociateEnvironmentRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateEnvironmentRole indicates an expected call of DisassociateEnvironmentRole
func (mr *MockDataZoneAPIMockRecorder) DisassociateEnvironmentRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateEnvironmentRole", reflect.TypeOf((*MockDataZoneAPI)(nil).DisassociateEnvironmentRole), arg0)
}

// DisassociateEnvironmentRoleRequest mocks base method
func (m *MockDataZoneAPI) DisassociateEnvironmentRoleRequest(arg0 *datazone.DisassociateEnvironmentRoleInput) (*request.Request, *datazone.DisassociateEnvironmentRoleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateEnvironmentRoleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.DisassociateEnvironmentRoleOutput)
	return ret0, ret1
}

// DisassociateEnvironmentRoleRequest indicates an expected call of DisassociateEnvironmentRoleRequest
func (mr *MockDataZoneAPIMockRecorder) DisassociateEnvironmentRoleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateEnvironmentRoleRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).DisassociateEnvironmentRoleRequest), arg0)
}

// DisassociateEnvironmentRoleWithContext mocks base method
func (m *MockDataZoneAPI) DisassociateEnvironmentRoleWithContext(arg0 context.Context, arg1 *datazone.DisassociateEnvironmentRoleInput, arg2 ...request.Option) (*datazone.DisassociateEnvironmentRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateEnvironmentRoleWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.DisassociateEnvironmentRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateEnvironmentRoleWithContext indicates an expected call of DisassociateEnvironmentRoleWithContext
func (mr *MockDataZoneAPIMockRecorder) DisassociateEnvironmentRoleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateEnvironmentRoleWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).DisassociateEnvironmentRoleWithContext), varargs...)
}

// GetAsset mocks base method
func (m *MockDataZoneAPI) GetAsset(arg0 *datazone.GetAssetInput) (*datazone.GetAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", arg0)
	ret0, _ := ret[0].(*datazone.GetAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset
func (mr *MockDataZoneAPIMockRecorder) GetAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAsset), arg0)
}

// GetAssetFilter mocks base method
func (m *MockDataZoneAPI) GetAssetFilter(arg0 *datazone.GetAssetFilterInput) (*datazone.GetAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetFilter", arg0)
	ret0, _ := ret[0].(*datazone.GetAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetFilter indicates an expected call of GetAssetFilter
func (mr *MockDataZoneAPIMockRecorder) GetAssetFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetFilter", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetFilter), arg0)
}

// GetAssetFilterRequest mocks base method
func (m *MockDataZoneAPI) GetAssetFilterRequest(arg0 *datazone.GetAssetFilterInput) (*request.Request, *datazone.GetAssetFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetAssetFilterOutput)
	return ret0, ret1
}

// GetAssetFilterRequest indicates an expected call of GetAssetFilterRequest
func (mr *MockDataZoneAPIMockRecorder) GetAssetFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetFilterRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetFilterRequest), arg0)
}

// GetAssetFilterWithContext mocks base method
func (m *MockDataZoneAPI) GetAssetFilterWithContext(arg0 context.Context, arg1 *datazone.GetAssetFilterInput, arg2 ...request.Option) (*datazone.GetAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetFilterWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetFilterWithContext indicates an expected call of GetAssetFilterWithContext
func (mr *MockDataZoneAPIMockRecorder) GetAssetFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetFilterWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetFilterWithContext), varargs...)
}

// GetAssetRequest mocks base method
func (m *MockDataZoneAPI) GetAssetRequest(arg0 *datazone.GetAssetInput) (*request.Request, *datazone.GetAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetAssetOutput)
	return ret0, ret1
}

// GetAssetRequest indicates an expected call of GetAssetRequest
func (mr *MockDataZoneAPIMockRecorder) GetAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetRequest), arg0)
}

// GetAssetType mocks base method
func (m *MockDataZoneAPI) GetAssetType(arg0 *datazone.GetAssetTypeInput) (*datazone.GetAssetTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetType", arg0)
	ret0, _ := ret[0].(*datazone.GetAssetTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetType indicates an expected call of GetAssetType
func (mr *MockDataZoneAPIMockRecorder) GetAssetType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetType", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetType), arg0)
}

// GetAssetTypeRequest mocks base method
func (m *MockDataZoneAPI) GetAssetTypeRequest(arg0 *datazone.GetAssetTypeInput) (*request.Request, *datazone.GetAssetTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetAssetTypeOutput)
	return ret0, ret1
}

// GetAssetTypeRequest indicates an expected call of GetAssetTypeRequest
func (mr *MockDataZoneAPIMockRecorder) GetAssetTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetTypeRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetTypeRequest), arg0)
}

// GetAssetTypeWithContext mocks base method
func (m *MockDataZoneAPI) GetAssetTypeWithContext(arg0 context.Context, arg1 *datazone.GetAssetTypeInput, arg2 ...request.Option) (*datazone.GetAssetTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetTypeWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetAssetTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetTypeWithContext indicates an expected call of GetAssetTypeWithContext
func (mr *MockDataZoneAPIMockRecorder) GetAssetTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetTypeWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetTypeWithContext), varargs...)
}

// GetAssetWithContext mocks base method
func (m *MockDataZoneAPI) GetAssetWithContext(arg0 context.Context, arg1 *datazone.GetAssetInput, arg2 ...request.Option) (*datazone.GetAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetWithContext indicates an expected call of GetAssetWithContext
func (mr *MockDataZoneAPIMockRecorder) GetAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetAssetWithContext), varargs...)
}

// GetDataSource mocks base method
func (m *MockDataZoneAPI) GetDataSource(arg0 *datazone.GetDataSourceInput) (*datazone.GetDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSource", arg0)
	ret0, _ := ret[0].(*datazone.GetDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSource indicates an expected call of GetDataSource
func (mr *MockDataZoneAPIMockRecorder) GetDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSource", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDataSource), arg0)
}

// GetDataSourceRequest mocks base method
func (m *MockDataZoneAPI) GetDataSourceRequest(arg0 *datazone.GetDataSourceInput) (*request.Request, *datazone.GetDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetDataSourceOutput)
	return ret0, ret1
}

// GetDataSourceRequest indicates an expected call of GetDataSourceRequest
func (mr *MockDataZoneAPIMockRecorder) GetDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDataSourceRequest), arg0)
}

// GetDataSourceRun mocks base method
func (m *MockDataZoneAPI) GetDataSourceRun(arg0 *datazone.GetDataSourceRunInput) (*datazone.GetDataSourceRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceRun", arg0)
	ret0, _ := ret[0].(*datazone.GetDataSourceRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceRun indicates an expected call of GetDataSourceRun
func (mr *MockDataZoneAPIMockRecorder) GetDataSourceRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceRun", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDataSourceRun), arg0)
}

// GetDataSourceRunRequest mocks base method
func (m *MockDataZoneAPI) GetDataSourceRunRequest(arg0 *datazone.GetDataSourceRunInput) (*request.Request, *datazone.GetDataSourceRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetDataSourceRunOutput)
	return ret0, ret1
}

// GetDataSourceRunRequest indicates an expected call of GetDataSourceRunRequest
func (mr *MockDataZoneAPIMockRecorder) GetDataSourceRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceRunRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDataSourceRunRequest), arg0)
}

// GetDataSourceRunWithContext mocks base method
func (m *MockDataZoneAPI) GetDataSourceRunWithContext(arg0 context.Context, arg1 *datazone.GetDataSourceRunInput, arg2 ...request.Option) (*datazone.GetDataSourceRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataSourceRunWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetDataSourceRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceRunWithContext indicates an expected call of GetDataSourceRunWithContext
func (mr *MockDataZoneAPIMockRecorder) GetDataSourceRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceRunWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDataSourceRunWithContext), varargs...)
}

// GetDataSourceWithContext mocks base method
func (m *MockDataZoneAPI) GetDataSourceWithContext(arg0 context.Context, arg1 *datazone.GetDataSourceInput, arg2 ...request.Option) (*datazone.GetDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceWithContext indicates an expected call of GetDataSourceWithContext
func (mr *MockDataZoneAPIMockRecorder) GetDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDataSourceWithContext), varargs...)
}

// GetDomain mocks base method
func (m *MockDataZoneAPI) GetDomain(arg0 *datazone.GetDomainInput) (*datazone.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0)
	ret0, _ := ret[0].(*datazone.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain
func (mr *MockDataZoneAPIMockRecorder) GetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDomain), arg0)
}

// GetDomainRequest mocks base method
func (m *MockDataZoneAPI) GetDomainRequest(arg0 *datazone.GetDomainInput) (*request.Request, *datazone.GetDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetDomainOutput)
	return ret0, ret1
}

// GetDomainRequest indicates an expected call of GetDomainRequest
func (mr *MockDataZoneAPIMockRecorder) GetDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDomainRequest), arg0)
}

// GetDomainWithContext mocks base method
func (m *MockDataZoneAPI) GetDomainWithContext(arg0 context.Context, arg1 *datazone.GetDomainInput, arg2 ...request.Option) (*datazone.GetDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainWithContext indicates an expected call of GetDomainWithContext
func (mr *MockDataZoneAPIMockRecorder) GetDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetDomainWithContext), varargs...)
}

// GetEnvironment mocks base method
func (m *MockDataZoneAPI) GetEnvironment(arg0 *datazone.GetEnvironmentInput) (*datazone.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*datazone.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockDataZoneAPIMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironment), arg0)
}

// GetEnvironmentAction mocks base method
func (m *MockDataZoneAPI) GetEnvironmentAction(arg0 *datazone.GetEnvironmentActionInput) (*datazone.GetEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentAction", arg0)
	ret0, _ := ret[0].(*datazone.GetEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentAction indicates an expected call of GetEnvironmentAction
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentAction", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentAction), arg0)
}

// GetEnvironmentActionRequest mocks base method
func (m *MockDataZoneAPI) GetEnvironmentActionRequest(arg0 *datazone.GetEnvironmentActionInput) (*request.Request, *datazone.GetEnvironmentActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetEnvironmentActionOutput)
	return ret0, ret1
}

// GetEnvironmentActionRequest indicates an expected call of GetEnvironmentActionRequest
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentActionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentActionRequest), arg0)
}

// GetEnvironmentActionWithContext mocks base method
func (m *MockDataZoneAPI) GetEnvironmentActionWithContext(arg0 context.Context, arg1 *datazone.GetEnvironmentActionInput, arg2 ...request.Option) (*datazone.GetEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentActionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentActionWithContext indicates an expected call of GetEnvironmentActionWithContext
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentActionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentActionWithContext), varargs...)
}

// GetEnvironmentBlueprint mocks base method
func (m *MockDataZoneAPI) GetEnvironmentBlueprint(arg0 *datazone.GetEnvironmentBlueprintInput) (*datazone.GetEnvironmentBlueprintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentBlueprint", arg0)
	ret0, _ := ret[0].(*datazone.GetEnvironmentBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentBlueprint indicates an expected call of GetEnvironmentBlueprint
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentBlueprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentBlueprint", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentBlueprint), arg0)
}

// GetEnvironmentBlueprintConfiguration mocks base method
func (m *MockDataZoneAPI) GetEnvironmentBlueprintConfiguration(arg0 *datazone.GetEnvironmentBlueprintConfigurationInput) (*datazone.GetEnvironmentBlueprintConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentBlueprintConfiguration", arg0)
	ret0, _ := ret[0].(*datazone.GetEnvironmentBlueprintConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentBlueprintConfiguration indicates an expected call of GetEnvironmentBlueprintConfiguration
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentBlueprintConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentBlueprintConfiguration", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentBlueprintConfiguration), arg0)
}

// GetEnvironmentBlueprintConfigurationRequest mocks base method
func (m *MockDataZoneAPI) GetEnvironmentBlueprintConfigurationRequest(arg0 *datazone.GetEnvironmentBlueprintConfigurationInput) (*request.Request, *datazone.GetEnvironmentBlueprintConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentBlueprintConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetEnvironmentBlueprintConfigurationOutput)
	return ret0, ret1
}

// GetEnvironmentBlueprintConfigurationRequest indicates an expected call of GetEnvironmentBlueprintConfigurationRequest
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentBlueprintConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentBlueprintConfigurationRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentBlueprintConfigurationRequest), arg0)
}

// GetEnvironmentBlueprintConfigurationWithContext mocks base method
func (m *MockDataZoneAPI) GetEnvironmentBlueprintConfigurationWithContext(arg0 context.Context, arg1 *datazone.GetEnvironmentBlueprintConfigurationInput, arg2 ...request.Option) (*datazone.GetEnvironmentBlueprintConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentBlueprintConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetEnvironmentBlueprintConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentBlueprintConfigurationWithContext indicates an expected call of GetEnvironmentBlueprintConfigurationWithContext
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentBlueprintConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentBlueprintConfigurationWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentBlueprintConfigurationWithContext), varargs...)
}

// GetEnvironmentBlueprintRequest mocks base method
func (m *MockDataZoneAPI) GetEnvironmentBlueprintRequest(arg0 *datazone.GetEnvironmentBlueprintInput) (*request.Request, *datazone.GetEnvironmentBlueprintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentBlueprintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetEnvironmentBlueprintOutput)
	return ret0, ret1
}

// GetEnvironmentBlueprintRequest indicates an expected call of GetEnvironmentBlueprintRequest
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentBlueprintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentBlueprintRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentBlueprintRequest), arg0)
}

// GetEnvironmentBlueprintWithContext mocks base method
func (m *MockDataZoneAPI) GetEnvironmentBlueprintWithContext(arg0 context.Context, arg1 *datazone.GetEnvironmentBlueprintInput, arg2 ...request.Option) (*datazone.GetEnvironmentBlueprintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentBlueprintWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetEnvironmentBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentBlueprintWithContext indicates an expected call of GetEnvironmentBlueprintWithContext
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentBlueprintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentBlueprintWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentBlueprintWithContext), varargs...)
}

// GetEnvironmentProfile mocks base method
func (m *MockDataZoneAPI) GetEnvironmentProfile(arg0 *datazone.GetEnvironmentProfileInput) (*datazone.GetEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentProfile", arg0)
	ret0, _ := ret[0].(*datazone.GetEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentProfile indicates an expected call of GetEnvironmentProfile
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentProfile), arg0)
}

// GetEnvironmentProfileRequest mocks base method
func (m *MockDataZoneAPI) GetEnvironmentProfileRequest(arg0 *datazone.GetEnvironmentProfileInput) (*request.Request, *datazone.GetEnvironmentProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetEnvironmentProfileOutput)
	return ret0, ret1
}

// GetEnvironmentProfileRequest indicates an expected call of GetEnvironmentProfileRequest
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentProfileRequest), arg0)
}

// GetEnvironmentProfileWithContext mocks base method
func (m *MockDataZoneAPI) GetEnvironmentProfileWithContext(arg0 context.Context, arg1 *datazone.GetEnvironmentProfileInput, arg2 ...request.Option) (*datazone.GetEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentProfileWithContext indicates an expected call of GetEnvironmentProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentProfileWithContext), varargs...)
}

// GetEnvironmentRequest mocks base method
func (m *MockDataZoneAPI) GetEnvironmentRequest(arg0 *datazone.GetEnvironmentInput) (*request.Request, *datazone.GetEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetEnvironmentOutput)
	return ret0, ret1
}

// GetEnvironmentRequest indicates an expected call of GetEnvironmentRequest
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentRequest), arg0)
}

// GetEnvironmentWithContext mocks base method
func (m *MockDataZoneAPI) GetEnvironmentWithContext(arg0 context.Context, arg1 *datazone.GetEnvironmentInput, arg2 ...request.Option) (*datazone.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentWithContext indicates an expected call of GetEnvironmentWithContext
func (mr *MockDataZoneAPIMockRecorder) GetEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetEnvironmentWithContext), varargs...)
}

// GetFormType mocks base method
func (m *MockDataZoneAPI) GetFormType(arg0 *datazone.GetFormTypeInput) (*datazone.GetFormTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormType", arg0)
	ret0, _ := ret[0].(*datazone.GetFormTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormType indicates an expected call of GetFormType
func (mr *MockDataZoneAPIMockRecorder) GetFormType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormType", reflect.TypeOf((*MockDataZoneAPI)(nil).GetFormType), arg0)
}

// GetFormTypeRequest mocks base method
func (m *MockDataZoneAPI) GetFormTypeRequest(arg0 *datazone.GetFormTypeInput) (*request.Request, *datazone.GetFormTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetFormTypeOutput)
	return ret0, ret1
}

// GetFormTypeRequest indicates an expected call of GetFormTypeRequest
func (mr *MockDataZoneAPIMockRecorder) GetFormTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormTypeRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetFormTypeRequest), arg0)
}

// GetFormTypeWithContext mocks base method
func (m *MockDataZoneAPI) GetFormTypeWithContext(arg0 context.Context, arg1 *datazone.GetFormTypeInput, arg2 ...request.Option) (*datazone.GetFormTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFormTypeWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetFormTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormTypeWithContext indicates an expected call of GetFormTypeWithContext
func (mr *MockDataZoneAPIMockRecorder) GetFormTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormTypeWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetFormTypeWithContext), varargs...)
}

// GetGlossary mocks base method
func (m *MockDataZoneAPI) GetGlossary(arg0 *datazone.GetGlossaryInput) (*datazone.GetGlossaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlossary", arg0)
	ret0, _ := ret[0].(*datazone.GetGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlossary indicates an expected call of GetGlossary
func (mr *MockDataZoneAPIMockRecorder) GetGlossary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlossary", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGlossary), arg0)
}

// GetGlossaryRequest mocks base method
func (m *MockDataZoneAPI) GetGlossaryRequest(arg0 *datazone.GetGlossaryInput) (*request.Request, *datazone.GetGlossaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlossaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetGlossaryOutput)
	return ret0, ret1
}

// GetGlossaryRequest indicates an expected call of GetGlossaryRequest
func (mr *MockDataZoneAPIMockRecorder) GetGlossaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlossaryRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGlossaryRequest), arg0)
}

// GetGlossaryTerm mocks base method
func (m *MockDataZoneAPI) GetGlossaryTerm(arg0 *datazone.GetGlossaryTermInput) (*datazone.GetGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlossaryTerm", arg0)
	ret0, _ := ret[0].(*datazone.GetGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlossaryTerm indicates an expected call of GetGlossaryTerm
func (mr *MockDataZoneAPIMockRecorder) GetGlossaryTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlossaryTerm", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGlossaryTerm), arg0)
}

// GetGlossaryTermRequest mocks base method
func (m *MockDataZoneAPI) GetGlossaryTermRequest(arg0 *datazone.GetGlossaryTermInput) (*request.Request, *datazone.GetGlossaryTermOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlossaryTermRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetGlossaryTermOutput)
	return ret0, ret1
}

// GetGlossaryTermRequest indicates an expected call of GetGlossaryTermRequest
func (mr *MockDataZoneAPIMockRecorder) GetGlossaryTermRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlossaryTermRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGlossaryTermRequest), arg0)
}

// GetGlossaryTermWithContext mocks base method
func (m *MockDataZoneAPI) GetGlossaryTermWithContext(arg0 context.Context, arg1 *datazone.GetGlossaryTermInput, arg2 ...request.Option) (*datazone.GetGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlossaryTermWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlossaryTermWithContext indicates an expected call of GetGlossaryTermWithContext
func (mr *MockDataZoneAPIMockRecorder) GetGlossaryTermWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlossaryTermWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGlossaryTermWithContext), varargs...)
}

// GetGlossaryWithContext mocks base method
func (m *MockDataZoneAPI) GetGlossaryWithContext(arg0 context.Context, arg1 *datazone.GetGlossaryInput, arg2 ...request.Option) (*datazone.GetGlossaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlossaryWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlossaryWithContext indicates an expected call of GetGlossaryWithContext
func (mr *MockDataZoneAPIMockRecorder) GetGlossaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlossaryWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGlossaryWithContext), varargs...)
}

// GetGroupProfile mocks base method
func (m *MockDataZoneAPI) GetGroupProfile(arg0 *datazone.GetGroupProfileInput) (*datazone.GetGroupProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupProfile", arg0)
	ret0, _ := ret[0].(*datazone.GetGroupProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupProfile indicates an expected call of GetGroupProfile
func (mr *MockDataZoneAPIMockRecorder) GetGroupProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGroupProfile), arg0)
}

// GetGroupProfileRequest mocks base method
func (m *MockDataZoneAPI) GetGroupProfileRequest(arg0 *datazone.GetGroupProfileInput) (*request.Request, *datazone.GetGroupProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetGroupProfileOutput)
	return ret0, ret1
}

// GetGroupProfileRequest indicates an expected call of GetGroupProfileRequest
func (mr *MockDataZoneAPIMockRecorder) GetGroupProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGroupProfileRequest), arg0)
}

// GetGroupProfileWithContext mocks base method
func (m *MockDataZoneAPI) GetGroupProfileWithContext(arg0 context.Context, arg1 *datazone.GetGroupProfileInput, arg2 ...request.Option) (*datazone.GetGroupProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetGroupProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupProfileWithContext indicates an expected call of GetGroupProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) GetGroupProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetGroupProfileWithContext), varargs...)
}

// GetIamPortalLoginUrl mocks base method
func (m *MockDataZoneAPI) GetIamPortalLoginUrl(arg0 *datazone.GetIamPortalLoginUrlInput) (*datazone.GetIamPortalLoginUrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIamPortalLoginUrl", arg0)
	ret0, _ := ret[0].(*datazone.GetIamPortalLoginUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIamPortalLoginUrl indicates an expected call of GetIamPortalLoginUrl
func (mr *MockDataZoneAPIMockRecorder) GetIamPortalLoginUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIamPortalLoginUrl", reflect.TypeOf((*MockDataZoneAPI)(nil).GetIamPortalLoginUrl), arg0)
}

// GetIamPortalLoginUrlRequest mocks base method
func (m *MockDataZoneAPI) GetIamPortalLoginUrlRequest(arg0 *datazone.GetIamPortalLoginUrlInput) (*request.Request, *datazone.GetIamPortalLoginUrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIamPortalLoginUrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetIamPortalLoginUrlOutput)
	return ret0, ret1
}

// GetIamPortalLoginUrlRequest indicates an expected call of GetIamPortalLoginUrlRequest
func (mr *MockDataZoneAPIMockRecorder) GetIamPortalLoginUrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIamPortalLoginUrlRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetIamPortalLoginUrlRequest), arg0)
}

// GetIamPortalLoginUrlWithContext mocks base method
func (m *MockDataZoneAPI) GetIamPortalLoginUrlWithContext(arg0 context.Context, arg1 *datazone.GetIamPortalLoginUrlInput, arg2 ...request.Option) (*datazone.GetIamPortalLoginUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIamPortalLoginUrlWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetIamPortalLoginUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIamPortalLoginUrlWithContext indicates an expected call of GetIamPortalLoginUrlWithContext
func (mr *MockDataZoneAPIMockRecorder) GetIamPortalLoginUrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIamPortalLoginUrlWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetIamPortalLoginUrlWithContext), varargs...)
}

// GetLineageNode mocks base method
func (m *MockDataZoneAPI) GetLineageNode(arg0 *datazone.GetLineageNodeInput) (*datazone.GetLineageNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineageNode", arg0)
	ret0, _ := ret[0].(*datazone.GetLineageNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineageNode indicates an expected call of GetLineageNode
func (mr *MockDataZoneAPIMockRecorder) GetLineageNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineageNode", reflect.TypeOf((*MockDataZoneAPI)(nil).GetLineageNode), arg0)
}

// GetLineageNodeRequest mocks base method
func (m *MockDataZoneAPI) GetLineageNodeRequest(arg0 *datazone.GetLineageNodeInput) (*request.Request, *datazone.GetLineageNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineageNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetLineageNodeOutput)
	return ret0, ret1
}

// GetLineageNodeRequest indicates an expected call of GetLineageNodeRequest
func (mr *MockDataZoneAPIMockRecorder) GetLineageNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineageNodeRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetLineageNodeRequest), arg0)
}

// GetLineageNodeWithContext mocks base method
func (m *MockDataZoneAPI) GetLineageNodeWithContext(arg0 context.Context, arg1 *datazone.GetLineageNodeInput, arg2 ...request.Option) (*datazone.GetLineageNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLineageNodeWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetLineageNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineageNodeWithContext indicates an expected call of GetLineageNodeWithContext
func (mr *MockDataZoneAPIMockRecorder) GetLineageNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineageNodeWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetLineageNodeWithContext), varargs...)
}

// GetListing mocks base method
func (m *MockDataZoneAPI) GetListing(arg0 *datazone.GetListingInput) (*datazone.GetListingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListing", arg0)
	ret0, _ := ret[0].(*datazone.GetListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListing indicates an expected call of GetListing
func (mr *MockDataZoneAPIMockRecorder) GetListing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListing", reflect.TypeOf((*MockDataZoneAPI)(nil).GetListing), arg0)
}

// GetListingRequest mocks base method
func (m *MockDataZoneAPI) GetListingRequest(arg0 *datazone.GetListingInput) (*request.Request, *datazone.GetListingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetListingOutput)
	return ret0, ret1
}

// GetListingRequest indicates an expected call of GetListingRequest
func (mr *MockDataZoneAPIMockRecorder) GetListingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListingRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetListingRequest), arg0)
}

// GetListingWithContext mocks base method
func (m *MockDataZoneAPI) GetListingWithContext(arg0 context.Context, arg1 *datazone.GetListingInput, arg2 ...request.Option) (*datazone.GetListingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListingWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListingWithContext indicates an expected call of GetListingWithContext
func (mr *MockDataZoneAPIMockRecorder) GetListingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListingWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetListingWithContext), varargs...)
}

// GetMetadataGenerationRun mocks base method
func (m *MockDataZoneAPI) GetMetadataGenerationRun(arg0 *datazone.GetMetadataGenerationRunInput) (*datazone.GetMetadataGenerationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataGenerationRun", arg0)
	ret0, _ := ret[0].(*datazone.GetMetadataGenerationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataGenerationRun indicates an expected call of GetMetadataGenerationRun
func (mr *MockDataZoneAPIMockRecorder) GetMetadataGenerationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataGenerationRun", reflect.TypeOf((*MockDataZoneAPI)(nil).GetMetadataGenerationRun), arg0)
}

// GetMetadataGenerationRunRequest mocks base method
func (m *MockDataZoneAPI) GetMetadataGenerationRunRequest(arg0 *datazone.GetMetadataGenerationRunInput) (*request.Request, *datazone.GetMetadataGenerationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataGenerationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetMetadataGenerationRunOutput)
	return ret0, ret1
}

// GetMetadataGenerationRunRequest indicates an expected call of GetMetadataGenerationRunRequest
func (mr *MockDataZoneAPIMockRecorder) GetMetadataGenerationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataGenerationRunRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetMetadataGenerationRunRequest), arg0)
}

// GetMetadataGenerationRunWithContext mocks base method
func (m *MockDataZoneAPI) GetMetadataGenerationRunWithContext(arg0 context.Context, arg1 *datazone.GetMetadataGenerationRunInput, arg2 ...request.Option) (*datazone.GetMetadataGenerationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetadataGenerationRunWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetMetadataGenerationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataGenerationRunWithContext indicates an expected call of GetMetadataGenerationRunWithContext
func (mr *MockDataZoneAPIMockRecorder) GetMetadataGenerationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataGenerationRunWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetMetadataGenerationRunWithContext), varargs...)
}

// GetProject mocks base method
func (m *MockDataZoneAPI) GetProject(arg0 *datazone.GetProjectInput) (*datazone.GetProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0)
	ret0, _ := ret[0].(*datazone.GetProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockDataZoneAPIMockRecorder) GetProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockDataZoneAPI)(nil).GetProject), arg0)
}

// GetProjectRequest mocks base method
func (m *MockDataZoneAPI) GetProjectRequest(arg0 *datazone.GetProjectInput) (*request.Request, *datazone.GetProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetProjectOutput)
	return ret0, ret1
}

// GetProjectRequest indicates an expected call of GetProjectRequest
func (mr *MockDataZoneAPIMockRecorder) GetProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetProjectRequest), arg0)
}

// GetProjectWithContext mocks base method
func (m *MockDataZoneAPI) GetProjectWithContext(arg0 context.Context, arg1 *datazone.GetProjectInput, arg2 ...request.Option) (*datazone.GetProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectWithContext indicates an expected call of GetProjectWithContext
func (mr *MockDataZoneAPIMockRecorder) GetProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetProjectWithContext), varargs...)
}

// GetSubscription mocks base method
func (m *MockDataZoneAPI) GetSubscription(arg0 *datazone.GetSubscriptionInput) (*datazone.GetSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", arg0)
	ret0, _ := ret[0].(*datazone.GetSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription
func (mr *MockDataZoneAPIMockRecorder) GetSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscription), arg0)
}

// GetSubscriptionGrant mocks base method
func (m *MockDataZoneAPI) GetSubscriptionGrant(arg0 *datazone.GetSubscriptionGrantInput) (*datazone.GetSubscriptionGrantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionGrant", arg0)
	ret0, _ := ret[0].(*datazone.GetSubscriptionGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionGrant indicates an expected call of GetSubscriptionGrant
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionGrant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionGrant", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionGrant), arg0)
}

// GetSubscriptionGrantRequest mocks base method
func (m *MockDataZoneAPI) GetSubscriptionGrantRequest(arg0 *datazone.GetSubscriptionGrantInput) (*request.Request, *datazone.GetSubscriptionGrantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionGrantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetSubscriptionGrantOutput)
	return ret0, ret1
}

// GetSubscriptionGrantRequest indicates an expected call of GetSubscriptionGrantRequest
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionGrantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionGrantRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionGrantRequest), arg0)
}

// GetSubscriptionGrantWithContext mocks base method
func (m *MockDataZoneAPI) GetSubscriptionGrantWithContext(arg0 context.Context, arg1 *datazone.GetSubscriptionGrantInput, arg2 ...request.Option) (*datazone.GetSubscriptionGrantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionGrantWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetSubscriptionGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionGrantWithContext indicates an expected call of GetSubscriptionGrantWithContext
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionGrantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionGrantWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionGrantWithContext), varargs...)
}

// GetSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) GetSubscriptionRequest(arg0 *datazone.GetSubscriptionInput) (*request.Request, *datazone.GetSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetSubscriptionOutput)
	return ret0, ret1
}

// GetSubscriptionRequest indicates an expected call of GetSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionRequest), arg0)
}

// GetSubscriptionRequestDetails mocks base method
func (m *MockDataZoneAPI) GetSubscriptionRequestDetails(arg0 *datazone.GetSubscriptionRequestDetailsInput) (*datazone.GetSubscriptionRequestDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionRequestDetails", arg0)
	ret0, _ := ret[0].(*datazone.GetSubscriptionRequestDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionRequestDetails indicates an expected call of GetSubscriptionRequestDetails
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionRequestDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionRequestDetails", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionRequestDetails), arg0)
}

// GetSubscriptionRequestDetailsRequest mocks base method
func (m *MockDataZoneAPI) GetSubscriptionRequestDetailsRequest(arg0 *datazone.GetSubscriptionRequestDetailsInput) (*request.Request, *datazone.GetSubscriptionRequestDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionRequestDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetSubscriptionRequestDetailsOutput)
	return ret0, ret1
}

// GetSubscriptionRequestDetailsRequest indicates an expected call of GetSubscriptionRequestDetailsRequest
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionRequestDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionRequestDetailsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionRequestDetailsRequest), arg0)
}

// GetSubscriptionRequestDetailsWithContext mocks base method
func (m *MockDataZoneAPI) GetSubscriptionRequestDetailsWithContext(arg0 context.Context, arg1 *datazone.GetSubscriptionRequestDetailsInput, arg2 ...request.Option) (*datazone.GetSubscriptionRequestDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionRequestDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetSubscriptionRequestDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionRequestDetailsWithContext indicates an expected call of GetSubscriptionRequestDetailsWithContext
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionRequestDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionRequestDetailsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionRequestDetailsWithContext), varargs...)
}

// GetSubscriptionTarget mocks base method
func (m *MockDataZoneAPI) GetSubscriptionTarget(arg0 *datazone.GetSubscriptionTargetInput) (*datazone.GetSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionTarget", arg0)
	ret0, _ := ret[0].(*datazone.GetSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionTarget indicates an expected call of GetSubscriptionTarget
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionTarget", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionTarget), arg0)
}

// GetSubscriptionTargetRequest mocks base method
func (m *MockDataZoneAPI) GetSubscriptionTargetRequest(arg0 *datazone.GetSubscriptionTargetInput) (*request.Request, *datazone.GetSubscriptionTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetSubscriptionTargetOutput)
	return ret0, ret1
}

// GetSubscriptionTargetRequest indicates an expected call of GetSubscriptionTargetRequest
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionTargetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionTargetRequest), arg0)
}

// GetSubscriptionTargetWithContext mocks base method
func (m *MockDataZoneAPI) GetSubscriptionTargetWithContext(arg0 context.Context, arg1 *datazone.GetSubscriptionTargetInput, arg2 ...request.Option) (*datazone.GetSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionTargetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionTargetWithContext indicates an expected call of GetSubscriptionTargetWithContext
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionTargetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionTargetWithContext), varargs...)
}

// GetSubscriptionWithContext mocks base method
func (m *MockDataZoneAPI) GetSubscriptionWithContext(arg0 context.Context, arg1 *datazone.GetSubscriptionInput, arg2 ...request.Option) (*datazone.GetSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionWithContext indicates an expected call of GetSubscriptionWithContext
func (mr *MockDataZoneAPIMockRecorder) GetSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetSubscriptionWithContext), varargs...)
}

// GetTimeSeriesDataPoint mocks base method
func (m *MockDataZoneAPI) GetTimeSeriesDataPoint(arg0 *datazone.GetTimeSeriesDataPointInput) (*datazone.GetTimeSeriesDataPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeriesDataPoint", arg0)
	ret0, _ := ret[0].(*datazone.GetTimeSeriesDataPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSeriesDataPoint indicates an expected call of GetTimeSeriesDataPoint
func (mr *MockDataZoneAPIMockRecorder) GetTimeSeriesDataPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesDataPoint", reflect.TypeOf((*MockDataZoneAPI)(nil).GetTimeSeriesDataPoint), arg0)
}

// GetTimeSeriesDataPointRequest mocks base method
func (m *MockDataZoneAPI) GetTimeSeriesDataPointRequest(arg0 *datazone.GetTimeSeriesDataPointInput) (*request.Request, *datazone.GetTimeSeriesDataPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeriesDataPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetTimeSeriesDataPointOutput)
	return ret0, ret1
}

// GetTimeSeriesDataPointRequest indicates an expected call of GetTimeSeriesDataPointRequest
func (mr *MockDataZoneAPIMockRecorder) GetTimeSeriesDataPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesDataPointRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetTimeSeriesDataPointRequest), arg0)
}

// GetTimeSeriesDataPointWithContext mocks base method
func (m *MockDataZoneAPI) GetTimeSeriesDataPointWithContext(arg0 context.Context, arg1 *datazone.GetTimeSeriesDataPointInput, arg2 ...request.Option) (*datazone.GetTimeSeriesDataPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeSeriesDataPointWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetTimeSeriesDataPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSeriesDataPointWithContext indicates an expected call of GetTimeSeriesDataPointWithContext
func (mr *MockDataZoneAPIMockRecorder) GetTimeSeriesDataPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesDataPointWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetTimeSeriesDataPointWithContext), varargs...)
}

// GetUserProfile mocks base method
func (m *MockDataZoneAPI) GetUserProfile(arg0 *datazone.GetUserProfileInput) (*datazone.GetUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0)
	ret0, _ := ret[0].(*datazone.GetUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile
func (mr *MockDataZoneAPIMockRecorder) GetUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).GetUserProfile), arg0)
}

// GetUserProfileRequest mocks base method
func (m *MockDataZoneAPI) GetUserProfileRequest(arg0 *datazone.GetUserProfileInput) (*request.Request, *datazone.GetUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.GetUserProfileOutput)
	return ret0, ret1
}

// GetUserProfileRequest indicates an expected call of GetUserProfileRequest
func (mr *MockDataZoneAPIMockRecorder) GetUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).GetUserProfileRequest), arg0)
}

// GetUserProfileWithContext mocks base method
func (m *MockDataZoneAPI) GetUserProfileWithContext(arg0 context.Context, arg1 *datazone.GetUserProfileInput, arg2 ...request.Option) (*datazone.GetUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.GetUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileWithContext indicates an expected call of GetUserProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) GetUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).GetUserProfileWithContext), varargs...)
}

// ListAssetFilters mocks base method
func (m *MockDataZoneAPI) ListAssetFilters(arg0 *datazone.ListAssetFiltersInput) (*datazone.ListAssetFiltersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetFilters", arg0)
	ret0, _ := ret[0].(*datazone.ListAssetFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetFilters indicates an expected call of ListAssetFilters
func (mr *MockDataZoneAPIMockRecorder) ListAssetFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetFilters", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetFilters), arg0)
}

// ListAssetFiltersPages mocks base method
func (m *MockDataZoneAPI) ListAssetFiltersPages(arg0 *datazone.ListAssetFiltersInput, arg1 func(*datazone.ListAssetFiltersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetFiltersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetFiltersPages indicates an expected call of ListAssetFiltersPages
func (mr *MockDataZoneAPIMockRecorder) ListAssetFiltersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetFiltersPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetFiltersPages), arg0, arg1)
}

// ListAssetFiltersPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListAssetFiltersPagesWithContext(arg0 context.Context, arg1 *datazone.ListAssetFiltersInput, arg2 func(*datazone.ListAssetFiltersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetFiltersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetFiltersPagesWithContext indicates an expected call of ListAssetFiltersPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListAssetFiltersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetFiltersPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetFiltersPagesWithContext), varargs...)
}

// ListAssetFiltersRequest mocks base method
func (m *MockDataZoneAPI) ListAssetFiltersRequest(arg0 *datazone.ListAssetFiltersInput) (*request.Request, *datazone.ListAssetFiltersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetFiltersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListAssetFiltersOutput)
	return ret0, ret1
}

// ListAssetFiltersRequest indicates an expected call of ListAssetFiltersRequest
func (mr *MockDataZoneAPIMockRecorder) ListAssetFiltersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetFiltersRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetFiltersRequest), arg0)
}

// ListAssetFiltersWithContext mocks base method
func (m *MockDataZoneAPI) ListAssetFiltersWithContext(arg0 context.Context, arg1 *datazone.ListAssetFiltersInput, arg2 ...request.Option) (*datazone.ListAssetFiltersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetFiltersWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListAssetFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetFiltersWithContext indicates an expected call of ListAssetFiltersWithContext
func (mr *MockDataZoneAPIMockRecorder) ListAssetFiltersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetFiltersWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetFiltersWithContext), varargs...)
}

// ListAssetRevisions mocks base method
func (m *MockDataZoneAPI) ListAssetRevisions(arg0 *datazone.ListAssetRevisionsInput) (*datazone.ListAssetRevisionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetRevisions", arg0)
	ret0, _ := ret[0].(*datazone.ListAssetRevisionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetRevisions indicates an expected call of ListAssetRevisions
func (mr *MockDataZoneAPIMockRecorder) ListAssetRevisions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRevisions", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetRevisions), arg0)
}

// ListAssetRevisionsPages mocks base method
func (m *MockDataZoneAPI) ListAssetRevisionsPages(arg0 *datazone.ListAssetRevisionsInput, arg1 func(*datazone.ListAssetRevisionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetRevisionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetRevisionsPages indicates an expected call of ListAssetRevisionsPages
func (mr *MockDataZoneAPIMockRecorder) ListAssetRevisionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRevisionsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetRevisionsPages), arg0, arg1)
}

// ListAssetRevisionsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListAssetRevisionsPagesWithContext(arg0 context.Context, arg1 *datazone.ListAssetRevisionsInput, arg2 func(*datazone.ListAssetRevisionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetRevisionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetRevisionsPagesWithContext indicates an expected call of ListAssetRevisionsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListAssetRevisionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRevisionsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetRevisionsPagesWithContext), varargs...)
}

// ListAssetRevisionsRequest mocks base method
func (m *MockDataZoneAPI) ListAssetRevisionsRequest(arg0 *datazone.ListAssetRevisionsInput) (*request.Request, *datazone.ListAssetRevisionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetRevisionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListAssetRevisionsOutput)
	return ret0, ret1
}

// ListAssetRevisionsRequest indicates an expected call of ListAssetRevisionsRequest
func (mr *MockDataZoneAPIMockRecorder) ListAssetRevisionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRevisionsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetRevisionsRequest), arg0)
}

// ListAssetRevisionsWithContext mocks base method
func (m *MockDataZoneAPI) ListAssetRevisionsWithContext(arg0 context.Context, arg1 *datazone.ListAssetRevisionsInput, arg2 ...request.Option) (*datazone.ListAssetRevisionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetRevisionsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListAssetRevisionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetRevisionsWithContext indicates an expected call of ListAssetRevisionsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListAssetRevisionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRevisionsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListAssetRevisionsWithContext), varargs...)
}

// ListDataSourceRunActivities mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunActivities(arg0 *datazone.ListDataSourceRunActivitiesInput) (*datazone.ListDataSourceRunActivitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceRunActivities", arg0)
	ret0, _ := ret[0].(*datazone.ListDataSourceRunActivitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourceRunActivities indicates an expected call of ListDataSourceRunActivities
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunActivities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunActivities", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunActivities), arg0)
}

// ListDataSourceRunActivitiesPages mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunActivitiesPages(arg0 *datazone.ListDataSourceRunActivitiesInput, arg1 func(*datazone.ListDataSourceRunActivitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceRunActivitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourceRunActivitiesPages indicates an expected call of ListDataSourceRunActivitiesPages
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunActivitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunActivitiesPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunActivitiesPages), arg0, arg1)
}

// ListDataSourceRunActivitiesPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunActivitiesPagesWithContext(arg0 context.Context, arg1 *datazone.ListDataSourceRunActivitiesInput, arg2 func(*datazone.ListDataSourceRunActivitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourceRunActivitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourceRunActivitiesPagesWithContext indicates an expected call of ListDataSourceRunActivitiesPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunActivitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunActivitiesPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunActivitiesPagesWithContext), varargs...)
}

// ListDataSourceRunActivitiesRequest mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunActivitiesRequest(arg0 *datazone.ListDataSourceRunActivitiesInput) (*request.Request, *datazone.ListDataSourceRunActivitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceRunActivitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListDataSourceRunActivitiesOutput)
	return ret0, ret1
}

// ListDataSourceRunActivitiesRequest indicates an expected call of ListDataSourceRunActivitiesRequest
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunActivitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunActivitiesRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunActivitiesRequest), arg0)
}

// ListDataSourceRunActivitiesWithContext mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunActivitiesWithContext(arg0 context.Context, arg1 *datazone.ListDataSourceRunActivitiesInput, arg2 ...request.Option) (*datazone.ListDataSourceRunActivitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourceRunActivitiesWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListDataSourceRunActivitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourceRunActivitiesWithContext indicates an expected call of ListDataSourceRunActivitiesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunActivitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunActivitiesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunActivitiesWithContext), varargs...)
}

// ListDataSourceRuns mocks base method
func (m *MockDataZoneAPI) ListDataSourceRuns(arg0 *datazone.ListDataSourceRunsInput) (*datazone.ListDataSourceRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceRuns", arg0)
	ret0, _ := ret[0].(*datazone.ListDataSourceRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourceRuns indicates an expected call of ListDataSourceRuns
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRuns", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRuns), arg0)
}

// ListDataSourceRunsPages mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunsPages(arg0 *datazone.ListDataSourceRunsInput, arg1 func(*datazone.ListDataSourceRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourceRunsPages indicates an expected call of ListDataSourceRunsPages
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunsPages), arg0, arg1)
}

// ListDataSourceRunsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunsPagesWithContext(arg0 context.Context, arg1 *datazone.ListDataSourceRunsInput, arg2 func(*datazone.ListDataSourceRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourceRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourceRunsPagesWithContext indicates an expected call of ListDataSourceRunsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunsPagesWithContext), varargs...)
}

// ListDataSourceRunsRequest mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunsRequest(arg0 *datazone.ListDataSourceRunsInput) (*request.Request, *datazone.ListDataSourceRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourceRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListDataSourceRunsOutput)
	return ret0, ret1
}

// ListDataSourceRunsRequest indicates an expected call of ListDataSourceRunsRequest
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunsRequest), arg0)
}

// ListDataSourceRunsWithContext mocks base method
func (m *MockDataZoneAPI) ListDataSourceRunsWithContext(arg0 context.Context, arg1 *datazone.ListDataSourceRunsInput, arg2 ...request.Option) (*datazone.ListDataSourceRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourceRunsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListDataSourceRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourceRunsWithContext indicates an expected call of ListDataSourceRunsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDataSourceRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourceRunsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourceRunsWithContext), varargs...)
}

// ListDataSources mocks base method
func (m *MockDataZoneAPI) ListDataSources(arg0 *datazone.ListDataSourcesInput) (*datazone.ListDataSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSources", arg0)
	ret0, _ := ret[0].(*datazone.ListDataSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSources indicates an expected call of ListDataSources
func (mr *MockDataZoneAPIMockRecorder) ListDataSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSources", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSources), arg0)
}

// ListDataSourcesPages mocks base method
func (m *MockDataZoneAPI) ListDataSourcesPages(arg0 *datazone.ListDataSourcesInput, arg1 func(*datazone.ListDataSourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourcesPages indicates an expected call of ListDataSourcesPages
func (mr *MockDataZoneAPIMockRecorder) ListDataSourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourcesPages), arg0, arg1)
}

// ListDataSourcesPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListDataSourcesPagesWithContext(arg0 context.Context, arg1 *datazone.ListDataSourcesInput, arg2 func(*datazone.ListDataSourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSourcesPagesWithContext indicates an expected call of ListDataSourcesPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDataSourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourcesPagesWithContext), varargs...)
}

// ListDataSourcesRequest mocks base method
func (m *MockDataZoneAPI) ListDataSourcesRequest(arg0 *datazone.ListDataSourcesInput) (*request.Request, *datazone.ListDataSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListDataSourcesOutput)
	return ret0, ret1
}

// ListDataSourcesRequest indicates an expected call of ListDataSourcesRequest
func (mr *MockDataZoneAPIMockRecorder) ListDataSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourcesRequest), arg0)
}

// ListDataSourcesWithContext mocks base method
func (m *MockDataZoneAPI) ListDataSourcesWithContext(arg0 context.Context, arg1 *datazone.ListDataSourcesInput, arg2 ...request.Option) (*datazone.ListDataSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListDataSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSourcesWithContext indicates an expected call of ListDataSourcesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDataSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSourcesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDataSourcesWithContext), varargs...)
}

// ListDomains mocks base method
func (m *MockDataZoneAPI) ListDomains(arg0 *datazone.ListDomainsInput) (*datazone.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].(*datazone.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains
func (mr *MockDataZoneAPIMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDomains), arg0)
}

// ListDomainsPages mocks base method
func (m *MockDataZoneAPI) ListDomainsPages(arg0 *datazone.ListDomainsInput, arg1 func(*datazone.ListDomainsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPages indicates an expected call of ListDomainsPages
func (mr *MockDataZoneAPIMockRecorder) ListDomainsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDomainsPages), arg0, arg1)
}

// ListDomainsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListDomainsPagesWithContext(arg0 context.Context, arg1 *datazone.ListDomainsInput, arg2 func(*datazone.ListDomainsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPagesWithContext indicates an expected call of ListDomainsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDomainsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDomainsPagesWithContext), varargs...)
}

// ListDomainsRequest mocks base method
func (m *MockDataZoneAPI) ListDomainsRequest(arg0 *datazone.ListDomainsInput) (*request.Request, *datazone.ListDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListDomainsOutput)
	return ret0, ret1
}

// ListDomainsRequest indicates an expected call of ListDomainsRequest
func (mr *MockDataZoneAPIMockRecorder) ListDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDomainsRequest), arg0)
}

// ListDomainsWithContext mocks base method
func (m *MockDataZoneAPI) ListDomainsWithContext(arg0 context.Context, arg1 *datazone.ListDomainsInput, arg2 ...request.Option) (*datazone.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsWithContext indicates an expected call of ListDomainsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListDomainsWithContext), varargs...)
}

// ListEnvironmentActions mocks base method
func (m *MockDataZoneAPI) ListEnvironmentActions(arg0 *datazone.ListEnvironmentActionsInput) (*datazone.ListEnvironmentActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentActions", arg0)
	ret0, _ := ret[0].(*datazone.ListEnvironmentActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentActions indicates an expected call of ListEnvironmentActions
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentActions", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentActions), arg0)
}

// ListEnvironmentActionsPages mocks base method
func (m *MockDataZoneAPI) ListEnvironmentActionsPages(arg0 *datazone.ListEnvironmentActionsInput, arg1 func(*datazone.ListEnvironmentActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentActionsPages indicates an expected call of ListEnvironmentActionsPages
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentActionsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentActionsPages), arg0, arg1)
}

// ListEnvironmentActionsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentActionsPagesWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentActionsInput, arg2 func(*datazone.ListEnvironmentActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentActionsPagesWithContext indicates an expected call of ListEnvironmentActionsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentActionsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentActionsPagesWithContext), varargs...)
}

// ListEnvironmentActionsRequest mocks base method
func (m *MockDataZoneAPI) ListEnvironmentActionsRequest(arg0 *datazone.ListEnvironmentActionsInput) (*request.Request, *datazone.ListEnvironmentActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListEnvironmentActionsOutput)
	return ret0, ret1
}

// ListEnvironmentActionsRequest indicates an expected call of ListEnvironmentActionsRequest
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentActionsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentActionsRequest), arg0)
}

// ListEnvironmentActionsWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentActionsWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentActionsInput, arg2 ...request.Option) (*datazone.ListEnvironmentActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentActionsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListEnvironmentActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentActionsWithContext indicates an expected call of ListEnvironmentActionsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentActionsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentActionsWithContext), varargs...)
}

// ListEnvironmentBlueprintConfigurations mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintConfigurations(arg0 *datazone.ListEnvironmentBlueprintConfigurationsInput) (*datazone.ListEnvironmentBlueprintConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintConfigurations", arg0)
	ret0, _ := ret[0].(*datazone.ListEnvironmentBlueprintConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentBlueprintConfigurations indicates an expected call of ListEnvironmentBlueprintConfigurations
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintConfigurations", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintConfigurations), arg0)
}

// ListEnvironmentBlueprintConfigurationsPages mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintConfigurationsPages(arg0 *datazone.ListEnvironmentBlueprintConfigurationsInput, arg1 func(*datazone.ListEnvironmentBlueprintConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentBlueprintConfigurationsPages indicates an expected call of ListEnvironmentBlueprintConfigurationsPages
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintConfigurationsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintConfigurationsPages), arg0, arg1)
}

// ListEnvironmentBlueprintConfigurationsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintConfigurationsPagesWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentBlueprintConfigurationsInput, arg2 func(*datazone.ListEnvironmentBlueprintConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentBlueprintConfigurationsPagesWithContext indicates an expected call of ListEnvironmentBlueprintConfigurationsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintConfigurationsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintConfigurationsPagesWithContext), varargs...)
}

// ListEnvironmentBlueprintConfigurationsRequest mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintConfigurationsRequest(arg0 *datazone.ListEnvironmentBlueprintConfigurationsInput) (*request.Request, *datazone.ListEnvironmentBlueprintConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListEnvironmentBlueprintConfigurationsOutput)
	return ret0, ret1
}

// ListEnvironmentBlueprintConfigurationsRequest indicates an expected call of ListEnvironmentBlueprintConfigurationsRequest
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintConfigurationsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintConfigurationsRequest), arg0)
}

// ListEnvironmentBlueprintConfigurationsWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintConfigurationsWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentBlueprintConfigurationsInput, arg2 ...request.Option) (*datazone.ListEnvironmentBlueprintConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListEnvironmentBlueprintConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentBlueprintConfigurationsWithContext indicates an expected call of ListEnvironmentBlueprintConfigurationsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintConfigurationsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintConfigurationsWithContext), varargs...)
}

// ListEnvironmentBlueprints mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprints(arg0 *datazone.ListEnvironmentBlueprintsInput) (*datazone.ListEnvironmentBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprints", arg0)
	ret0, _ := ret[0].(*datazone.ListEnvironmentBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentBlueprints indicates an expected call of ListEnvironmentBlueprints
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprints", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprints), arg0)
}

// ListEnvironmentBlueprintsPages mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintsPages(arg0 *datazone.ListEnvironmentBlueprintsInput, arg1 func(*datazone.ListEnvironmentBlueprintsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentBlueprintsPages indicates an expected call of ListEnvironmentBlueprintsPages
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintsPages), arg0, arg1)
}

// ListEnvironmentBlueprintsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintsPagesWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentBlueprintsInput, arg2 func(*datazone.ListEnvironmentBlueprintsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentBlueprintsPagesWithContext indicates an expected call of ListEnvironmentBlueprintsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintsPagesWithContext), varargs...)
}

// ListEnvironmentBlueprintsRequest mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintsRequest(arg0 *datazone.ListEnvironmentBlueprintsInput) (*request.Request, *datazone.ListEnvironmentBlueprintsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListEnvironmentBlueprintsOutput)
	return ret0, ret1
}

// ListEnvironmentBlueprintsRequest indicates an expected call of ListEnvironmentBlueprintsRequest
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintsRequest), arg0)
}

// ListEnvironmentBlueprintsWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentBlueprintsWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentBlueprintsInput, arg2 ...request.Option) (*datazone.ListEnvironmentBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentBlueprintsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListEnvironmentBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentBlueprintsWithContext indicates an expected call of ListEnvironmentBlueprintsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentBlueprintsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentBlueprintsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentBlueprintsWithContext), varargs...)
}

// ListEnvironmentProfiles mocks base method
func (m *MockDataZoneAPI) ListEnvironmentProfiles(arg0 *datazone.ListEnvironmentProfilesInput) (*datazone.ListEnvironmentProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentProfiles", arg0)
	ret0, _ := ret[0].(*datazone.ListEnvironmentProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentProfiles indicates an expected call of ListEnvironmentProfiles
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentProfiles", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentProfiles), arg0)
}

// ListEnvironmentProfilesPages mocks base method
func (m *MockDataZoneAPI) ListEnvironmentProfilesPages(arg0 *datazone.ListEnvironmentProfilesInput, arg1 func(*datazone.ListEnvironmentProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentProfilesPages indicates an expected call of ListEnvironmentProfilesPages
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentProfilesPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentProfilesPages), arg0, arg1)
}

// ListEnvironmentProfilesPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentProfilesPagesWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentProfilesInput, arg2 func(*datazone.ListEnvironmentProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentProfilesPagesWithContext indicates an expected call of ListEnvironmentProfilesPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentProfilesPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentProfilesPagesWithContext), varargs...)
}

// ListEnvironmentProfilesRequest mocks base method
func (m *MockDataZoneAPI) ListEnvironmentProfilesRequest(arg0 *datazone.ListEnvironmentProfilesInput) (*request.Request, *datazone.ListEnvironmentProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListEnvironmentProfilesOutput)
	return ret0, ret1
}

// ListEnvironmentProfilesRequest indicates an expected call of ListEnvironmentProfilesRequest
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentProfilesRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentProfilesRequest), arg0)
}

// ListEnvironmentProfilesWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentProfilesWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentProfilesInput, arg2 ...request.Option) (*datazone.ListEnvironmentProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListEnvironmentProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentProfilesWithContext indicates an expected call of ListEnvironmentProfilesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentProfilesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentProfilesWithContext), varargs...)
}

// ListEnvironments mocks base method
func (m *MockDataZoneAPI) ListEnvironments(arg0 *datazone.ListEnvironmentsInput) (*datazone.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(*datazone.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockDataZoneAPIMockRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsPages mocks base method
func (m *MockDataZoneAPI) ListEnvironmentsPages(arg0 *datazone.ListEnvironmentsInput, arg1 func(*datazone.ListEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPages indicates an expected call of ListEnvironmentsPages
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentsPages), arg0, arg1)
}

// ListEnvironmentsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentsPagesWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentsInput, arg2 func(*datazone.ListEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPagesWithContext indicates an expected call of ListEnvironmentsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentsPagesWithContext), varargs...)
}

// ListEnvironmentsRequest mocks base method
func (m *MockDataZoneAPI) ListEnvironmentsRequest(arg0 *datazone.ListEnvironmentsInput) (*request.Request, *datazone.ListEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListEnvironmentsOutput)
	return ret0, ret1
}

// ListEnvironmentsRequest indicates an expected call of ListEnvironmentsRequest
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentsRequest), arg0)
}

// ListEnvironmentsWithContext mocks base method
func (m *MockDataZoneAPI) ListEnvironmentsWithContext(arg0 context.Context, arg1 *datazone.ListEnvironmentsInput, arg2 ...request.Option) (*datazone.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsWithContext indicates an expected call of ListEnvironmentsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListEnvironmentsWithContext), varargs...)
}

// ListLineageNodeHistory mocks base method
func (m *MockDataZoneAPI) ListLineageNodeHistory(arg0 *datazone.ListLineageNodeHistoryInput) (*datazone.ListLineageNodeHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLineageNodeHistory", arg0)
	ret0, _ := ret[0].(*datazone.ListLineageNodeHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLineageNodeHistory indicates an expected call of ListLineageNodeHistory
func (mr *MockDataZoneAPIMockRecorder) ListLineageNodeHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLineageNodeHistory", reflect.TypeOf((*MockDataZoneAPI)(nil).ListLineageNodeHistory), arg0)
}

// ListLineageNodeHistoryPages mocks base method
func (m *MockDataZoneAPI) ListLineageNodeHistoryPages(arg0 *datazone.ListLineageNodeHistoryInput, arg1 func(*datazone.ListLineageNodeHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLineageNodeHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLineageNodeHistoryPages indicates an expected call of ListLineageNodeHistoryPages
func (mr *MockDataZoneAPIMockRecorder) ListLineageNodeHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLineageNodeHistoryPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListLineageNodeHistoryPages), arg0, arg1)
}

// ListLineageNodeHistoryPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListLineageNodeHistoryPagesWithContext(arg0 context.Context, arg1 *datazone.ListLineageNodeHistoryInput, arg2 func(*datazone.ListLineageNodeHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLineageNodeHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLineageNodeHistoryPagesWithContext indicates an expected call of ListLineageNodeHistoryPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListLineageNodeHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLineageNodeHistoryPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListLineageNodeHistoryPagesWithContext), varargs...)
}

// ListLineageNodeHistoryRequest mocks base method
func (m *MockDataZoneAPI) ListLineageNodeHistoryRequest(arg0 *datazone.ListLineageNodeHistoryInput) (*request.Request, *datazone.ListLineageNodeHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLineageNodeHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListLineageNodeHistoryOutput)
	return ret0, ret1
}

// ListLineageNodeHistoryRequest indicates an expected call of ListLineageNodeHistoryRequest
func (mr *MockDataZoneAPIMockRecorder) ListLineageNodeHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLineageNodeHistoryRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListLineageNodeHistoryRequest), arg0)
}

// ListLineageNodeHistoryWithContext mocks base method
func (m *MockDataZoneAPI) ListLineageNodeHistoryWithContext(arg0 context.Context, arg1 *datazone.ListLineageNodeHistoryInput, arg2 ...request.Option) (*datazone.ListLineageNodeHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLineageNodeHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListLineageNodeHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLineageNodeHistoryWithContext indicates an expected call of ListLineageNodeHistoryWithContext
func (mr *MockDataZoneAPIMockRecorder) ListLineageNodeHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLineageNodeHistoryWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListLineageNodeHistoryWithContext), varargs...)
}

// ListMetadataGenerationRuns mocks base method
func (m *MockDataZoneAPI) ListMetadataGenerationRuns(arg0 *datazone.ListMetadataGenerationRunsInput) (*datazone.ListMetadataGenerationRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadataGenerationRuns", arg0)
	ret0, _ := ret[0].(*datazone.ListMetadataGenerationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadataGenerationRuns indicates an expected call of ListMetadataGenerationRuns
func (mr *MockDataZoneAPIMockRecorder) ListMetadataGenerationRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadataGenerationRuns", reflect.TypeOf((*MockDataZoneAPI)(nil).ListMetadataGenerationRuns), arg0)
}

// ListMetadataGenerationRunsPages mocks base method
func (m *MockDataZoneAPI) ListMetadataGenerationRunsPages(arg0 *datazone.ListMetadataGenerationRunsInput, arg1 func(*datazone.ListMetadataGenerationRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadataGenerationRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMetadataGenerationRunsPages indicates an expected call of ListMetadataGenerationRunsPages
func (mr *MockDataZoneAPIMockRecorder) ListMetadataGenerationRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadataGenerationRunsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListMetadataGenerationRunsPages), arg0, arg1)
}

// ListMetadataGenerationRunsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListMetadataGenerationRunsPagesWithContext(arg0 context.Context, arg1 *datazone.ListMetadataGenerationRunsInput, arg2 func(*datazone.ListMetadataGenerationRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetadataGenerationRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMetadataGenerationRunsPagesWithContext indicates an expected call of ListMetadataGenerationRunsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListMetadataGenerationRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadataGenerationRunsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListMetadataGenerationRunsPagesWithContext), varargs...)
}

// ListMetadataGenerationRunsRequest mocks base method
func (m *MockDataZoneAPI) ListMetadataGenerationRunsRequest(arg0 *datazone.ListMetadataGenerationRunsInput) (*request.Request, *datazone.ListMetadataGenerationRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadataGenerationRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListMetadataGenerationRunsOutput)
	return ret0, ret1
}

// ListMetadataGenerationRunsRequest indicates an expected call of ListMetadataGenerationRunsRequest
func (mr *MockDataZoneAPIMockRecorder) ListMetadataGenerationRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadataGenerationRunsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListMetadataGenerationRunsRequest), arg0)
}

// ListMetadataGenerationRunsWithContext mocks base method
func (m *MockDataZoneAPI) ListMetadataGenerationRunsWithContext(arg0 context.Context, arg1 *datazone.ListMetadataGenerationRunsInput, arg2 ...request.Option) (*datazone.ListMetadataGenerationRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetadataGenerationRunsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListMetadataGenerationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadataGenerationRunsWithContext indicates an expected call of ListMetadataGenerationRunsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListMetadataGenerationRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadataGenerationRunsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListMetadataGenerationRunsWithContext), varargs...)
}

// ListNotifications mocks base method
func (m *MockDataZoneAPI) ListNotifications(arg0 *datazone.ListNotificationsInput) (*datazone.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", arg0)
	ret0, _ := ret[0].(*datazone.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications
func (mr *MockDataZoneAPIMockRecorder) ListNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockDataZoneAPI)(nil).ListNotifications), arg0)
}

// ListNotificationsPages mocks base method
func (m *MockDataZoneAPI) ListNotificationsPages(arg0 *datazone.ListNotificationsInput, arg1 func(*datazone.ListNotificationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPages indicates an expected call of ListNotificationsPages
func (mr *MockDataZoneAPIMockRecorder) ListNotificationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListNotificationsPages), arg0, arg1)
}

// ListNotificationsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListNotificationsPagesWithContext(arg0 context.Context, arg1 *datazone.ListNotificationsInput, arg2 func(*datazone.ListNotificationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPagesWithContext indicates an expected call of ListNotificationsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListNotificationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListNotificationsPagesWithContext), varargs...)
}

// ListNotificationsRequest mocks base method
func (m *MockDataZoneAPI) ListNotificationsRequest(arg0 *datazone.ListNotificationsInput) (*request.Request, *datazone.ListNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListNotificationsOutput)
	return ret0, ret1
}

// ListNotificationsRequest indicates an expected call of ListNotificationsRequest
func (mr *MockDataZoneAPIMockRecorder) ListNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListNotificationsRequest), arg0)
}

// ListNotificationsWithContext mocks base method
func (m *MockDataZoneAPI) ListNotificationsWithContext(arg0 context.Context, arg1 *datazone.ListNotificationsInput, arg2 ...request.Option) (*datazone.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotificationsWithContext indicates an expected call of ListNotificationsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListNotificationsWithContext), varargs...)
}

// ListProjectMemberships mocks base method
func (m *MockDataZoneAPI) ListProjectMemberships(arg0 *datazone.ListProjectMembershipsInput) (*datazone.ListProjectMembershipsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectMemberships", arg0)
	ret0, _ := ret[0].(*datazone.ListProjectMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectMemberships indicates an expected call of ListProjectMemberships
func (mr *MockDataZoneAPIMockRecorder) ListProjectMemberships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectMemberships", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectMemberships), arg0)
}

// ListProjectMembershipsPages mocks base method
func (m *MockDataZoneAPI) ListProjectMembershipsPages(arg0 *datazone.ListProjectMembershipsInput, arg1 func(*datazone.ListProjectMembershipsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectMembershipsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectMembershipsPages indicates an expected call of ListProjectMembershipsPages
func (mr *MockDataZoneAPIMockRecorder) ListProjectMembershipsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectMembershipsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectMembershipsPages), arg0, arg1)
}

// ListProjectMembershipsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListProjectMembershipsPagesWithContext(arg0 context.Context, arg1 *datazone.ListProjectMembershipsInput, arg2 func(*datazone.ListProjectMembershipsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectMembershipsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectMembershipsPagesWithContext indicates an expected call of ListProjectMembershipsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListProjectMembershipsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectMembershipsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectMembershipsPagesWithContext), varargs...)
}

// ListProjectMembershipsRequest mocks base method
func (m *MockDataZoneAPI) ListProjectMembershipsRequest(arg0 *datazone.ListProjectMembershipsInput) (*request.Request, *datazone.ListProjectMembershipsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectMembershipsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListProjectMembershipsOutput)
	return ret0, ret1
}

// ListProjectMembershipsRequest indicates an expected call of ListProjectMembershipsRequest
func (mr *MockDataZoneAPIMockRecorder) ListProjectMembershipsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectMembershipsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectMembershipsRequest), arg0)
}

// ListProjectMembershipsWithContext mocks base method
func (m *MockDataZoneAPI) ListProjectMembershipsWithContext(arg0 context.Context, arg1 *datazone.ListProjectMembershipsInput, arg2 ...request.Option) (*datazone.ListProjectMembershipsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectMembershipsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListProjectMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectMembershipsWithContext indicates an expected call of ListProjectMembershipsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListProjectMembershipsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectMembershipsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectMembershipsWithContext), varargs...)
}

// ListProjects mocks base method
func (m *MockDataZoneAPI) ListProjects(arg0 *datazone.ListProjectsInput) (*datazone.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0)
	ret0, _ := ret[0].(*datazone.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockDataZoneAPIMockRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjects), arg0)
}

// ListProjectsPages mocks base method
func (m *MockDataZoneAPI) ListProjectsPages(arg0 *datazone.ListProjectsInput, arg1 func(*datazone.ListProjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPages indicates an expected call of ListProjectsPages
func (mr *MockDataZoneAPIMockRecorder) ListProjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectsPages), arg0, arg1)
}

// ListProjectsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListProjectsPagesWithContext(arg0 context.Context, arg1 *datazone.ListProjectsInput, arg2 func(*datazone.ListProjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPagesWithContext indicates an expected call of ListProjectsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListProjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectsPagesWithContext), varargs...)
}

// ListProjectsRequest mocks base method
func (m *MockDataZoneAPI) ListProjectsRequest(arg0 *datazone.ListProjectsInput) (*request.Request, *datazone.ListProjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListProjectsOutput)
	return ret0, ret1
}

// ListProjectsRequest indicates an expected call of ListProjectsRequest
func (mr *MockDataZoneAPIMockRecorder) ListProjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectsRequest), arg0)
}

// ListProjectsWithContext mocks base method
func (m *MockDataZoneAPI) ListProjectsWithContext(arg0 context.Context, arg1 *datazone.ListProjectsInput, arg2 ...request.Option) (*datazone.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsWithContext indicates an expected call of ListProjectsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListProjectsWithContext), varargs...)
}

// ListSubscriptionGrants mocks base method
func (m *MockDataZoneAPI) ListSubscriptionGrants(arg0 *datazone.ListSubscriptionGrantsInput) (*datazone.ListSubscriptionGrantsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionGrants", arg0)
	ret0, _ := ret[0].(*datazone.ListSubscriptionGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionGrants indicates an expected call of ListSubscriptionGrants
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionGrants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionGrants", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionGrants), arg0)
}

// ListSubscriptionGrantsPages mocks base method
func (m *MockDataZoneAPI) ListSubscriptionGrantsPages(arg0 *datazone.ListSubscriptionGrantsInput, arg1 func(*datazone.ListSubscriptionGrantsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionGrantsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionGrantsPages indicates an expected call of ListSubscriptionGrantsPages
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionGrantsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionGrantsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionGrantsPages), arg0, arg1)
}

// ListSubscriptionGrantsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionGrantsPagesWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionGrantsInput, arg2 func(*datazone.ListSubscriptionGrantsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionGrantsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionGrantsPagesWithContext indicates an expected call of ListSubscriptionGrantsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionGrantsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionGrantsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionGrantsPagesWithContext), varargs...)
}

// ListSubscriptionGrantsRequest mocks base method
func (m *MockDataZoneAPI) ListSubscriptionGrantsRequest(arg0 *datazone.ListSubscriptionGrantsInput) (*request.Request, *datazone.ListSubscriptionGrantsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionGrantsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListSubscriptionGrantsOutput)
	return ret0, ret1
}

// ListSubscriptionGrantsRequest indicates an expected call of ListSubscriptionGrantsRequest
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionGrantsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionGrantsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionGrantsRequest), arg0)
}

// ListSubscriptionGrantsWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionGrantsWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionGrantsInput, arg2 ...request.Option) (*datazone.ListSubscriptionGrantsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionGrantsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListSubscriptionGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionGrantsWithContext indicates an expected call of ListSubscriptionGrantsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionGrantsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionGrantsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionGrantsWithContext), varargs...)
}

// ListSubscriptionRequests mocks base method
func (m *MockDataZoneAPI) ListSubscriptionRequests(arg0 *datazone.ListSubscriptionRequestsInput) (*datazone.ListSubscriptionRequestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionRequests", arg0)
	ret0, _ := ret[0].(*datazone.ListSubscriptionRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionRequests indicates an expected call of ListSubscriptionRequests
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionRequests", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionRequests), arg0)
}

// ListSubscriptionRequestsPages mocks base method
func (m *MockDataZoneAPI) ListSubscriptionRequestsPages(arg0 *datazone.ListSubscriptionRequestsInput, arg1 func(*datazone.ListSubscriptionRequestsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionRequestsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionRequestsPages indicates an expected call of ListSubscriptionRequestsPages
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionRequestsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionRequestsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionRequestsPages), arg0, arg1)
}

// ListSubscriptionRequestsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionRequestsPagesWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionRequestsInput, arg2 func(*datazone.ListSubscriptionRequestsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionRequestsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionRequestsPagesWithContext indicates an expected call of ListSubscriptionRequestsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionRequestsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionRequestsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionRequestsPagesWithContext), varargs...)
}

// ListSubscriptionRequestsRequest mocks base method
func (m *MockDataZoneAPI) ListSubscriptionRequestsRequest(arg0 *datazone.ListSubscriptionRequestsInput) (*request.Request, *datazone.ListSubscriptionRequestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionRequestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListSubscriptionRequestsOutput)
	return ret0, ret1
}

// ListSubscriptionRequestsRequest indicates an expected call of ListSubscriptionRequestsRequest
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionRequestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionRequestsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionRequestsRequest), arg0)
}

// ListSubscriptionRequestsWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionRequestsWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionRequestsInput, arg2 ...request.Option) (*datazone.ListSubscriptionRequestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionRequestsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListSubscriptionRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionRequestsWithContext indicates an expected call of ListSubscriptionRequestsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionRequestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionRequestsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionRequestsWithContext), varargs...)
}

// ListSubscriptionTargets mocks base method
func (m *MockDataZoneAPI) ListSubscriptionTargets(arg0 *datazone.ListSubscriptionTargetsInput) (*datazone.ListSubscriptionTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionTargets", arg0)
	ret0, _ := ret[0].(*datazone.ListSubscriptionTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionTargets indicates an expected call of ListSubscriptionTargets
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionTargets", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionTargets), arg0)
}

// ListSubscriptionTargetsPages mocks base method
func (m *MockDataZoneAPI) ListSubscriptionTargetsPages(arg0 *datazone.ListSubscriptionTargetsInput, arg1 func(*datazone.ListSubscriptionTargetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionTargetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionTargetsPages indicates an expected call of ListSubscriptionTargetsPages
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionTargetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionTargetsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionTargetsPages), arg0, arg1)
}

// ListSubscriptionTargetsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionTargetsPagesWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionTargetsInput, arg2 func(*datazone.ListSubscriptionTargetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionTargetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionTargetsPagesWithContext indicates an expected call of ListSubscriptionTargetsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionTargetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionTargetsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionTargetsPagesWithContext), varargs...)
}

// ListSubscriptionTargetsRequest mocks base method
func (m *MockDataZoneAPI) ListSubscriptionTargetsRequest(arg0 *datazone.ListSubscriptionTargetsInput) (*request.Request, *datazone.ListSubscriptionTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListSubscriptionTargetsOutput)
	return ret0, ret1
}

// ListSubscriptionTargetsRequest indicates an expected call of ListSubscriptionTargetsRequest
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionTargetsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionTargetsRequest), arg0)
}

// ListSubscriptionTargetsWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionTargetsWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionTargetsInput, arg2 ...request.Option) (*datazone.ListSubscriptionTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListSubscriptionTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionTargetsWithContext indicates an expected call of ListSubscriptionTargetsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionTargetsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionTargetsWithContext), varargs...)
}

// ListSubscriptions mocks base method
func (m *MockDataZoneAPI) ListSubscriptions(arg0 *datazone.ListSubscriptionsInput) (*datazone.ListSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", arg0)
	ret0, _ := ret[0].(*datazone.ListSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptions), arg0)
}

// ListSubscriptionsPages mocks base method
func (m *MockDataZoneAPI) ListSubscriptionsPages(arg0 *datazone.ListSubscriptionsInput, arg1 func(*datazone.ListSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionsPages indicates an expected call of ListSubscriptionsPages
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionsPages), arg0, arg1)
}

// ListSubscriptionsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionsPagesWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionsInput, arg2 func(*datazone.ListSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubscriptionsPagesWithContext indicates an expected call of ListSubscriptionsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionsPagesWithContext), varargs...)
}

// ListSubscriptionsRequest mocks base method
func (m *MockDataZoneAPI) ListSubscriptionsRequest(arg0 *datazone.ListSubscriptionsInput) (*request.Request, *datazone.ListSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListSubscriptionsOutput)
	return ret0, ret1
}

// ListSubscriptionsRequest indicates an expected call of ListSubscriptionsRequest
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionsRequest), arg0)
}

// ListSubscriptionsWithContext mocks base method
func (m *MockDataZoneAPI) ListSubscriptionsWithContext(arg0 context.Context, arg1 *datazone.ListSubscriptionsInput, arg2 ...request.Option) (*datazone.ListSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsWithContext indicates an expected call of ListSubscriptionsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListSubscriptionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockDataZoneAPI) ListTagsForResource(arg0 *datazone.ListTagsForResourceInput) (*datazone.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*datazone.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockDataZoneAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockDataZoneAPI) ListTagsForResourceRequest(arg0 *datazone.ListTagsForResourceInput) (*request.Request, *datazone.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockDataZoneAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockDataZoneAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *datazone.ListTagsForResourceInput, arg2 ...request.Option) (*datazone.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockDataZoneAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTimeSeriesDataPoints mocks base method
func (m *MockDataZoneAPI) ListTimeSeriesDataPoints(arg0 *datazone.ListTimeSeriesDataPointsInput) (*datazone.ListTimeSeriesDataPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeSeriesDataPoints", arg0)
	ret0, _ := ret[0].(*datazone.ListTimeSeriesDataPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimeSeriesDataPoints indicates an expected call of ListTimeSeriesDataPoints
func (mr *MockDataZoneAPIMockRecorder) ListTimeSeriesDataPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeriesDataPoints", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTimeSeriesDataPoints), arg0)
}

// ListTimeSeriesDataPointsPages mocks base method
func (m *MockDataZoneAPI) ListTimeSeriesDataPointsPages(arg0 *datazone.ListTimeSeriesDataPointsInput, arg1 func(*datazone.ListTimeSeriesDataPointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeSeriesDataPointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTimeSeriesDataPointsPages indicates an expected call of ListTimeSeriesDataPointsPages
func (mr *MockDataZoneAPIMockRecorder) ListTimeSeriesDataPointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeriesDataPointsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTimeSeriesDataPointsPages), arg0, arg1)
}

// ListTimeSeriesDataPointsPagesWithContext mocks base method
func (m *MockDataZoneAPI) ListTimeSeriesDataPointsPagesWithContext(arg0 context.Context, arg1 *datazone.ListTimeSeriesDataPointsInput, arg2 func(*datazone.ListTimeSeriesDataPointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTimeSeriesDataPointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTimeSeriesDataPointsPagesWithContext indicates an expected call of ListTimeSeriesDataPointsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) ListTimeSeriesDataPointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeriesDataPointsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTimeSeriesDataPointsPagesWithContext), varargs...)
}

// ListTimeSeriesDataPointsRequest mocks base method
func (m *MockDataZoneAPI) ListTimeSeriesDataPointsRequest(arg0 *datazone.ListTimeSeriesDataPointsInput) (*request.Request, *datazone.ListTimeSeriesDataPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeSeriesDataPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.ListTimeSeriesDataPointsOutput)
	return ret0, ret1
}

// ListTimeSeriesDataPointsRequest indicates an expected call of ListTimeSeriesDataPointsRequest
func (mr *MockDataZoneAPIMockRecorder) ListTimeSeriesDataPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeriesDataPointsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTimeSeriesDataPointsRequest), arg0)
}

// ListTimeSeriesDataPointsWithContext mocks base method
func (m *MockDataZoneAPI) ListTimeSeriesDataPointsWithContext(arg0 context.Context, arg1 *datazone.ListTimeSeriesDataPointsInput, arg2 ...request.Option) (*datazone.ListTimeSeriesDataPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTimeSeriesDataPointsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.ListTimeSeriesDataPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimeSeriesDataPointsWithContext indicates an expected call of ListTimeSeriesDataPointsWithContext
func (mr *MockDataZoneAPIMockRecorder) ListTimeSeriesDataPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeriesDataPointsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).ListTimeSeriesDataPointsWithContext), varargs...)
}

// PostLineageEvent mocks base method
func (m *MockDataZoneAPI) PostLineageEvent(arg0 *datazone.PostLineageEventInput) (*datazone.PostLineageEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostLineageEvent", arg0)
	ret0, _ := ret[0].(*datazone.PostLineageEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostLineageEvent indicates an expected call of PostLineageEvent
func (mr *MockDataZoneAPIMockRecorder) PostLineageEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLineageEvent", reflect.TypeOf((*MockDataZoneAPI)(nil).PostLineageEvent), arg0)
}

// PostLineageEventRequest mocks base method
func (m *MockDataZoneAPI) PostLineageEventRequest(arg0 *datazone.PostLineageEventInput) (*request.Request, *datazone.PostLineageEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostLineageEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.PostLineageEventOutput)
	return ret0, ret1
}

// PostLineageEventRequest indicates an expected call of PostLineageEventRequest
func (mr *MockDataZoneAPIMockRecorder) PostLineageEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLineageEventRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).PostLineageEventRequest), arg0)
}

// PostLineageEventWithContext mocks base method
func (m *MockDataZoneAPI) PostLineageEventWithContext(arg0 context.Context, arg1 *datazone.PostLineageEventInput, arg2 ...request.Option) (*datazone.PostLineageEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostLineageEventWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.PostLineageEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostLineageEventWithContext indicates an expected call of PostLineageEventWithContext
func (mr *MockDataZoneAPIMockRecorder) PostLineageEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLineageEventWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).PostLineageEventWithContext), varargs...)
}

// PostTimeSeriesDataPoints mocks base method
func (m *MockDataZoneAPI) PostTimeSeriesDataPoints(arg0 *datazone.PostTimeSeriesDataPointsInput) (*datazone.PostTimeSeriesDataPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTimeSeriesDataPoints", arg0)
	ret0, _ := ret[0].(*datazone.PostTimeSeriesDataPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostTimeSeriesDataPoints indicates an expected call of PostTimeSeriesDataPoints
func (mr *MockDataZoneAPIMockRecorder) PostTimeSeriesDataPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTimeSeriesDataPoints", reflect.TypeOf((*MockDataZoneAPI)(nil).PostTimeSeriesDataPoints), arg0)
}

// PostTimeSeriesDataPointsRequest mocks base method
func (m *MockDataZoneAPI) PostTimeSeriesDataPointsRequest(arg0 *datazone.PostTimeSeriesDataPointsInput) (*request.Request, *datazone.PostTimeSeriesDataPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTimeSeriesDataPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.PostTimeSeriesDataPointsOutput)
	return ret0, ret1
}

// PostTimeSeriesDataPointsRequest indicates an expected call of PostTimeSeriesDataPointsRequest
func (mr *MockDataZoneAPIMockRecorder) PostTimeSeriesDataPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTimeSeriesDataPointsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).PostTimeSeriesDataPointsRequest), arg0)
}

// PostTimeSeriesDataPointsWithContext mocks base method
func (m *MockDataZoneAPI) PostTimeSeriesDataPointsWithContext(arg0 context.Context, arg1 *datazone.PostTimeSeriesDataPointsInput, arg2 ...request.Option) (*datazone.PostTimeSeriesDataPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostTimeSeriesDataPointsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.PostTimeSeriesDataPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostTimeSeriesDataPointsWithContext indicates an expected call of PostTimeSeriesDataPointsWithContext
func (mr *MockDataZoneAPIMockRecorder) PostTimeSeriesDataPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTimeSeriesDataPointsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).PostTimeSeriesDataPointsWithContext), varargs...)
}

// PutEnvironmentBlueprintConfiguration mocks base method
func (m *MockDataZoneAPI) PutEnvironmentBlueprintConfiguration(arg0 *datazone.PutEnvironmentBlueprintConfigurationInput) (*datazone.PutEnvironmentBlueprintConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEnvironmentBlueprintConfiguration", arg0)
	ret0, _ := ret[0].(*datazone.PutEnvironmentBlueprintConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEnvironmentBlueprintConfiguration indicates an expected call of PutEnvironmentBlueprintConfiguration
func (mr *MockDataZoneAPIMockRecorder) PutEnvironmentBlueprintConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEnvironmentBlueprintConfiguration", reflect.TypeOf((*MockDataZoneAPI)(nil).PutEnvironmentBlueprintConfiguration), arg0)
}

// PutEnvironmentBlueprintConfigurationRequest mocks base method
func (m *MockDataZoneAPI) PutEnvironmentBlueprintConfigurationRequest(arg0 *datazone.PutEnvironmentBlueprintConfigurationInput) (*request.Request, *datazone.PutEnvironmentBlueprintConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEnvironmentBlueprintConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.PutEnvironmentBlueprintConfigurationOutput)
	return ret0, ret1
}

// PutEnvironmentBlueprintConfigurationRequest indicates an expected call of PutEnvironmentBlueprintConfigurationRequest
func (mr *MockDataZoneAPIMockRecorder) PutEnvironmentBlueprintConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEnvironmentBlueprintConfigurationRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).PutEnvironmentBlueprintConfigurationRequest), arg0)
}

// PutEnvironmentBlueprintConfigurationWithContext mocks base method
func (m *MockDataZoneAPI) PutEnvironmentBlueprintConfigurationWithContext(arg0 context.Context, arg1 *datazone.PutEnvironmentBlueprintConfigurationInput, arg2 ...request.Option) (*datazone.PutEnvironmentBlueprintConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEnvironmentBlueprintConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.PutEnvironmentBlueprintConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEnvironmentBlueprintConfigurationWithContext indicates an expected call of PutEnvironmentBlueprintConfigurationWithContext
func (mr *MockDataZoneAPIMockRecorder) PutEnvironmentBlueprintConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEnvironmentBlueprintConfigurationWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).PutEnvironmentBlueprintConfigurationWithContext), varargs...)
}

// RejectPredictions mocks base method
func (m *MockDataZoneAPI) RejectPredictions(arg0 *datazone.RejectPredictionsInput) (*datazone.RejectPredictionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectPredictions", arg0)
	ret0, _ := ret[0].(*datazone.RejectPredictionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectPredictions indicates an expected call of RejectPredictions
func (mr *MockDataZoneAPIMockRecorder) RejectPredictions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectPredictions", reflect.TypeOf((*MockDataZoneAPI)(nil).RejectPredictions), arg0)
}

// RejectPredictionsRequest mocks base method
func (m *MockDataZoneAPI) RejectPredictionsRequest(arg0 *datazone.RejectPredictionsInput) (*request.Request, *datazone.RejectPredictionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectPredictionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.RejectPredictionsOutput)
	return ret0, ret1
}

// RejectPredictionsRequest indicates an expected call of RejectPredictionsRequest
func (mr *MockDataZoneAPIMockRecorder) RejectPredictionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectPredictionsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).RejectPredictionsRequest), arg0)
}

// RejectPredictionsWithContext mocks base method
func (m *MockDataZoneAPI) RejectPredictionsWithContext(arg0 context.Context, arg1 *datazone.RejectPredictionsInput, arg2 ...request.Option) (*datazone.RejectPredictionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectPredictionsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.RejectPredictionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectPredictionsWithContext indicates an expected call of RejectPredictionsWithContext
func (mr *MockDataZoneAPIMockRecorder) RejectPredictionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectPredictionsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).RejectPredictionsWithContext), varargs...)
}

// RejectSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) RejectSubscriptionRequest(arg0 *datazone.RejectSubscriptionRequestInput) (*datazone.RejectSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*datazone.RejectSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectSubscriptionRequest indicates an expected call of RejectSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) RejectSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).RejectSubscriptionRequest), arg0)
}

// RejectSubscriptionRequestRequest mocks base method
func (m *MockDataZoneAPI) RejectSubscriptionRequestRequest(arg0 *datazone.RejectSubscriptionRequestInput) (*request.Request, *datazone.RejectSubscriptionRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectSubscriptionRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.RejectSubscriptionRequestOutput)
	return ret0, ret1
}

// RejectSubscriptionRequestRequest indicates an expected call of RejectSubscriptionRequestRequest
func (mr *MockDataZoneAPIMockRecorder) RejectSubscriptionRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectSubscriptionRequestRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).RejectSubscriptionRequestRequest), arg0)
}

// RejectSubscriptionRequestWithContext mocks base method
func (m *MockDataZoneAPI) RejectSubscriptionRequestWithContext(arg0 context.Context, arg1 *datazone.RejectSubscriptionRequestInput, arg2 ...request.Option) (*datazone.RejectSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectSubscriptionRequestWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.RejectSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectSubscriptionRequestWithContext indicates an expected call of RejectSubscriptionRequestWithContext
func (mr *MockDataZoneAPIMockRecorder) RejectSubscriptionRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectSubscriptionRequestWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).RejectSubscriptionRequestWithContext), varargs...)
}

// RevokeSubscription mocks base method
func (m *MockDataZoneAPI) RevokeSubscription(arg0 *datazone.RevokeSubscriptionInput) (*datazone.RevokeSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSubscription", arg0)
	ret0, _ := ret[0].(*datazone.RevokeSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeSubscription indicates an expected call of RevokeSubscription
func (mr *MockDataZoneAPIMockRecorder) RevokeSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSubscription", reflect.TypeOf((*MockDataZoneAPI)(nil).RevokeSubscription), arg0)
}

// RevokeSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) RevokeSubscriptionRequest(arg0 *datazone.RevokeSubscriptionInput) (*request.Request, *datazone.RevokeSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.RevokeSubscriptionOutput)
	return ret0, ret1
}

// RevokeSubscriptionRequest indicates an expected call of RevokeSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) RevokeSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).RevokeSubscriptionRequest), arg0)
}

// RevokeSubscriptionWithContext mocks base method
func (m *MockDataZoneAPI) RevokeSubscriptionWithContext(arg0 context.Context, arg1 *datazone.RevokeSubscriptionInput, arg2 ...request.Option) (*datazone.RevokeSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.RevokeSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeSubscriptionWithContext indicates an expected call of RevokeSubscriptionWithContext
func (mr *MockDataZoneAPIMockRecorder) RevokeSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSubscriptionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).RevokeSubscriptionWithContext), varargs...)
}

// Search mocks base method
func (m *MockDataZoneAPI) Search(arg0 *datazone.SearchInput) (*datazone.SearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(*datazone.SearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDataZoneAPIMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataZoneAPI)(nil).Search), arg0)
}

// SearchGroupProfiles mocks base method
func (m *MockDataZoneAPI) SearchGroupProfiles(arg0 *datazone.SearchGroupProfilesInput) (*datazone.SearchGroupProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGroupProfiles", arg0)
	ret0, _ := ret[0].(*datazone.SearchGroupProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGroupProfiles indicates an expected call of SearchGroupProfiles
func (mr *MockDataZoneAPIMockRecorder) SearchGroupProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroupProfiles", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchGroupProfiles), arg0)
}

// SearchGroupProfilesPages mocks base method
func (m *MockDataZoneAPI) SearchGroupProfilesPages(arg0 *datazone.SearchGroupProfilesInput, arg1 func(*datazone.SearchGroupProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGroupProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchGroupProfilesPages indicates an expected call of SearchGroupProfilesPages
func (mr *MockDataZoneAPIMockRecorder) SearchGroupProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroupProfilesPages", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchGroupProfilesPages), arg0, arg1)
}

// SearchGroupProfilesPagesWithContext mocks base method
func (m *MockDataZoneAPI) SearchGroupProfilesPagesWithContext(arg0 context.Context, arg1 *datazone.SearchGroupProfilesInput, arg2 func(*datazone.SearchGroupProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchGroupProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchGroupProfilesPagesWithContext indicates an expected call of SearchGroupProfilesPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchGroupProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroupProfilesPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchGroupProfilesPagesWithContext), varargs...)
}

// SearchGroupProfilesRequest mocks base method
func (m *MockDataZoneAPI) SearchGroupProfilesRequest(arg0 *datazone.SearchGroupProfilesInput) (*request.Request, *datazone.SearchGroupProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGroupProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.SearchGroupProfilesOutput)
	return ret0, ret1
}

// SearchGroupProfilesRequest indicates an expected call of SearchGroupProfilesRequest
func (mr *MockDataZoneAPIMockRecorder) SearchGroupProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroupProfilesRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchGroupProfilesRequest), arg0)
}

// SearchGroupProfilesWithContext mocks base method
func (m *MockDataZoneAPI) SearchGroupProfilesWithContext(arg0 context.Context, arg1 *datazone.SearchGroupProfilesInput, arg2 ...request.Option) (*datazone.SearchGroupProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchGroupProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.SearchGroupProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGroupProfilesWithContext indicates an expected call of SearchGroupProfilesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchGroupProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroupProfilesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchGroupProfilesWithContext), varargs...)
}

// SearchListings mocks base method
func (m *MockDataZoneAPI) SearchListings(arg0 *datazone.SearchListingsInput) (*datazone.SearchListingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchListings", arg0)
	ret0, _ := ret[0].(*datazone.SearchListingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchListings indicates an expected call of SearchListings
func (mr *MockDataZoneAPIMockRecorder) SearchListings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchListings", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchListings), arg0)
}

// SearchListingsPages mocks base method
func (m *MockDataZoneAPI) SearchListingsPages(arg0 *datazone.SearchListingsInput, arg1 func(*datazone.SearchListingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchListingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchListingsPages indicates an expected call of SearchListingsPages
func (mr *MockDataZoneAPIMockRecorder) SearchListingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchListingsPages", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchListingsPages), arg0, arg1)
}

// SearchListingsPagesWithContext mocks base method
func (m *MockDataZoneAPI) SearchListingsPagesWithContext(arg0 context.Context, arg1 *datazone.SearchListingsInput, arg2 func(*datazone.SearchListingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchListingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchListingsPagesWithContext indicates an expected call of SearchListingsPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchListingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchListingsPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchListingsPagesWithContext), varargs...)
}

// SearchListingsRequest mocks base method
func (m *MockDataZoneAPI) SearchListingsRequest(arg0 *datazone.SearchListingsInput) (*request.Request, *datazone.SearchListingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchListingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.SearchListingsOutput)
	return ret0, ret1
}

// SearchListingsRequest indicates an expected call of SearchListingsRequest
func (mr *MockDataZoneAPIMockRecorder) SearchListingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchListingsRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchListingsRequest), arg0)
}

// SearchListingsWithContext mocks base method
func (m *MockDataZoneAPI) SearchListingsWithContext(arg0 context.Context, arg1 *datazone.SearchListingsInput, arg2 ...request.Option) (*datazone.SearchListingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchListingsWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.SearchListingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchListingsWithContext indicates an expected call of SearchListingsWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchListingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchListingsWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchListingsWithContext), varargs...)
}

// SearchPages mocks base method
func (m *MockDataZoneAPI) SearchPages(arg0 *datazone.SearchInput, arg1 func(*datazone.SearchOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchPages indicates an expected call of SearchPages
func (mr *MockDataZoneAPIMockRecorder) SearchPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPages", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchPages), arg0, arg1)
}

// SearchPagesWithContext mocks base method
func (m *MockDataZoneAPI) SearchPagesWithContext(arg0 context.Context, arg1 *datazone.SearchInput, arg2 func(*datazone.SearchOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchPagesWithContext indicates an expected call of SearchPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchPagesWithContext), varargs...)
}

// SearchRequest mocks base method
func (m *MockDataZoneAPI) SearchRequest(arg0 *datazone.SearchInput) (*request.Request, *datazone.SearchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.SearchOutput)
	return ret0, ret1
}

// SearchRequest indicates an expected call of SearchRequest
func (mr *MockDataZoneAPIMockRecorder) SearchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchRequest), arg0)
}

// SearchTypes mocks base method
func (m *MockDataZoneAPI) SearchTypes(arg0 *datazone.SearchTypesInput) (*datazone.SearchTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTypes", arg0)
	ret0, _ := ret[0].(*datazone.SearchTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTypes indicates an expected call of SearchTypes
func (mr *MockDataZoneAPIMockRecorder) SearchTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTypes", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchTypes), arg0)
}

// SearchTypesPages mocks base method
func (m *MockDataZoneAPI) SearchTypesPages(arg0 *datazone.SearchTypesInput, arg1 func(*datazone.SearchTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTypesPages indicates an expected call of SearchTypesPages
func (mr *MockDataZoneAPIMockRecorder) SearchTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTypesPages", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchTypesPages), arg0, arg1)
}

// SearchTypesPagesWithContext mocks base method
func (m *MockDataZoneAPI) SearchTypesPagesWithContext(arg0 context.Context, arg1 *datazone.SearchTypesInput, arg2 func(*datazone.SearchTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTypesPagesWithContext indicates an expected call of SearchTypesPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTypesPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchTypesPagesWithContext), varargs...)
}

// SearchTypesRequest mocks base method
func (m *MockDataZoneAPI) SearchTypesRequest(arg0 *datazone.SearchTypesInput) (*request.Request, *datazone.SearchTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.SearchTypesOutput)
	return ret0, ret1
}

// SearchTypesRequest indicates an expected call of SearchTypesRequest
func (mr *MockDataZoneAPIMockRecorder) SearchTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTypesRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchTypesRequest), arg0)
}

// SearchTypesWithContext mocks base method
func (m *MockDataZoneAPI) SearchTypesWithContext(arg0 context.Context, arg1 *datazone.SearchTypesInput, arg2 ...request.Option) (*datazone.SearchTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTypesWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.SearchTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTypesWithContext indicates an expected call of SearchTypesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTypesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchTypesWithContext), varargs...)
}

// SearchUserProfiles mocks base method
func (m *MockDataZoneAPI) SearchUserProfiles(arg0 *datazone.SearchUserProfilesInput) (*datazone.SearchUserProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserProfiles", arg0)
	ret0, _ := ret[0].(*datazone.SearchUserProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserProfiles indicates an expected call of SearchUserProfiles
func (mr *MockDataZoneAPIMockRecorder) SearchUserProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserProfiles", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchUserProfiles), arg0)
}

// SearchUserProfilesPages mocks base method
func (m *MockDataZoneAPI) SearchUserProfilesPages(arg0 *datazone.SearchUserProfilesInput, arg1 func(*datazone.SearchUserProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchUserProfilesPages indicates an expected call of SearchUserProfilesPages
func (mr *MockDataZoneAPIMockRecorder) SearchUserProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserProfilesPages", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchUserProfilesPages), arg0, arg1)
}

// SearchUserProfilesPagesWithContext mocks base method
func (m *MockDataZoneAPI) SearchUserProfilesPagesWithContext(arg0 context.Context, arg1 *datazone.SearchUserProfilesInput, arg2 func(*datazone.SearchUserProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchUserProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchUserProfilesPagesWithContext indicates an expected call of SearchUserProfilesPagesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchUserProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserProfilesPagesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchUserProfilesPagesWithContext), varargs...)
}

// SearchUserProfilesRequest mocks base method
func (m *MockDataZoneAPI) SearchUserProfilesRequest(arg0 *datazone.SearchUserProfilesInput) (*request.Request, *datazone.SearchUserProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.SearchUserProfilesOutput)
	return ret0, ret1
}

// SearchUserProfilesRequest indicates an expected call of SearchUserProfilesRequest
func (mr *MockDataZoneAPIMockRecorder) SearchUserProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserProfilesRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchUserProfilesRequest), arg0)
}

// SearchUserProfilesWithContext mocks base method
func (m *MockDataZoneAPI) SearchUserProfilesWithContext(arg0 context.Context, arg1 *datazone.SearchUserProfilesInput, arg2 ...request.Option) (*datazone.SearchUserProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchUserProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.SearchUserProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserProfilesWithContext indicates an expected call of SearchUserProfilesWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchUserProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserProfilesWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchUserProfilesWithContext), varargs...)
}

// SearchWithContext mocks base method
func (m *MockDataZoneAPI) SearchWithContext(arg0 context.Context, arg1 *datazone.SearchInput, arg2 ...request.Option) (*datazone.SearchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.SearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithContext indicates an expected call of SearchWithContext
func (mr *MockDataZoneAPIMockRecorder) SearchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).SearchWithContext), varargs...)
}

// StartDataSourceRun mocks base method
func (m *MockDataZoneAPI) StartDataSourceRun(arg0 *datazone.StartDataSourceRunInput) (*datazone.StartDataSourceRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataSourceRun", arg0)
	ret0, _ := ret[0].(*datazone.StartDataSourceRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataSourceRun indicates an expected call of StartDataSourceRun
func (mr *MockDataZoneAPIMockRecorder) StartDataSourceRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataSourceRun", reflect.TypeOf((*MockDataZoneAPI)(nil).StartDataSourceRun), arg0)
}

// StartDataSourceRunRequest mocks base method
func (m *MockDataZoneAPI) StartDataSourceRunRequest(arg0 *datazone.StartDataSourceRunInput) (*request.Request, *datazone.StartDataSourceRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataSourceRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.StartDataSourceRunOutput)
	return ret0, ret1
}

// StartDataSourceRunRequest indicates an expected call of StartDataSourceRunRequest
func (mr *MockDataZoneAPIMockRecorder) StartDataSourceRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataSourceRunRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).StartDataSourceRunRequest), arg0)
}

// StartDataSourceRunWithContext mocks base method
func (m *MockDataZoneAPI) StartDataSourceRunWithContext(arg0 context.Context, arg1 *datazone.StartDataSourceRunInput, arg2 ...request.Option) (*datazone.StartDataSourceRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDataSourceRunWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.StartDataSourceRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataSourceRunWithContext indicates an expected call of StartDataSourceRunWithContext
func (mr *MockDataZoneAPIMockRecorder) StartDataSourceRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataSourceRunWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).StartDataSourceRunWithContext), varargs...)
}

// StartMetadataGenerationRun mocks base method
func (m *MockDataZoneAPI) StartMetadataGenerationRun(arg0 *datazone.StartMetadataGenerationRunInput) (*datazone.StartMetadataGenerationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMetadataGenerationRun", arg0)
	ret0, _ := ret[0].(*datazone.StartMetadataGenerationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMetadataGenerationRun indicates an expected call of StartMetadataGenerationRun
func (mr *MockDataZoneAPIMockRecorder) StartMetadataGenerationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMetadataGenerationRun", reflect.TypeOf((*MockDataZoneAPI)(nil).StartMetadataGenerationRun), arg0)
}

// StartMetadataGenerationRunRequest mocks base method
func (m *MockDataZoneAPI) StartMetadataGenerationRunRequest(arg0 *datazone.StartMetadataGenerationRunInput) (*request.Request, *datazone.StartMetadataGenerationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMetadataGenerationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.StartMetadataGenerationRunOutput)
	return ret0, ret1
}

// StartMetadataGenerationRunRequest indicates an expected call of StartMetadataGenerationRunRequest
func (mr *MockDataZoneAPIMockRecorder) StartMetadataGenerationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMetadataGenerationRunRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).StartMetadataGenerationRunRequest), arg0)
}

// StartMetadataGenerationRunWithContext mocks base method
func (m *MockDataZoneAPI) StartMetadataGenerationRunWithContext(arg0 context.Context, arg1 *datazone.StartMetadataGenerationRunInput, arg2 ...request.Option) (*datazone.StartMetadataGenerationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMetadataGenerationRunWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.StartMetadataGenerationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMetadataGenerationRunWithContext indicates an expected call of StartMetadataGenerationRunWithContext
func (mr *MockDataZoneAPIMockRecorder) StartMetadataGenerationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMetadataGenerationRunWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).StartMetadataGenerationRunWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockDataZoneAPI) TagResource(arg0 *datazone.TagResourceInput) (*datazone.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*datazone.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockDataZoneAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDataZoneAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockDataZoneAPI) TagResourceRequest(arg0 *datazone.TagResourceInput) (*request.Request, *datazone.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockDataZoneAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockDataZoneAPI) TagResourceWithContext(arg0 context.Context, arg1 *datazone.TagResourceInput, arg2 ...request.Option) (*datazone.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockDataZoneAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockDataZoneAPI) UntagResource(arg0 *datazone.UntagResourceInput) (*datazone.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*datazone.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockDataZoneAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDataZoneAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockDataZoneAPI) UntagResourceRequest(arg0 *datazone.UntagResourceInput) (*request.Request, *datazone.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockDataZoneAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockDataZoneAPI) UntagResourceWithContext(arg0 context.Context, arg1 *datazone.UntagResourceInput, arg2 ...request.Option) (*datazone.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockDataZoneAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAssetFilter mocks base method
func (m *MockDataZoneAPI) UpdateAssetFilter(arg0 *datazone.UpdateAssetFilterInput) (*datazone.UpdateAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetFilter", arg0)
	ret0, _ := ret[0].(*datazone.UpdateAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetFilter indicates an expected call of UpdateAssetFilter
func (mr *MockDataZoneAPIMockRecorder) UpdateAssetFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetFilter", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateAssetFilter), arg0)
}

// UpdateAssetFilterRequest mocks base method
func (m *MockDataZoneAPI) UpdateAssetFilterRequest(arg0 *datazone.UpdateAssetFilterInput) (*request.Request, *datazone.UpdateAssetFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateAssetFilterOutput)
	return ret0, ret1
}

// UpdateAssetFilterRequest indicates an expected call of UpdateAssetFilterRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateAssetFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetFilterRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateAssetFilterRequest), arg0)
}

// UpdateAssetFilterWithContext mocks base method
func (m *MockDataZoneAPI) UpdateAssetFilterWithContext(arg0 context.Context, arg1 *datazone.UpdateAssetFilterInput, arg2 ...request.Option) (*datazone.UpdateAssetFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssetFilterWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateAssetFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetFilterWithContext indicates an expected call of UpdateAssetFilterWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateAssetFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetFilterWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateAssetFilterWithContext), varargs...)
}

// UpdateDataSource mocks base method
func (m *MockDataZoneAPI) UpdateDataSource(arg0 *datazone.UpdateDataSourceInput) (*datazone.UpdateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSource", arg0)
	ret0, _ := ret[0].(*datazone.UpdateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSource indicates an expected call of UpdateDataSource
func (mr *MockDataZoneAPIMockRecorder) UpdateDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSource", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateDataSource), arg0)
}

// UpdateDataSourceRequest mocks base method
func (m *MockDataZoneAPI) UpdateDataSourceRequest(arg0 *datazone.UpdateDataSourceInput) (*request.Request, *datazone.UpdateDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateDataSourceOutput)
	return ret0, ret1
}

// UpdateDataSourceRequest indicates an expected call of UpdateDataSourceRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSourceRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateDataSourceRequest), arg0)
}

// UpdateDataSourceWithContext mocks base method
func (m *MockDataZoneAPI) UpdateDataSourceWithContext(arg0 context.Context, arg1 *datazone.UpdateDataSourceInput, arg2 ...request.Option) (*datazone.UpdateDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSourceWithContext indicates an expected call of UpdateDataSourceWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSourceWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateDataSourceWithContext), varargs...)
}

// UpdateDomain mocks base method
func (m *MockDataZoneAPI) UpdateDomain(arg0 *datazone.UpdateDomainInput) (*datazone.UpdateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomain", arg0)
	ret0, _ := ret[0].(*datazone.UpdateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomain indicates an expected call of UpdateDomain
func (mr *MockDataZoneAPIMockRecorder) UpdateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomain", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateDomain), arg0)
}

// UpdateDomainRequest mocks base method
func (m *MockDataZoneAPI) UpdateDomainRequest(arg0 *datazone.UpdateDomainInput) (*request.Request, *datazone.UpdateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateDomainOutput)
	return ret0, ret1
}

// UpdateDomainRequest indicates an expected call of UpdateDomainRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateDomainRequest), arg0)
}

// UpdateDomainWithContext mocks base method
func (m *MockDataZoneAPI) UpdateDomainWithContext(arg0 context.Context, arg1 *datazone.UpdateDomainInput, arg2 ...request.Option) (*datazone.UpdateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainWithContext indicates an expected call of UpdateDomainWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateDomainWithContext), varargs...)
}

// UpdateEnvironment mocks base method
func (m *MockDataZoneAPI) UpdateEnvironment(arg0 *datazone.UpdateEnvironmentInput) (*datazone.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0)
	ret0, _ := ret[0].(*datazone.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironment), arg0)
}

// UpdateEnvironmentAction mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentAction(arg0 *datazone.UpdateEnvironmentActionInput) (*datazone.UpdateEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentAction", arg0)
	ret0, _ := ret[0].(*datazone.UpdateEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentAction indicates an expected call of UpdateEnvironmentAction
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentAction", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentAction), arg0)
}

// UpdateEnvironmentActionRequest mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentActionRequest(arg0 *datazone.UpdateEnvironmentActionInput) (*request.Request, *datazone.UpdateEnvironmentActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateEnvironmentActionOutput)
	return ret0, ret1
}

// UpdateEnvironmentActionRequest indicates an expected call of UpdateEnvironmentActionRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentActionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentActionRequest), arg0)
}

// UpdateEnvironmentActionWithContext mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentActionWithContext(arg0 context.Context, arg1 *datazone.UpdateEnvironmentActionInput, arg2 ...request.Option) (*datazone.UpdateEnvironmentActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentActionWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateEnvironmentActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentActionWithContext indicates an expected call of UpdateEnvironmentActionWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentActionWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentActionWithContext), varargs...)
}

// UpdateEnvironmentProfile mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentProfile(arg0 *datazone.UpdateEnvironmentProfileInput) (*datazone.UpdateEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentProfile", arg0)
	ret0, _ := ret[0].(*datazone.UpdateEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentProfile indicates an expected call of UpdateEnvironmentProfile
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentProfile), arg0)
}

// UpdateEnvironmentProfileRequest mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentProfileRequest(arg0 *datazone.UpdateEnvironmentProfileInput) (*request.Request, *datazone.UpdateEnvironmentProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateEnvironmentProfileOutput)
	return ret0, ret1
}

// UpdateEnvironmentProfileRequest indicates an expected call of UpdateEnvironmentProfileRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentProfileRequest), arg0)
}

// UpdateEnvironmentProfileWithContext mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentProfileWithContext(arg0 context.Context, arg1 *datazone.UpdateEnvironmentProfileInput, arg2 ...request.Option) (*datazone.UpdateEnvironmentProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateEnvironmentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentProfileWithContext indicates an expected call of UpdateEnvironmentProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentProfileWithContext), varargs...)
}

// UpdateEnvironmentRequest mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentRequest(arg0 *datazone.UpdateEnvironmentInput) (*request.Request, *datazone.UpdateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateEnvironmentOutput)
	return ret0, ret1
}

// UpdateEnvironmentRequest indicates an expected call of UpdateEnvironmentRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentRequest), arg0)
}

// UpdateEnvironmentWithContext mocks base method
func (m *MockDataZoneAPI) UpdateEnvironmentWithContext(arg0 context.Context, arg1 *datazone.UpdateEnvironmentInput, arg2 ...request.Option) (*datazone.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentWithContext indicates an expected call of UpdateEnvironmentWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateEnvironmentWithContext), varargs...)
}

// UpdateGlossary mocks base method
func (m *MockDataZoneAPI) UpdateGlossary(arg0 *datazone.UpdateGlossaryInput) (*datazone.UpdateGlossaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlossary", arg0)
	ret0, _ := ret[0].(*datazone.UpdateGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlossary indicates an expected call of UpdateGlossary
func (mr *MockDataZoneAPIMockRecorder) UpdateGlossary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlossary", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGlossary), arg0)
}

// UpdateGlossaryRequest mocks base method
func (m *MockDataZoneAPI) UpdateGlossaryRequest(arg0 *datazone.UpdateGlossaryInput) (*request.Request, *datazone.UpdateGlossaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlossaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateGlossaryOutput)
	return ret0, ret1
}

// UpdateGlossaryRequest indicates an expected call of UpdateGlossaryRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateGlossaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlossaryRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGlossaryRequest), arg0)
}

// UpdateGlossaryTerm mocks base method
func (m *MockDataZoneAPI) UpdateGlossaryTerm(arg0 *datazone.UpdateGlossaryTermInput) (*datazone.UpdateGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlossaryTerm", arg0)
	ret0, _ := ret[0].(*datazone.UpdateGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlossaryTerm indicates an expected call of UpdateGlossaryTerm
func (mr *MockDataZoneAPIMockRecorder) UpdateGlossaryTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlossaryTerm", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGlossaryTerm), arg0)
}

// UpdateGlossaryTermRequest mocks base method
func (m *MockDataZoneAPI) UpdateGlossaryTermRequest(arg0 *datazone.UpdateGlossaryTermInput) (*request.Request, *datazone.UpdateGlossaryTermOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlossaryTermRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateGlossaryTermOutput)
	return ret0, ret1
}

// UpdateGlossaryTermRequest indicates an expected call of UpdateGlossaryTermRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateGlossaryTermRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlossaryTermRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGlossaryTermRequest), arg0)
}

// UpdateGlossaryTermWithContext mocks base method
func (m *MockDataZoneAPI) UpdateGlossaryTermWithContext(arg0 context.Context, arg1 *datazone.UpdateGlossaryTermInput, arg2 ...request.Option) (*datazone.UpdateGlossaryTermOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlossaryTermWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateGlossaryTermOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlossaryTermWithContext indicates an expected call of UpdateGlossaryTermWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateGlossaryTermWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlossaryTermWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGlossaryTermWithContext), varargs...)
}

// UpdateGlossaryWithContext mocks base method
func (m *MockDataZoneAPI) UpdateGlossaryWithContext(arg0 context.Context, arg1 *datazone.UpdateGlossaryInput, arg2 ...request.Option) (*datazone.UpdateGlossaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlossaryWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateGlossaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlossaryWithContext indicates an expected call of UpdateGlossaryWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateGlossaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlossaryWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGlossaryWithContext), varargs...)
}

// UpdateGroupProfile mocks base method
func (m *MockDataZoneAPI) UpdateGroupProfile(arg0 *datazone.UpdateGroupProfileInput) (*datazone.UpdateGroupProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupProfile", arg0)
	ret0, _ := ret[0].(*datazone.UpdateGroupProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupProfile indicates an expected call of UpdateGroupProfile
func (mr *MockDataZoneAPIMockRecorder) UpdateGroupProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGroupProfile), arg0)
}

// UpdateGroupProfileRequest mocks base method
func (m *MockDataZoneAPI) UpdateGroupProfileRequest(arg0 *datazone.UpdateGroupProfileInput) (*request.Request, *datazone.UpdateGroupProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateGroupProfileOutput)
	return ret0, ret1
}

// UpdateGroupProfileRequest indicates an expected call of UpdateGroupProfileRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateGroupProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGroupProfileRequest), arg0)
}

// UpdateGroupProfileWithContext mocks base method
func (m *MockDataZoneAPI) UpdateGroupProfileWithContext(arg0 context.Context, arg1 *datazone.UpdateGroupProfileInput, arg2 ...request.Option) (*datazone.UpdateGroupProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateGroupProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupProfileWithContext indicates an expected call of UpdateGroupProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateGroupProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateGroupProfileWithContext), varargs...)
}

// UpdateProject mocks base method
func (m *MockDataZoneAPI) UpdateProject(arg0 *datazone.UpdateProjectInput) (*datazone.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0)
	ret0, _ := ret[0].(*datazone.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockDataZoneAPIMockRecorder) UpdateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateProject), arg0)
}

// UpdateProjectRequest mocks base method
func (m *MockDataZoneAPI) UpdateProjectRequest(arg0 *datazone.UpdateProjectInput) (*request.Request, *datazone.UpdateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateProjectOutput)
	return ret0, ret1
}

// UpdateProjectRequest indicates an expected call of UpdateProjectRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateProjectRequest), arg0)
}

// UpdateProjectWithContext mocks base method
func (m *MockDataZoneAPI) UpdateProjectWithContext(arg0 context.Context, arg1 *datazone.UpdateProjectInput, arg2 ...request.Option) (*datazone.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectWithContext indicates an expected call of UpdateProjectWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateProjectWithContext), varargs...)
}

// UpdateSubscriptionGrantStatus mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionGrantStatus(arg0 *datazone.UpdateSubscriptionGrantStatusInput) (*datazone.UpdateSubscriptionGrantStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionGrantStatus", arg0)
	ret0, _ := ret[0].(*datazone.UpdateSubscriptionGrantStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionGrantStatus indicates an expected call of UpdateSubscriptionGrantStatus
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionGrantStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionGrantStatus", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionGrantStatus), arg0)
}

// UpdateSubscriptionGrantStatusRequest mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionGrantStatusRequest(arg0 *datazone.UpdateSubscriptionGrantStatusInput) (*request.Request, *datazone.UpdateSubscriptionGrantStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionGrantStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateSubscriptionGrantStatusOutput)
	return ret0, ret1
}

// UpdateSubscriptionGrantStatusRequest indicates an expected call of UpdateSubscriptionGrantStatusRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionGrantStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionGrantStatusRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionGrantStatusRequest), arg0)
}

// UpdateSubscriptionGrantStatusWithContext mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionGrantStatusWithContext(arg0 context.Context, arg1 *datazone.UpdateSubscriptionGrantStatusInput, arg2 ...request.Option) (*datazone.UpdateSubscriptionGrantStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriptionGrantStatusWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateSubscriptionGrantStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionGrantStatusWithContext indicates an expected call of UpdateSubscriptionGrantStatusWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionGrantStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionGrantStatusWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionGrantStatusWithContext), varargs...)
}

// UpdateSubscriptionRequest mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionRequest(arg0 *datazone.UpdateSubscriptionRequestInput) (*datazone.UpdateSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*datazone.UpdateSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionRequest indicates an expected call of UpdateSubscriptionRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionRequest), arg0)
}

// UpdateSubscriptionRequestRequest mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionRequestRequest(arg0 *datazone.UpdateSubscriptionRequestInput) (*request.Request, *datazone.UpdateSubscriptionRequestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionRequestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateSubscriptionRequestOutput)
	return ret0, ret1
}

// UpdateSubscriptionRequestRequest indicates an expected call of UpdateSubscriptionRequestRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionRequestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionRequestRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionRequestRequest), arg0)
}

// UpdateSubscriptionRequestWithContext mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionRequestWithContext(arg0 context.Context, arg1 *datazone.UpdateSubscriptionRequestInput, arg2 ...request.Option) (*datazone.UpdateSubscriptionRequestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriptionRequestWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateSubscriptionRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionRequestWithContext indicates an expected call of UpdateSubscriptionRequestWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionRequestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionRequestWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionRequestWithContext), varargs...)
}

// UpdateSubscriptionTarget mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionTarget(arg0 *datazone.UpdateSubscriptionTargetInput) (*datazone.UpdateSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionTarget", arg0)
	ret0, _ := ret[0].(*datazone.UpdateSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionTarget indicates an expected call of UpdateSubscriptionTarget
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionTarget", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionTarget), arg0)
}

// UpdateSubscriptionTargetRequest mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionTargetRequest(arg0 *datazone.UpdateSubscriptionTargetInput) (*request.Request, *datazone.UpdateSubscriptionTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateSubscriptionTargetOutput)
	return ret0, ret1
}

// UpdateSubscriptionTargetRequest indicates an expected call of UpdateSubscriptionTargetRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionTargetRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionTargetRequest), arg0)
}

// UpdateSubscriptionTargetWithContext mocks base method
func (m *MockDataZoneAPI) UpdateSubscriptionTargetWithContext(arg0 context.Context, arg1 *datazone.UpdateSubscriptionTargetInput, arg2 ...request.Option) (*datazone.UpdateSubscriptionTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscriptionTargetWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateSubscriptionTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionTargetWithContext indicates an expected call of UpdateSubscriptionTargetWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateSubscriptionTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionTargetWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateSubscriptionTargetWithContext), varargs...)
}

// UpdateUserProfile mocks base method
func (m *MockDataZoneAPI) UpdateUserProfile(arg0 *datazone.UpdateUserProfileInput) (*datazone.UpdateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0)
	ret0, _ := ret[0].(*datazone.UpdateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile
func (mr *MockDataZoneAPIMockRecorder) UpdateUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateUserProfile), arg0)
}

// UpdateUserProfileRequest mocks base method
func (m *MockDataZoneAPI) UpdateUserProfileRequest(arg0 *datazone.UpdateUserProfileInput) (*request.Request, *datazone.UpdateUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datazone.UpdateUserProfileOutput)
	return ret0, ret1
}

// UpdateUserProfileRequest indicates an expected call of UpdateUserProfileRequest
func (mr *MockDataZoneAPIMockRecorder) UpdateUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfileRequest", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateUserProfileRequest), arg0)
}

// UpdateUserProfileWithContext mocks base method
func (m *MockDataZoneAPI) UpdateUserProfileWithContext(arg0 context.Context, arg1 *datazone.UpdateUserProfileInput, arg2 ...request.Option) (*datazone.UpdateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*datazone.UpdateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfileWithContext indicates an expected call of UpdateUserProfileWithContext
func (mr *MockDataZoneAPIMockRecorder) UpdateUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfileWithContext", reflect.TypeOf((*MockDataZoneAPI)(nil).UpdateUserProfileWithContext), varargs...)
}
