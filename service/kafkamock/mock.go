// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/kafka/kafkaiface (interfaces: KafkaAPI)

// Package kafkamock is a generated GoMock package.
package kafkamock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	kafka "github.com/aws/aws-sdk-go/service/kafka"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKafkaAPI is a mock of KafkaAPI interface
type MockKafkaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaAPIMockRecorder
}

// MockKafkaAPIMockRecorder is the mock recorder for MockKafkaAPI
type MockKafkaAPIMockRecorder struct {
	mock *MockKafkaAPI
}

// NewMockKafkaAPI creates a new mock instance
func NewMockKafkaAPI(ctrl *gomock.Controller) *MockKafkaAPI {
	mock := &MockKafkaAPI{ctrl: ctrl}
	mock.recorder = &MockKafkaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaAPI) EXPECT() *MockKafkaAPIMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method
func (m *MockKafkaAPI) CreateCluster(arg0 *kafka.CreateClusterInput) (*kafka.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0)
	ret0, _ := ret[0].(*kafka.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster
func (mr *MockKafkaAPIMockRecorder) CreateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockKafkaAPI)(nil).CreateCluster), arg0)
}

// CreateClusterRequest mocks base method
func (m *MockKafkaAPI) CreateClusterRequest(arg0 *kafka.CreateClusterInput) (*request.Request, *kafka.CreateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.CreateClusterOutput)
	return ret0, ret1
}

// CreateClusterRequest indicates an expected call of CreateClusterRequest
func (mr *MockKafkaAPIMockRecorder) CreateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRequest", reflect.TypeOf((*MockKafkaAPI)(nil).CreateClusterRequest), arg0)
}

// CreateClusterWithContext mocks base method
func (m *MockKafkaAPI) CreateClusterWithContext(arg0 aws.Context, arg1 *kafka.CreateClusterInput, arg2 ...request.Option) (*kafka.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterWithContext indicates an expected call of CreateClusterWithContext
func (mr *MockKafkaAPIMockRecorder) CreateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).CreateClusterWithContext), varargs...)
}

// DeleteCluster mocks base method
func (m *MockKafkaAPI) DeleteCluster(arg0 *kafka.DeleteClusterInput) (*kafka.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(*kafka.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster
func (mr *MockKafkaAPIMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteCluster), arg0)
}

// DeleteClusterRequest mocks base method
func (m *MockKafkaAPI) DeleteClusterRequest(arg0 *kafka.DeleteClusterInput) (*request.Request, *kafka.DeleteClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DeleteClusterOutput)
	return ret0, ret1
}

// DeleteClusterRequest indicates an expected call of DeleteClusterRequest
func (mr *MockKafkaAPIMockRecorder) DeleteClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteClusterRequest), arg0)
}

// DeleteClusterWithContext mocks base method
func (m *MockKafkaAPI) DeleteClusterWithContext(arg0 aws.Context, arg1 *kafka.DeleteClusterInput, arg2 ...request.Option) (*kafka.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterWithContext indicates an expected call of DeleteClusterWithContext
func (mr *MockKafkaAPIMockRecorder) DeleteClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteClusterWithContext), varargs...)
}

// DescribeCluster mocks base method
func (m *MockKafkaAPI) DescribeCluster(arg0 *kafka.DescribeClusterInput) (*kafka.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCluster", arg0)
	ret0, _ := ret[0].(*kafka.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCluster indicates an expected call of DescribeCluster
func (mr *MockKafkaAPIMockRecorder) DescribeCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCluster", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeCluster), arg0)
}

// DescribeClusterRequest mocks base method
func (m *MockKafkaAPI) DescribeClusterRequest(arg0 *kafka.DescribeClusterInput) (*request.Request, *kafka.DescribeClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DescribeClusterOutput)
	return ret0, ret1
}

// DescribeClusterRequest indicates an expected call of DescribeClusterRequest
func (mr *MockKafkaAPIMockRecorder) DescribeClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterRequest), arg0)
}

// DescribeClusterWithContext mocks base method
func (m *MockKafkaAPI) DescribeClusterWithContext(arg0 aws.Context, arg1 *kafka.DescribeClusterInput, arg2 ...request.Option) (*kafka.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterWithContext indicates an expected call of DescribeClusterWithContext
func (mr *MockKafkaAPIMockRecorder) DescribeClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterWithContext), varargs...)
}

// GetBootstrapBrokers mocks base method
func (m *MockKafkaAPI) GetBootstrapBrokers(arg0 *kafka.GetBootstrapBrokersInput) (*kafka.GetBootstrapBrokersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBootstrapBrokers", arg0)
	ret0, _ := ret[0].(*kafka.GetBootstrapBrokersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBootstrapBrokers indicates an expected call of GetBootstrapBrokers
func (mr *MockKafkaAPIMockRecorder) GetBootstrapBrokers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrapBrokers", reflect.TypeOf((*MockKafkaAPI)(nil).GetBootstrapBrokers), arg0)
}

// GetBootstrapBrokersRequest mocks base method
func (m *MockKafkaAPI) GetBootstrapBrokersRequest(arg0 *kafka.GetBootstrapBrokersInput) (*request.Request, *kafka.GetBootstrapBrokersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBootstrapBrokersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.GetBootstrapBrokersOutput)
	return ret0, ret1
}

// GetBootstrapBrokersRequest indicates an expected call of GetBootstrapBrokersRequest
func (mr *MockKafkaAPIMockRecorder) GetBootstrapBrokersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrapBrokersRequest", reflect.TypeOf((*MockKafkaAPI)(nil).GetBootstrapBrokersRequest), arg0)
}

// GetBootstrapBrokersWithContext mocks base method
func (m *MockKafkaAPI) GetBootstrapBrokersWithContext(arg0 aws.Context, arg1 *kafka.GetBootstrapBrokersInput, arg2 ...request.Option) (*kafka.GetBootstrapBrokersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBootstrapBrokersWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.GetBootstrapBrokersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBootstrapBrokersWithContext indicates an expected call of GetBootstrapBrokersWithContext
func (mr *MockKafkaAPIMockRecorder) GetBootstrapBrokersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrapBrokersWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).GetBootstrapBrokersWithContext), varargs...)
}

// ListClusters mocks base method
func (m *MockKafkaAPI) ListClusters(arg0 *kafka.ListClustersInput) (*kafka.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0)
	ret0, _ := ret[0].(*kafka.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *MockKafkaAPIMockRecorder) ListClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockKafkaAPI)(nil).ListClusters), arg0)
}

// ListClustersRequest mocks base method
func (m *MockKafkaAPI) ListClustersRequest(arg0 *kafka.ListClustersInput) (*request.Request, *kafka.ListClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListClustersOutput)
	return ret0, ret1
}

// ListClustersRequest indicates an expected call of ListClustersRequest
func (mr *MockKafkaAPIMockRecorder) ListClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersRequest), arg0)
}

// ListClustersWithContext mocks base method
func (m *MockKafkaAPI) ListClustersWithContext(arg0 aws.Context, arg1 *kafka.ListClustersInput, arg2 ...request.Option) (*kafka.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersWithContext indicates an expected call of ListClustersWithContext
func (mr *MockKafkaAPIMockRecorder) ListClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersWithContext), varargs...)
}

// ListNodes mocks base method
func (m *MockKafkaAPI) ListNodes(arg0 *kafka.ListNodesInput) (*kafka.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", arg0)
	ret0, _ := ret[0].(*kafka.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes
func (mr *MockKafkaAPIMockRecorder) ListNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodes), arg0)
}

// ListNodesRequest mocks base method
func (m *MockKafkaAPI) ListNodesRequest(arg0 *kafka.ListNodesInput) (*request.Request, *kafka.ListNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListNodesOutput)
	return ret0, ret1
}

// ListNodesRequest indicates an expected call of ListNodesRequest
func (mr *MockKafkaAPIMockRecorder) ListNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodesRequest), arg0)
}

// ListNodesWithContext mocks base method
func (m *MockKafkaAPI) ListNodesWithContext(arg0 aws.Context, arg1 *kafka.ListNodesInput, arg2 ...request.Option) (*kafka.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodesWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesWithContext indicates an expected call of ListNodesWithContext
func (mr *MockKafkaAPIMockRecorder) ListNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodesWithContext), varargs...)
}
