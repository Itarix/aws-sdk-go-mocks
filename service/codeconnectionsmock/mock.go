// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/codeconnections/codeconnectionsiface (interfaces: CodeConnectionsAPI)

// Package codeconnectionsmock is a generated GoMock package.
package codeconnectionsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	codeconnections "github.com/aws/aws-sdk-go/service/codeconnections"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeConnectionsAPI is a mock of CodeConnectionsAPI interface
type MockCodeConnectionsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeConnectionsAPIMockRecorder
}

// MockCodeConnectionsAPIMockRecorder is the mock recorder for MockCodeConnectionsAPI
type MockCodeConnectionsAPIMockRecorder struct {
	mock *MockCodeConnectionsAPI
}

// NewMockCodeConnectionsAPI creates a new mock instance
func NewMockCodeConnectionsAPI(ctrl *gomock.Controller) *MockCodeConnectionsAPI {
	mock := &MockCodeConnectionsAPI{ctrl: ctrl}
	mock.recorder = &MockCodeConnectionsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeConnectionsAPI) EXPECT() *MockCodeConnectionsAPIMockRecorder {
	return m.recorder
}

// CreateConnection mocks base method
func (m *MockCodeConnectionsAPI) CreateConnection(arg0 *codeconnections.CreateConnectionInput) (*codeconnections.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", arg0)
	ret0, _ := ret[0].(*codeconnections.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection
func (mr *MockCodeConnectionsAPIMockRecorder) CreateConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateConnection), arg0)
}

// CreateConnectionRequest mocks base method
func (m *MockCodeConnectionsAPI) CreateConnectionRequest(arg0 *codeconnections.CreateConnectionInput) (*request.Request, *codeconnections.CreateConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.CreateConnectionOutput)
	return ret0, ret1
}

// CreateConnectionRequest indicates an expected call of CreateConnectionRequest
func (mr *MockCodeConnectionsAPIMockRecorder) CreateConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateConnectionRequest), arg0)
}

// CreateConnectionWithContext mocks base method
func (m *MockCodeConnectionsAPI) CreateConnectionWithContext(arg0 context.Context, arg1 *codeconnections.CreateConnectionInput, arg2 ...request.Option) (*codeconnections.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectionWithContext indicates an expected call of CreateConnectionWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) CreateConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateConnectionWithContext), varargs...)
}

// CreateHost mocks base method
func (m *MockCodeConnectionsAPI) CreateHost(arg0 *codeconnections.CreateHostInput) (*codeconnections.CreateHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", arg0)
	ret0, _ := ret[0].(*codeconnections.CreateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost
func (mr *MockCodeConnectionsAPIMockRecorder) CreateHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHost", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateHost), arg0)
}

// CreateHostRequest mocks base method
func (m *MockCodeConnectionsAPI) CreateHostRequest(arg0 *codeconnections.CreateHostInput) (*request.Request, *codeconnections.CreateHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.CreateHostOutput)
	return ret0, ret1
}

// CreateHostRequest indicates an expected call of CreateHostRequest
func (mr *MockCodeConnectionsAPIMockRecorder) CreateHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateHostRequest), arg0)
}

// CreateHostWithContext mocks base method
func (m *MockCodeConnectionsAPI) CreateHostWithContext(arg0 context.Context, arg1 *codeconnections.CreateHostInput, arg2 ...request.Option) (*codeconnections.CreateHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHostWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.CreateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostWithContext indicates an expected call of CreateHostWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) CreateHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateHostWithContext), varargs...)
}

// CreateRepositoryLink mocks base method
func (m *MockCodeConnectionsAPI) CreateRepositoryLink(arg0 *codeconnections.CreateRepositoryLinkInput) (*codeconnections.CreateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryLink", arg0)
	ret0, _ := ret[0].(*codeconnections.CreateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryLink indicates an expected call of CreateRepositoryLink
func (mr *MockCodeConnectionsAPIMockRecorder) CreateRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryLink", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateRepositoryLink), arg0)
}

// CreateRepositoryLinkRequest mocks base method
func (m *MockCodeConnectionsAPI) CreateRepositoryLinkRequest(arg0 *codeconnections.CreateRepositoryLinkInput) (*request.Request, *codeconnections.CreateRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.CreateRepositoryLinkOutput)
	return ret0, ret1
}

// CreateRepositoryLinkRequest indicates an expected call of CreateRepositoryLinkRequest
func (mr *MockCodeConnectionsAPIMockRecorder) CreateRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryLinkRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateRepositoryLinkRequest), arg0)
}

// CreateRepositoryLinkWithContext mocks base method
func (m *MockCodeConnectionsAPI) CreateRepositoryLinkWithContext(arg0 context.Context, arg1 *codeconnections.CreateRepositoryLinkInput, arg2 ...request.Option) (*codeconnections.CreateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.CreateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryLinkWithContext indicates an expected call of CreateRepositoryLinkWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) CreateRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryLinkWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateRepositoryLinkWithContext), varargs...)
}

// CreateSyncConfiguration mocks base method
func (m *MockCodeConnectionsAPI) CreateSyncConfiguration(arg0 *codeconnections.CreateSyncConfigurationInput) (*codeconnections.CreateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codeconnections.CreateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncConfiguration indicates an expected call of CreateSyncConfiguration
func (mr *MockCodeConnectionsAPIMockRecorder) CreateSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncConfiguration", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateSyncConfiguration), arg0)
}

// CreateSyncConfigurationRequest mocks base method
func (m *MockCodeConnectionsAPI) CreateSyncConfigurationRequest(arg0 *codeconnections.CreateSyncConfigurationInput) (*request.Request, *codeconnections.CreateSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.CreateSyncConfigurationOutput)
	return ret0, ret1
}

// CreateSyncConfigurationRequest indicates an expected call of CreateSyncConfigurationRequest
func (mr *MockCodeConnectionsAPIMockRecorder) CreateSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncConfigurationRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateSyncConfigurationRequest), arg0)
}

// CreateSyncConfigurationWithContext mocks base method
func (m *MockCodeConnectionsAPI) CreateSyncConfigurationWithContext(arg0 context.Context, arg1 *codeconnections.CreateSyncConfigurationInput, arg2 ...request.Option) (*codeconnections.CreateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.CreateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncConfigurationWithContext indicates an expected call of CreateSyncConfigurationWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) CreateSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncConfigurationWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).CreateSyncConfigurationWithContext), varargs...)
}

// DeleteConnection mocks base method
func (m *MockCodeConnectionsAPI) DeleteConnection(arg0 *codeconnections.DeleteConnectionInput) (*codeconnections.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", arg0)
	ret0, _ := ret[0].(*codeconnections.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnection indicates an expected call of DeleteConnection
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteConnection), arg0)
}

// DeleteConnectionRequest mocks base method
func (m *MockCodeConnectionsAPI) DeleteConnectionRequest(arg0 *codeconnections.DeleteConnectionInput) (*request.Request, *codeconnections.DeleteConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.DeleteConnectionOutput)
	return ret0, ret1
}

// DeleteConnectionRequest indicates an expected call of DeleteConnectionRequest
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteConnectionRequest), arg0)
}

// DeleteConnectionWithContext mocks base method
func (m *MockCodeConnectionsAPI) DeleteConnectionWithContext(arg0 context.Context, arg1 *codeconnections.DeleteConnectionInput, arg2 ...request.Option) (*codeconnections.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectionWithContext indicates an expected call of DeleteConnectionWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteConnectionWithContext), varargs...)
}

// DeleteHost mocks base method
func (m *MockCodeConnectionsAPI) DeleteHost(arg0 *codeconnections.DeleteHostInput) (*codeconnections.DeleteHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", arg0)
	ret0, _ := ret[0].(*codeconnections.DeleteHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHost indicates an expected call of DeleteHost
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteHost), arg0)
}

// DeleteHostRequest mocks base method
func (m *MockCodeConnectionsAPI) DeleteHostRequest(arg0 *codeconnections.DeleteHostInput) (*request.Request, *codeconnections.DeleteHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.DeleteHostOutput)
	return ret0, ret1
}

// DeleteHostRequest indicates an expected call of DeleteHostRequest
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteHostRequest), arg0)
}

// DeleteHostWithContext mocks base method
func (m *MockCodeConnectionsAPI) DeleteHostWithContext(arg0 context.Context, arg1 *codeconnections.DeleteHostInput, arg2 ...request.Option) (*codeconnections.DeleteHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHostWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.DeleteHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostWithContext indicates an expected call of DeleteHostWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteHostWithContext), varargs...)
}

// DeleteRepositoryLink mocks base method
func (m *MockCodeConnectionsAPI) DeleteRepositoryLink(arg0 *codeconnections.DeleteRepositoryLinkInput) (*codeconnections.DeleteRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryLink", arg0)
	ret0, _ := ret[0].(*codeconnections.DeleteRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryLink indicates an expected call of DeleteRepositoryLink
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryLink", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteRepositoryLink), arg0)
}

// DeleteRepositoryLinkRequest mocks base method
func (m *MockCodeConnectionsAPI) DeleteRepositoryLinkRequest(arg0 *codeconnections.DeleteRepositoryLinkInput) (*request.Request, *codeconnections.DeleteRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.DeleteRepositoryLinkOutput)
	return ret0, ret1
}

// DeleteRepositoryLinkRequest indicates an expected call of DeleteRepositoryLinkRequest
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryLinkRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteRepositoryLinkRequest), arg0)
}

// DeleteRepositoryLinkWithContext mocks base method
func (m *MockCodeConnectionsAPI) DeleteRepositoryLinkWithContext(arg0 context.Context, arg1 *codeconnections.DeleteRepositoryLinkInput, arg2 ...request.Option) (*codeconnections.DeleteRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.DeleteRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryLinkWithContext indicates an expected call of DeleteRepositoryLinkWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryLinkWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteRepositoryLinkWithContext), varargs...)
}

// DeleteSyncConfiguration mocks base method
func (m *MockCodeConnectionsAPI) DeleteSyncConfiguration(arg0 *codeconnections.DeleteSyncConfigurationInput) (*codeconnections.DeleteSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codeconnections.DeleteSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSyncConfiguration indicates an expected call of DeleteSyncConfiguration
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncConfiguration", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteSyncConfiguration), arg0)
}

// DeleteSyncConfigurationRequest mocks base method
func (m *MockCodeConnectionsAPI) DeleteSyncConfigurationRequest(arg0 *codeconnections.DeleteSyncConfigurationInput) (*request.Request, *codeconnections.DeleteSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.DeleteSyncConfigurationOutput)
	return ret0, ret1
}

// DeleteSyncConfigurationRequest indicates an expected call of DeleteSyncConfigurationRequest
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncConfigurationRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteSyncConfigurationRequest), arg0)
}

// DeleteSyncConfigurationWithContext mocks base method
func (m *MockCodeConnectionsAPI) DeleteSyncConfigurationWithContext(arg0 context.Context, arg1 *codeconnections.DeleteSyncConfigurationInput, arg2 ...request.Option) (*codeconnections.DeleteSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.DeleteSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSyncConfigurationWithContext indicates an expected call of DeleteSyncConfigurationWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) DeleteSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncConfigurationWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).DeleteSyncConfigurationWithContext), varargs...)
}

// GetConnection mocks base method
func (m *MockCodeConnectionsAPI) GetConnection(arg0 *codeconnections.GetConnectionInput) (*codeconnections.GetConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", arg0)
	ret0, _ := ret[0].(*codeconnections.GetConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection
func (mr *MockCodeConnectionsAPIMockRecorder) GetConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetConnection), arg0)
}

// GetConnectionRequest mocks base method
func (m *MockCodeConnectionsAPI) GetConnectionRequest(arg0 *codeconnections.GetConnectionInput) (*request.Request, *codeconnections.GetConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.GetConnectionOutput)
	return ret0, ret1
}

// GetConnectionRequest indicates an expected call of GetConnectionRequest
func (mr *MockCodeConnectionsAPIMockRecorder) GetConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetConnectionRequest), arg0)
}

// GetConnectionWithContext mocks base method
func (m *MockCodeConnectionsAPI) GetConnectionWithContext(arg0 context.Context, arg1 *codeconnections.GetConnectionInput, arg2 ...request.Option) (*codeconnections.GetConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.GetConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionWithContext indicates an expected call of GetConnectionWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) GetConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetConnectionWithContext), varargs...)
}

// GetHost mocks base method
func (m *MockCodeConnectionsAPI) GetHost(arg0 *codeconnections.GetHostInput) (*codeconnections.GetHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", arg0)
	ret0, _ := ret[0].(*codeconnections.GetHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost
func (mr *MockCodeConnectionsAPIMockRecorder) GetHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetHost), arg0)
}

// GetHostRequest mocks base method
func (m *MockCodeConnectionsAPI) GetHostRequest(arg0 *codeconnections.GetHostInput) (*request.Request, *codeconnections.GetHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.GetHostOutput)
	return ret0, ret1
}

// GetHostRequest indicates an expected call of GetHostRequest
func (mr *MockCodeConnectionsAPIMockRecorder) GetHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetHostRequest), arg0)
}

// GetHostWithContext mocks base method
func (m *MockCodeConnectionsAPI) GetHostWithContext(arg0 context.Context, arg1 *codeconnections.GetHostInput, arg2 ...request.Option) (*codeconnections.GetHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.GetHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostWithContext indicates an expected call of GetHostWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) GetHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetHostWithContext), varargs...)
}

// GetRepositoryLink mocks base method
func (m *MockCodeConnectionsAPI) GetRepositoryLink(arg0 *codeconnections.GetRepositoryLinkInput) (*codeconnections.GetRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryLink", arg0)
	ret0, _ := ret[0].(*codeconnections.GetRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryLink indicates an expected call of GetRepositoryLink
func (mr *MockCodeConnectionsAPIMockRecorder) GetRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryLink", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetRepositoryLink), arg0)
}

// GetRepositoryLinkRequest mocks base method
func (m *MockCodeConnectionsAPI) GetRepositoryLinkRequest(arg0 *codeconnections.GetRepositoryLinkInput) (*request.Request, *codeconnections.GetRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.GetRepositoryLinkOutput)
	return ret0, ret1
}

// GetRepositoryLinkRequest indicates an expected call of GetRepositoryLinkRequest
func (mr *MockCodeConnectionsAPIMockRecorder) GetRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryLinkRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetRepositoryLinkRequest), arg0)
}

// GetRepositoryLinkWithContext mocks base method
func (m *MockCodeConnectionsAPI) GetRepositoryLinkWithContext(arg0 context.Context, arg1 *codeconnections.GetRepositoryLinkInput, arg2 ...request.Option) (*codeconnections.GetRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.GetRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryLinkWithContext indicates an expected call of GetRepositoryLinkWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) GetRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryLinkWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetRepositoryLinkWithContext), varargs...)
}

// GetRepositorySyncStatus mocks base method
func (m *MockCodeConnectionsAPI) GetRepositorySyncStatus(arg0 *codeconnections.GetRepositorySyncStatusInput) (*codeconnections.GetRepositorySyncStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositorySyncStatus", arg0)
	ret0, _ := ret[0].(*codeconnections.GetRepositorySyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositorySyncStatus indicates an expected call of GetRepositorySyncStatus
func (mr *MockCodeConnectionsAPIMockRecorder) GetRepositorySyncStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySyncStatus", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetRepositorySyncStatus), arg0)
}

// GetRepositorySyncStatusRequest mocks base method
func (m *MockCodeConnectionsAPI) GetRepositorySyncStatusRequest(arg0 *codeconnections.GetRepositorySyncStatusInput) (*request.Request, *codeconnections.GetRepositorySyncStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositorySyncStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.GetRepositorySyncStatusOutput)
	return ret0, ret1
}

// GetRepositorySyncStatusRequest indicates an expected call of GetRepositorySyncStatusRequest
func (mr *MockCodeConnectionsAPIMockRecorder) GetRepositorySyncStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySyncStatusRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetRepositorySyncStatusRequest), arg0)
}

// GetRepositorySyncStatusWithContext mocks base method
func (m *MockCodeConnectionsAPI) GetRepositorySyncStatusWithContext(arg0 context.Context, arg1 *codeconnections.GetRepositorySyncStatusInput, arg2 ...request.Option) (*codeconnections.GetRepositorySyncStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositorySyncStatusWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.GetRepositorySyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositorySyncStatusWithContext indicates an expected call of GetRepositorySyncStatusWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) GetRepositorySyncStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositorySyncStatusWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetRepositorySyncStatusWithContext), varargs...)
}

// GetResourceSyncStatus mocks base method
func (m *MockCodeConnectionsAPI) GetResourceSyncStatus(arg0 *codeconnections.GetResourceSyncStatusInput) (*codeconnections.GetResourceSyncStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSyncStatus", arg0)
	ret0, _ := ret[0].(*codeconnections.GetResourceSyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSyncStatus indicates an expected call of GetResourceSyncStatus
func (mr *MockCodeConnectionsAPIMockRecorder) GetResourceSyncStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSyncStatus", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetResourceSyncStatus), arg0)
}

// GetResourceSyncStatusRequest mocks base method
func (m *MockCodeConnectionsAPI) GetResourceSyncStatusRequest(arg0 *codeconnections.GetResourceSyncStatusInput) (*request.Request, *codeconnections.GetResourceSyncStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSyncStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.GetResourceSyncStatusOutput)
	return ret0, ret1
}

// GetResourceSyncStatusRequest indicates an expected call of GetResourceSyncStatusRequest
func (mr *MockCodeConnectionsAPIMockRecorder) GetResourceSyncStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSyncStatusRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetResourceSyncStatusRequest), arg0)
}

// GetResourceSyncStatusWithContext mocks base method
func (m *MockCodeConnectionsAPI) GetResourceSyncStatusWithContext(arg0 context.Context, arg1 *codeconnections.GetResourceSyncStatusInput, arg2 ...request.Option) (*codeconnections.GetResourceSyncStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceSyncStatusWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.GetResourceSyncStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSyncStatusWithContext indicates an expected call of GetResourceSyncStatusWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) GetResourceSyncStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSyncStatusWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetResourceSyncStatusWithContext), varargs...)
}

// GetSyncBlockerSummary mocks base method
func (m *MockCodeConnectionsAPI) GetSyncBlockerSummary(arg0 *codeconnections.GetSyncBlockerSummaryInput) (*codeconnections.GetSyncBlockerSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncBlockerSummary", arg0)
	ret0, _ := ret[0].(*codeconnections.GetSyncBlockerSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncBlockerSummary indicates an expected call of GetSyncBlockerSummary
func (mr *MockCodeConnectionsAPIMockRecorder) GetSyncBlockerSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncBlockerSummary", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetSyncBlockerSummary), arg0)
}

// GetSyncBlockerSummaryRequest mocks base method
func (m *MockCodeConnectionsAPI) GetSyncBlockerSummaryRequest(arg0 *codeconnections.GetSyncBlockerSummaryInput) (*request.Request, *codeconnections.GetSyncBlockerSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncBlockerSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.GetSyncBlockerSummaryOutput)
	return ret0, ret1
}

// GetSyncBlockerSummaryRequest indicates an expected call of GetSyncBlockerSummaryRequest
func (mr *MockCodeConnectionsAPIMockRecorder) GetSyncBlockerSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncBlockerSummaryRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetSyncBlockerSummaryRequest), arg0)
}

// GetSyncBlockerSummaryWithContext mocks base method
func (m *MockCodeConnectionsAPI) GetSyncBlockerSummaryWithContext(arg0 context.Context, arg1 *codeconnections.GetSyncBlockerSummaryInput, arg2 ...request.Option) (*codeconnections.GetSyncBlockerSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSyncBlockerSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.GetSyncBlockerSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncBlockerSummaryWithContext indicates an expected call of GetSyncBlockerSummaryWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) GetSyncBlockerSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncBlockerSummaryWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetSyncBlockerSummaryWithContext), varargs...)
}

// GetSyncConfiguration mocks base method
func (m *MockCodeConnectionsAPI) GetSyncConfiguration(arg0 *codeconnections.GetSyncConfigurationInput) (*codeconnections.GetSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codeconnections.GetSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncConfiguration indicates an expected call of GetSyncConfiguration
func (mr *MockCodeConnectionsAPIMockRecorder) GetSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncConfiguration", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetSyncConfiguration), arg0)
}

// GetSyncConfigurationRequest mocks base method
func (m *MockCodeConnectionsAPI) GetSyncConfigurationRequest(arg0 *codeconnections.GetSyncConfigurationInput) (*request.Request, *codeconnections.GetSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.GetSyncConfigurationOutput)
	return ret0, ret1
}

// GetSyncConfigurationRequest indicates an expected call of GetSyncConfigurationRequest
func (mr *MockCodeConnectionsAPIMockRecorder) GetSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncConfigurationRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetSyncConfigurationRequest), arg0)
}

// GetSyncConfigurationWithContext mocks base method
func (m *MockCodeConnectionsAPI) GetSyncConfigurationWithContext(arg0 context.Context, arg1 *codeconnections.GetSyncConfigurationInput, arg2 ...request.Option) (*codeconnections.GetSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.GetSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncConfigurationWithContext indicates an expected call of GetSyncConfigurationWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) GetSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncConfigurationWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).GetSyncConfigurationWithContext), varargs...)
}

// ListConnections mocks base method
func (m *MockCodeConnectionsAPI) ListConnections(arg0 *codeconnections.ListConnectionsInput) (*codeconnections.ListConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnections", arg0)
	ret0, _ := ret[0].(*codeconnections.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections
func (mr *MockCodeConnectionsAPIMockRecorder) ListConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListConnections), arg0)
}

// ListConnectionsPages mocks base method
func (m *MockCodeConnectionsAPI) ListConnectionsPages(arg0 *codeconnections.ListConnectionsInput, arg1 func(*codeconnections.ListConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectionsPages indicates an expected call of ListConnectionsPages
func (mr *MockCodeConnectionsAPIMockRecorder) ListConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsPages", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListConnectionsPages), arg0, arg1)
}

// ListConnectionsPagesWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListConnectionsPagesWithContext(arg0 context.Context, arg1 *codeconnections.ListConnectionsInput, arg2 func(*codeconnections.ListConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectionsPagesWithContext indicates an expected call of ListConnectionsPagesWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsPagesWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListConnectionsPagesWithContext), varargs...)
}

// ListConnectionsRequest mocks base method
func (m *MockCodeConnectionsAPI) ListConnectionsRequest(arg0 *codeconnections.ListConnectionsInput) (*request.Request, *codeconnections.ListConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.ListConnectionsOutput)
	return ret0, ret1
}

// ListConnectionsRequest indicates an expected call of ListConnectionsRequest
func (mr *MockCodeConnectionsAPIMockRecorder) ListConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListConnectionsRequest), arg0)
}

// ListConnectionsWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListConnectionsWithContext(arg0 context.Context, arg1 *codeconnections.ListConnectionsInput, arg2 ...request.Option) (*codeconnections.ListConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectionsWithContext indicates an expected call of ListConnectionsWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListConnectionsWithContext), varargs...)
}

// ListHosts mocks base method
func (m *MockCodeConnectionsAPI) ListHosts(arg0 *codeconnections.ListHostsInput) (*codeconnections.ListHostsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHosts", arg0)
	ret0, _ := ret[0].(*codeconnections.ListHostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHosts indicates an expected call of ListHosts
func (mr *MockCodeConnectionsAPIMockRecorder) ListHosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHosts", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListHosts), arg0)
}

// ListHostsPages mocks base method
func (m *MockCodeConnectionsAPI) ListHostsPages(arg0 *codeconnections.ListHostsInput, arg1 func(*codeconnections.ListHostsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHostsPages indicates an expected call of ListHostsPages
func (mr *MockCodeConnectionsAPIMockRecorder) ListHostsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsPages", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListHostsPages), arg0, arg1)
}

// ListHostsPagesWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListHostsPagesWithContext(arg0 context.Context, arg1 *codeconnections.ListHostsInput, arg2 func(*codeconnections.ListHostsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHostsPagesWithContext indicates an expected call of ListHostsPagesWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListHostsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsPagesWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListHostsPagesWithContext), varargs...)
}

// ListHostsRequest mocks base method
func (m *MockCodeConnectionsAPI) ListHostsRequest(arg0 *codeconnections.ListHostsInput) (*request.Request, *codeconnections.ListHostsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.ListHostsOutput)
	return ret0, ret1
}

// ListHostsRequest indicates an expected call of ListHostsRequest
func (mr *MockCodeConnectionsAPIMockRecorder) ListHostsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListHostsRequest), arg0)
}

// ListHostsWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListHostsWithContext(arg0 context.Context, arg1 *codeconnections.ListHostsInput, arg2 ...request.Option) (*codeconnections.ListHostsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostsWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.ListHostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostsWithContext indicates an expected call of ListHostsWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListHostsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostsWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListHostsWithContext), varargs...)
}

// ListRepositoryLinks mocks base method
func (m *MockCodeConnectionsAPI) ListRepositoryLinks(arg0 *codeconnections.ListRepositoryLinksInput) (*codeconnections.ListRepositoryLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryLinks", arg0)
	ret0, _ := ret[0].(*codeconnections.ListRepositoryLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryLinks indicates an expected call of ListRepositoryLinks
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositoryLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinks", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositoryLinks), arg0)
}

// ListRepositoryLinksPages mocks base method
func (m *MockCodeConnectionsAPI) ListRepositoryLinksPages(arg0 *codeconnections.ListRepositoryLinksInput, arg1 func(*codeconnections.ListRepositoryLinksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryLinksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoryLinksPages indicates an expected call of ListRepositoryLinksPages
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositoryLinksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksPages", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositoryLinksPages), arg0, arg1)
}

// ListRepositoryLinksPagesWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListRepositoryLinksPagesWithContext(arg0 context.Context, arg1 *codeconnections.ListRepositoryLinksInput, arg2 func(*codeconnections.ListRepositoryLinksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoryLinksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositoryLinksPagesWithContext indicates an expected call of ListRepositoryLinksPagesWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositoryLinksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksPagesWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositoryLinksPagesWithContext), varargs...)
}

// ListRepositoryLinksRequest mocks base method
func (m *MockCodeConnectionsAPI) ListRepositoryLinksRequest(arg0 *codeconnections.ListRepositoryLinksInput) (*request.Request, *codeconnections.ListRepositoryLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.ListRepositoryLinksOutput)
	return ret0, ret1
}

// ListRepositoryLinksRequest indicates an expected call of ListRepositoryLinksRequest
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositoryLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositoryLinksRequest), arg0)
}

// ListRepositoryLinksWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListRepositoryLinksWithContext(arg0 context.Context, arg1 *codeconnections.ListRepositoryLinksInput, arg2 ...request.Option) (*codeconnections.ListRepositoryLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositoryLinksWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.ListRepositoryLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryLinksWithContext indicates an expected call of ListRepositoryLinksWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositoryLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryLinksWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositoryLinksWithContext), varargs...)
}

// ListRepositorySyncDefinitions mocks base method
func (m *MockCodeConnectionsAPI) ListRepositorySyncDefinitions(arg0 *codeconnections.ListRepositorySyncDefinitionsInput) (*codeconnections.ListRepositorySyncDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositorySyncDefinitions", arg0)
	ret0, _ := ret[0].(*codeconnections.ListRepositorySyncDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositorySyncDefinitions indicates an expected call of ListRepositorySyncDefinitions
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositorySyncDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositorySyncDefinitions", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositorySyncDefinitions), arg0)
}

// ListRepositorySyncDefinitionsRequest mocks base method
func (m *MockCodeConnectionsAPI) ListRepositorySyncDefinitionsRequest(arg0 *codeconnections.ListRepositorySyncDefinitionsInput) (*request.Request, *codeconnections.ListRepositorySyncDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositorySyncDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.ListRepositorySyncDefinitionsOutput)
	return ret0, ret1
}

// ListRepositorySyncDefinitionsRequest indicates an expected call of ListRepositorySyncDefinitionsRequest
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositorySyncDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositorySyncDefinitionsRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositorySyncDefinitionsRequest), arg0)
}

// ListRepositorySyncDefinitionsWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListRepositorySyncDefinitionsWithContext(arg0 context.Context, arg1 *codeconnections.ListRepositorySyncDefinitionsInput, arg2 ...request.Option) (*codeconnections.ListRepositorySyncDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositorySyncDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.ListRepositorySyncDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositorySyncDefinitionsWithContext indicates an expected call of ListRepositorySyncDefinitionsWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListRepositorySyncDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositorySyncDefinitionsWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListRepositorySyncDefinitionsWithContext), varargs...)
}

// ListSyncConfigurations mocks base method
func (m *MockCodeConnectionsAPI) ListSyncConfigurations(arg0 *codeconnections.ListSyncConfigurationsInput) (*codeconnections.ListSyncConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncConfigurations", arg0)
	ret0, _ := ret[0].(*codeconnections.ListSyncConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncConfigurations indicates an expected call of ListSyncConfigurations
func (mr *MockCodeConnectionsAPIMockRecorder) ListSyncConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurations", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListSyncConfigurations), arg0)
}

// ListSyncConfigurationsPages mocks base method
func (m *MockCodeConnectionsAPI) ListSyncConfigurationsPages(arg0 *codeconnections.ListSyncConfigurationsInput, arg1 func(*codeconnections.ListSyncConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSyncConfigurationsPages indicates an expected call of ListSyncConfigurationsPages
func (mr *MockCodeConnectionsAPIMockRecorder) ListSyncConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsPages", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListSyncConfigurationsPages), arg0, arg1)
}

// ListSyncConfigurationsPagesWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListSyncConfigurationsPagesWithContext(arg0 context.Context, arg1 *codeconnections.ListSyncConfigurationsInput, arg2 func(*codeconnections.ListSyncConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSyncConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSyncConfigurationsPagesWithContext indicates an expected call of ListSyncConfigurationsPagesWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListSyncConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsPagesWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListSyncConfigurationsPagesWithContext), varargs...)
}

// ListSyncConfigurationsRequest mocks base method
func (m *MockCodeConnectionsAPI) ListSyncConfigurationsRequest(arg0 *codeconnections.ListSyncConfigurationsInput) (*request.Request, *codeconnections.ListSyncConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.ListSyncConfigurationsOutput)
	return ret0, ret1
}

// ListSyncConfigurationsRequest indicates an expected call of ListSyncConfigurationsRequest
func (mr *MockCodeConnectionsAPIMockRecorder) ListSyncConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListSyncConfigurationsRequest), arg0)
}

// ListSyncConfigurationsWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListSyncConfigurationsWithContext(arg0 context.Context, arg1 *codeconnections.ListSyncConfigurationsInput, arg2 ...request.Option) (*codeconnections.ListSyncConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSyncConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.ListSyncConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncConfigurationsWithContext indicates an expected call of ListSyncConfigurationsWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListSyncConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncConfigurationsWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListSyncConfigurationsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCodeConnectionsAPI) ListTagsForResource(arg0 *codeconnections.ListTagsForResourceInput) (*codeconnections.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*codeconnections.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCodeConnectionsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCodeConnectionsAPI) ListTagsForResourceRequest(arg0 *codeconnections.ListTagsForResourceInput) (*request.Request, *codeconnections.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCodeConnectionsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCodeConnectionsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *codeconnections.ListTagsForResourceInput, arg2 ...request.Option) (*codeconnections.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCodeConnectionsAPI) TagResource(arg0 *codeconnections.TagResourceInput) (*codeconnections.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*codeconnections.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCodeConnectionsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCodeConnectionsAPI) TagResourceRequest(arg0 *codeconnections.TagResourceInput) (*request.Request, *codeconnections.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCodeConnectionsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCodeConnectionsAPI) TagResourceWithContext(arg0 context.Context, arg1 *codeconnections.TagResourceInput, arg2 ...request.Option) (*codeconnections.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCodeConnectionsAPI) UntagResource(arg0 *codeconnections.UntagResourceInput) (*codeconnections.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*codeconnections.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCodeConnectionsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCodeConnectionsAPI) UntagResourceRequest(arg0 *codeconnections.UntagResourceInput) (*request.Request, *codeconnections.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCodeConnectionsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCodeConnectionsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *codeconnections.UntagResourceInput, arg2 ...request.Option) (*codeconnections.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateHost mocks base method
func (m *MockCodeConnectionsAPI) UpdateHost(arg0 *codeconnections.UpdateHostInput) (*codeconnections.UpdateHostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHost", arg0)
	ret0, _ := ret[0].(*codeconnections.UpdateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHost indicates an expected call of UpdateHost
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHost", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateHost), arg0)
}

// UpdateHostRequest mocks base method
func (m *MockCodeConnectionsAPI) UpdateHostRequest(arg0 *codeconnections.UpdateHostInput) (*request.Request, *codeconnections.UpdateHostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.UpdateHostOutput)
	return ret0, ret1
}

// UpdateHostRequest indicates an expected call of UpdateHostRequest
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateHostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateHostRequest), arg0)
}

// UpdateHostWithContext mocks base method
func (m *MockCodeConnectionsAPI) UpdateHostWithContext(arg0 context.Context, arg1 *codeconnections.UpdateHostInput, arg2 ...request.Option) (*codeconnections.UpdateHostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHostWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.UpdateHostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostWithContext indicates an expected call of UpdateHostWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateHostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateHostWithContext), varargs...)
}

// UpdateRepositoryLink mocks base method
func (m *MockCodeConnectionsAPI) UpdateRepositoryLink(arg0 *codeconnections.UpdateRepositoryLinkInput) (*codeconnections.UpdateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryLink", arg0)
	ret0, _ := ret[0].(*codeconnections.UpdateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryLink indicates an expected call of UpdateRepositoryLink
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateRepositoryLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryLink", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateRepositoryLink), arg0)
}

// UpdateRepositoryLinkRequest mocks base method
func (m *MockCodeConnectionsAPI) UpdateRepositoryLinkRequest(arg0 *codeconnections.UpdateRepositoryLinkInput) (*request.Request, *codeconnections.UpdateRepositoryLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.UpdateRepositoryLinkOutput)
	return ret0, ret1
}

// UpdateRepositoryLinkRequest indicates an expected call of UpdateRepositoryLinkRequest
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateRepositoryLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryLinkRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateRepositoryLinkRequest), arg0)
}

// UpdateRepositoryLinkWithContext mocks base method
func (m *MockCodeConnectionsAPI) UpdateRepositoryLinkWithContext(arg0 context.Context, arg1 *codeconnections.UpdateRepositoryLinkInput, arg2 ...request.Option) (*codeconnections.UpdateRepositoryLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRepositoryLinkWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.UpdateRepositoryLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryLinkWithContext indicates an expected call of UpdateRepositoryLinkWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateRepositoryLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryLinkWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateRepositoryLinkWithContext), varargs...)
}

// UpdateSyncBlocker mocks base method
func (m *MockCodeConnectionsAPI) UpdateSyncBlocker(arg0 *codeconnections.UpdateSyncBlockerInput) (*codeconnections.UpdateSyncBlockerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncBlocker", arg0)
	ret0, _ := ret[0].(*codeconnections.UpdateSyncBlockerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncBlocker indicates an expected call of UpdateSyncBlocker
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateSyncBlocker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncBlocker", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateSyncBlocker), arg0)
}

// UpdateSyncBlockerRequest mocks base method
func (m *MockCodeConnectionsAPI) UpdateSyncBlockerRequest(arg0 *codeconnections.UpdateSyncBlockerInput) (*request.Request, *codeconnections.UpdateSyncBlockerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncBlockerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.UpdateSyncBlockerOutput)
	return ret0, ret1
}

// UpdateSyncBlockerRequest indicates an expected call of UpdateSyncBlockerRequest
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateSyncBlockerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncBlockerRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateSyncBlockerRequest), arg0)
}

// UpdateSyncBlockerWithContext mocks base method
func (m *MockCodeConnectionsAPI) UpdateSyncBlockerWithContext(arg0 context.Context, arg1 *codeconnections.UpdateSyncBlockerInput, arg2 ...request.Option) (*codeconnections.UpdateSyncBlockerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSyncBlockerWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.UpdateSyncBlockerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncBlockerWithContext indicates an expected call of UpdateSyncBlockerWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateSyncBlockerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncBlockerWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateSyncBlockerWithContext), varargs...)
}

// UpdateSyncConfiguration mocks base method
func (m *MockCodeConnectionsAPI) UpdateSyncConfiguration(arg0 *codeconnections.UpdateSyncConfigurationInput) (*codeconnections.UpdateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncConfiguration", arg0)
	ret0, _ := ret[0].(*codeconnections.UpdateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncConfiguration indicates an expected call of UpdateSyncConfiguration
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateSyncConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncConfiguration", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateSyncConfiguration), arg0)
}

// UpdateSyncConfigurationRequest mocks base method
func (m *MockCodeConnectionsAPI) UpdateSyncConfigurationRequest(arg0 *codeconnections.UpdateSyncConfigurationInput) (*request.Request, *codeconnections.UpdateSyncConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeconnections.UpdateSyncConfigurationOutput)
	return ret0, ret1
}

// UpdateSyncConfigurationRequest indicates an expected call of UpdateSyncConfigurationRequest
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateSyncConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncConfigurationRequest", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateSyncConfigurationRequest), arg0)
}

// UpdateSyncConfigurationWithContext mocks base method
func (m *MockCodeConnectionsAPI) UpdateSyncConfigurationWithContext(arg0 context.Context, arg1 *codeconnections.UpdateSyncConfigurationInput, arg2 ...request.Option) (*codeconnections.UpdateSyncConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSyncConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codeconnections.UpdateSyncConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncConfigurationWithContext indicates an expected call of UpdateSyncConfigurationWithContext
func (mr *MockCodeConnectionsAPIMockRecorder) UpdateSyncConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncConfigurationWithContext", reflect.TypeOf((*MockCodeConnectionsAPI)(nil).UpdateSyncConfigurationWithContext), varargs...)
}
