// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/licensemanagerlinuxsubscriptions/licensemanagerlinuxsubscriptionsiface (interfaces: LicenseManagerLinuxSubscriptionsAPI)

// Package licensemanagerlinuxsubscriptionsmock is a generated GoMock package.
package licensemanagerlinuxsubscriptionsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	licensemanagerlinuxsubscriptions "github.com/aws/aws-sdk-go/service/licensemanagerlinuxsubscriptions"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLicenseManagerLinuxSubscriptionsAPI is a mock of LicenseManagerLinuxSubscriptionsAPI interface
type MockLicenseManagerLinuxSubscriptionsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder
}

// MockLicenseManagerLinuxSubscriptionsAPIMockRecorder is the mock recorder for MockLicenseManagerLinuxSubscriptionsAPI
type MockLicenseManagerLinuxSubscriptionsAPIMockRecorder struct {
	mock *MockLicenseManagerLinuxSubscriptionsAPI
}

// NewMockLicenseManagerLinuxSubscriptionsAPI creates a new mock instance
func NewMockLicenseManagerLinuxSubscriptionsAPI(ctrl *gomock.Controller) *MockLicenseManagerLinuxSubscriptionsAPI {
	mock := &MockLicenseManagerLinuxSubscriptionsAPI{ctrl: ctrl}
	mock.recorder = &MockLicenseManagerLinuxSubscriptionsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicenseManagerLinuxSubscriptionsAPI) EXPECT() *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder {
	return m.recorder
}

// DeregisterSubscriptionProvider mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) DeregisterSubscriptionProvider(arg0 *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput) (*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterSubscriptionProvider", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterSubscriptionProvider indicates an expected call of DeregisterSubscriptionProvider
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) DeregisterSubscriptionProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterSubscriptionProvider", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).DeregisterSubscriptionProvider), arg0)
}

// DeregisterSubscriptionProviderRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) DeregisterSubscriptionProviderRequest(arg0 *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput) (*request.Request, *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterSubscriptionProviderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput)
	return ret0, ret1
}

// DeregisterSubscriptionProviderRequest indicates an expected call of DeregisterSubscriptionProviderRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) DeregisterSubscriptionProviderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterSubscriptionProviderRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).DeregisterSubscriptionProviderRequest), arg0)
}

// DeregisterSubscriptionProviderWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) DeregisterSubscriptionProviderWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterSubscriptionProviderWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterSubscriptionProviderWithContext indicates an expected call of DeregisterSubscriptionProviderWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) DeregisterSubscriptionProviderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterSubscriptionProviderWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).DeregisterSubscriptionProviderWithContext), varargs...)
}

// GetRegisteredSubscriptionProvider mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) GetRegisteredSubscriptionProvider(arg0 *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput) (*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredSubscriptionProvider", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredSubscriptionProvider indicates an expected call of GetRegisteredSubscriptionProvider
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) GetRegisteredSubscriptionProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredSubscriptionProvider", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).GetRegisteredSubscriptionProvider), arg0)
}

// GetRegisteredSubscriptionProviderRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) GetRegisteredSubscriptionProviderRequest(arg0 *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput) (*request.Request, *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredSubscriptionProviderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput)
	return ret0, ret1
}

// GetRegisteredSubscriptionProviderRequest indicates an expected call of GetRegisteredSubscriptionProviderRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) GetRegisteredSubscriptionProviderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredSubscriptionProviderRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).GetRegisteredSubscriptionProviderRequest), arg0)
}

// GetRegisteredSubscriptionProviderWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) GetRegisteredSubscriptionProviderWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisteredSubscriptionProviderWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredSubscriptionProviderWithContext indicates an expected call of GetRegisteredSubscriptionProviderWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) GetRegisteredSubscriptionProviderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredSubscriptionProviderWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).GetRegisteredSubscriptionProviderWithContext), varargs...)
}

// GetServiceSettings mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) GetServiceSettings(arg0 *licensemanagerlinuxsubscriptions.GetServiceSettingsInput) (*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceSettings", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSettings indicates an expected call of GetServiceSettings
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) GetServiceSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettings", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).GetServiceSettings), arg0)
}

// GetServiceSettingsRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) GetServiceSettingsRequest(arg0 *licensemanagerlinuxsubscriptions.GetServiceSettingsInput) (*request.Request, *licensemanagerlinuxsubscriptions.GetServiceSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput)
	return ret0, ret1
}

// GetServiceSettingsRequest indicates an expected call of GetServiceSettingsRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) GetServiceSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettingsRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).GetServiceSettingsRequest), arg0)
}

// GetServiceSettingsWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) GetServiceSettingsWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.GetServiceSettingsInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSettingsWithContext indicates an expected call of GetServiceSettingsWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) GetServiceSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSettingsWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).GetServiceSettingsWithContext), varargs...)
}

// ListLinuxSubscriptionInstances mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionInstances(arg0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionInstances", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinuxSubscriptionInstances indicates an expected call of ListLinuxSubscriptionInstances
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionInstances", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionInstances), arg0)
}

// ListLinuxSubscriptionInstancesPages mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionInstancesPages(arg0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, arg1 func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLinuxSubscriptionInstancesPages indicates an expected call of ListLinuxSubscriptionInstancesPages
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionInstancesPages", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionInstancesPages), arg0, arg1)
}

// ListLinuxSubscriptionInstancesPagesWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionInstancesPagesWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, arg2 func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLinuxSubscriptionInstancesPagesWithContext indicates an expected call of ListLinuxSubscriptionInstancesPagesWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionInstancesPagesWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionInstancesPagesWithContext), varargs...)
}

// ListLinuxSubscriptionInstancesRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionInstancesRequest(arg0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput)
	return ret0, ret1
}

// ListLinuxSubscriptionInstancesRequest indicates an expected call of ListLinuxSubscriptionInstancesRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionInstancesRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionInstancesRequest), arg0)
}

// ListLinuxSubscriptionInstancesWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionInstancesWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinuxSubscriptionInstancesWithContext indicates an expected call of ListLinuxSubscriptionInstancesWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionInstancesWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionInstancesWithContext), varargs...)
}

// ListLinuxSubscriptions mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptions(arg0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinuxSubscriptions", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinuxSubscriptions indicates an expected call of ListLinuxSubscriptions
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptions", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptions), arg0)
}

// ListLinuxSubscriptionsPages mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionsPages(arg0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, arg1 func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLinuxSubscriptionsPages indicates an expected call of ListLinuxSubscriptionsPages
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionsPages", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionsPages), arg0, arg1)
}

// ListLinuxSubscriptionsPagesWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionsPagesWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, arg2 func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLinuxSubscriptionsPagesWithContext indicates an expected call of ListLinuxSubscriptionsPagesWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionsPagesWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionsPagesWithContext), varargs...)
}

// ListLinuxSubscriptionsRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionsRequest(arg0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput)
	return ret0, ret1
}

// ListLinuxSubscriptionsRequest indicates an expected call of ListLinuxSubscriptionsRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionsRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionsRequest), arg0)
}

// ListLinuxSubscriptionsWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListLinuxSubscriptionsWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinuxSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinuxSubscriptionsWithContext indicates an expected call of ListLinuxSubscriptionsWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListLinuxSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinuxSubscriptionsWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListLinuxSubscriptionsWithContext), varargs...)
}

// ListRegisteredSubscriptionProviders mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListRegisteredSubscriptionProviders(arg0 *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput) (*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredSubscriptionProviders", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredSubscriptionProviders indicates an expected call of ListRegisteredSubscriptionProviders
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListRegisteredSubscriptionProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredSubscriptionProviders", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListRegisteredSubscriptionProviders), arg0)
}

// ListRegisteredSubscriptionProvidersPages mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListRegisteredSubscriptionProvidersPages(arg0 *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, arg1 func(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredSubscriptionProvidersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegisteredSubscriptionProvidersPages indicates an expected call of ListRegisteredSubscriptionProvidersPages
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListRegisteredSubscriptionProvidersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredSubscriptionProvidersPages", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListRegisteredSubscriptionProvidersPages), arg0, arg1)
}

// ListRegisteredSubscriptionProvidersPagesWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListRegisteredSubscriptionProvidersPagesWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, arg2 func(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegisteredSubscriptionProvidersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegisteredSubscriptionProvidersPagesWithContext indicates an expected call of ListRegisteredSubscriptionProvidersPagesWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListRegisteredSubscriptionProvidersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredSubscriptionProvidersPagesWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListRegisteredSubscriptionProvidersPagesWithContext), varargs...)
}

// ListRegisteredSubscriptionProvidersRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListRegisteredSubscriptionProvidersRequest(arg0 *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredSubscriptionProvidersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput)
	return ret0, ret1
}

// ListRegisteredSubscriptionProvidersRequest indicates an expected call of ListRegisteredSubscriptionProvidersRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListRegisteredSubscriptionProvidersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredSubscriptionProvidersRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListRegisteredSubscriptionProvidersRequest), arg0)
}

// ListRegisteredSubscriptionProvidersWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListRegisteredSubscriptionProvidersWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegisteredSubscriptionProvidersWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredSubscriptionProvidersWithContext indicates an expected call of ListRegisteredSubscriptionProvidersWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListRegisteredSubscriptionProvidersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredSubscriptionProvidersWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListRegisteredSubscriptionProvidersWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListTagsForResource(arg0 *licensemanagerlinuxsubscriptions.ListTagsForResourceInput) (*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListTagsForResourceRequest(arg0 *licensemanagerlinuxsubscriptions.ListTagsForResourceInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.ListTagsForResourceInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RegisterSubscriptionProvider mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) RegisterSubscriptionProvider(arg0 *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput) (*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSubscriptionProvider", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSubscriptionProvider indicates an expected call of RegisterSubscriptionProvider
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) RegisterSubscriptionProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscriptionProvider", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).RegisterSubscriptionProvider), arg0)
}

// RegisterSubscriptionProviderRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) RegisterSubscriptionProviderRequest(arg0 *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput) (*request.Request, *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSubscriptionProviderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput)
	return ret0, ret1
}

// RegisterSubscriptionProviderRequest indicates an expected call of RegisterSubscriptionProviderRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) RegisterSubscriptionProviderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscriptionProviderRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).RegisterSubscriptionProviderRequest), arg0)
}

// RegisterSubscriptionProviderWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) RegisterSubscriptionProviderWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSubscriptionProviderWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSubscriptionProviderWithContext indicates an expected call of RegisterSubscriptionProviderWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) RegisterSubscriptionProviderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSubscriptionProviderWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).RegisterSubscriptionProviderWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) TagResource(arg0 *licensemanagerlinuxsubscriptions.TagResourceInput) (*licensemanagerlinuxsubscriptions.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) TagResourceRequest(arg0 *licensemanagerlinuxsubscriptions.TagResourceInput) (*request.Request, *licensemanagerlinuxsubscriptions.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) TagResourceWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.TagResourceInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) UntagResource(arg0 *licensemanagerlinuxsubscriptions.UntagResourceInput) (*licensemanagerlinuxsubscriptions.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) UntagResourceRequest(arg0 *licensemanagerlinuxsubscriptions.UntagResourceInput) (*request.Request, *licensemanagerlinuxsubscriptions.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.UntagResourceInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateServiceSettings mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) UpdateServiceSettings(arg0 *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput) (*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceSettings", arg0)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceSettings indicates an expected call of UpdateServiceSettings
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) UpdateServiceSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceSettings", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).UpdateServiceSettings), arg0)
}

// UpdateServiceSettingsRequest mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) UpdateServiceSettingsRequest(arg0 *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput) (*request.Request, *licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput)
	return ret0, ret1
}

// UpdateServiceSettingsRequest indicates an expected call of UpdateServiceSettingsRequest
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) UpdateServiceSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceSettingsRequest", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).UpdateServiceSettingsRequest), arg0)
}

// UpdateServiceSettingsWithContext mocks base method
func (m *MockLicenseManagerLinuxSubscriptionsAPI) UpdateServiceSettingsWithContext(arg0 context.Context, arg1 *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput, arg2 ...request.Option) (*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceSettingsWithContext indicates an expected call of UpdateServiceSettingsWithContext
func (mr *MockLicenseManagerLinuxSubscriptionsAPIMockRecorder) UpdateServiceSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceSettingsWithContext", reflect.TypeOf((*MockLicenseManagerLinuxSubscriptionsAPI)(nil).UpdateServiceSettingsWithContext), varargs...)
}
