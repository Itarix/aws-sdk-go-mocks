// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/workspaces/workspacesiface (interfaces: WorkSpacesAPI)

// Package workspacesmock is a generated GoMock package.
package workspacesmock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	workspaces "github.com/aws/aws-sdk-go/service/workspaces"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWorkSpacesAPI is a mock of WorkSpacesAPI interface
type MockWorkSpacesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWorkSpacesAPIMockRecorder
}

// MockWorkSpacesAPIMockRecorder is the mock recorder for MockWorkSpacesAPI
type MockWorkSpacesAPIMockRecorder struct {
	mock *MockWorkSpacesAPI
}

// NewMockWorkSpacesAPI creates a new mock instance
func NewMockWorkSpacesAPI(ctrl *gomock.Controller) *MockWorkSpacesAPI {
	mock := &MockWorkSpacesAPI{ctrl: ctrl}
	mock.recorder = &MockWorkSpacesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkSpacesAPI) EXPECT() *MockWorkSpacesAPIMockRecorder {
	return m.recorder
}

// AssociateIpGroups mocks base method
func (m *MockWorkSpacesAPI) AssociateIpGroups(arg0 *workspaces.AssociateIpGroupsInput) (*workspaces.AssociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateIpGroups", arg0)
	ret0, _ := ret[0].(*workspaces.AssociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateIpGroups indicates an expected call of AssociateIpGroups
func (mr *MockWorkSpacesAPIMockRecorder) AssociateIpGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateIpGroups", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateIpGroups), arg0)
}

// AssociateIpGroupsRequest mocks base method
func (m *MockWorkSpacesAPI) AssociateIpGroupsRequest(arg0 *workspaces.AssociateIpGroupsInput) (*request.Request, *workspaces.AssociateIpGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateIpGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.AssociateIpGroupsOutput)
	return ret0, ret1
}

// AssociateIpGroupsRequest indicates an expected call of AssociateIpGroupsRequest
func (mr *MockWorkSpacesAPIMockRecorder) AssociateIpGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateIpGroupsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateIpGroupsRequest), arg0)
}

// AssociateIpGroupsWithContext mocks base method
func (m *MockWorkSpacesAPI) AssociateIpGroupsWithContext(arg0 aws.Context, arg1 *workspaces.AssociateIpGroupsInput, arg2 ...request.Option) (*workspaces.AssociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateIpGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.AssociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateIpGroupsWithContext indicates an expected call of AssociateIpGroupsWithContext
func (mr *MockWorkSpacesAPIMockRecorder) AssociateIpGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateIpGroupsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateIpGroupsWithContext), varargs...)
}

// AuthorizeIpRules mocks base method
func (m *MockWorkSpacesAPI) AuthorizeIpRules(arg0 *workspaces.AuthorizeIpRulesInput) (*workspaces.AuthorizeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeIpRules", arg0)
	ret0, _ := ret[0].(*workspaces.AuthorizeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeIpRules indicates an expected call of AuthorizeIpRules
func (mr *MockWorkSpacesAPIMockRecorder) AuthorizeIpRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeIpRules", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AuthorizeIpRules), arg0)
}

// AuthorizeIpRulesRequest mocks base method
func (m *MockWorkSpacesAPI) AuthorizeIpRulesRequest(arg0 *workspaces.AuthorizeIpRulesInput) (*request.Request, *workspaces.AuthorizeIpRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeIpRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.AuthorizeIpRulesOutput)
	return ret0, ret1
}

// AuthorizeIpRulesRequest indicates an expected call of AuthorizeIpRulesRequest
func (mr *MockWorkSpacesAPIMockRecorder) AuthorizeIpRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeIpRulesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AuthorizeIpRulesRequest), arg0)
}

// AuthorizeIpRulesWithContext mocks base method
func (m *MockWorkSpacesAPI) AuthorizeIpRulesWithContext(arg0 aws.Context, arg1 *workspaces.AuthorizeIpRulesInput, arg2 ...request.Option) (*workspaces.AuthorizeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthorizeIpRulesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.AuthorizeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeIpRulesWithContext indicates an expected call of AuthorizeIpRulesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) AuthorizeIpRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeIpRulesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AuthorizeIpRulesWithContext), varargs...)
}

// CreateIpGroup mocks base method
func (m *MockWorkSpacesAPI) CreateIpGroup(arg0 *workspaces.CreateIpGroupInput) (*workspaces.CreateIpGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIpGroup", arg0)
	ret0, _ := ret[0].(*workspaces.CreateIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIpGroup indicates an expected call of CreateIpGroup
func (mr *MockWorkSpacesAPIMockRecorder) CreateIpGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpGroup", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateIpGroup), arg0)
}

// CreateIpGroupRequest mocks base method
func (m *MockWorkSpacesAPI) CreateIpGroupRequest(arg0 *workspaces.CreateIpGroupInput) (*request.Request, *workspaces.CreateIpGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIpGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateIpGroupOutput)
	return ret0, ret1
}

// CreateIpGroupRequest indicates an expected call of CreateIpGroupRequest
func (mr *MockWorkSpacesAPIMockRecorder) CreateIpGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpGroupRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateIpGroupRequest), arg0)
}

// CreateIpGroupWithContext mocks base method
func (m *MockWorkSpacesAPI) CreateIpGroupWithContext(arg0 aws.Context, arg1 *workspaces.CreateIpGroupInput, arg2 ...request.Option) (*workspaces.CreateIpGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIpGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIpGroupWithContext indicates an expected call of CreateIpGroupWithContext
func (mr *MockWorkSpacesAPIMockRecorder) CreateIpGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpGroupWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateIpGroupWithContext), varargs...)
}

// CreateTags mocks base method
func (m *MockWorkSpacesAPI) CreateTags(arg0 *workspaces.CreateTagsInput) (*workspaces.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", arg0)
	ret0, _ := ret[0].(*workspaces.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags
func (mr *MockWorkSpacesAPIMockRecorder) CreateTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateTags), arg0)
}

// CreateTagsRequest mocks base method
func (m *MockWorkSpacesAPI) CreateTagsRequest(arg0 *workspaces.CreateTagsInput) (*request.Request, *workspaces.CreateTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateTagsOutput)
	return ret0, ret1
}

// CreateTagsRequest indicates an expected call of CreateTagsRequest
func (mr *MockWorkSpacesAPIMockRecorder) CreateTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateTagsRequest), arg0)
}

// CreateTagsWithContext mocks base method
func (m *MockWorkSpacesAPI) CreateTagsWithContext(arg0 aws.Context, arg1 *workspaces.CreateTagsInput, arg2 ...request.Option) (*workspaces.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTagsWithContext indicates an expected call of CreateTagsWithContext
func (mr *MockWorkSpacesAPIMockRecorder) CreateTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateTagsWithContext), varargs...)
}

// CreateWorkspaces mocks base method
func (m *MockWorkSpacesAPI) CreateWorkspaces(arg0 *workspaces.CreateWorkspacesInput) (*workspaces.CreateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.CreateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaces indicates an expected call of CreateWorkspaces
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspaces), arg0)
}

// CreateWorkspacesRequest mocks base method
func (m *MockWorkSpacesAPI) CreateWorkspacesRequest(arg0 *workspaces.CreateWorkspacesInput) (*request.Request, *workspaces.CreateWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateWorkspacesOutput)
	return ret0, ret1
}

// CreateWorkspacesRequest indicates an expected call of CreateWorkspacesRequest
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspacesRequest), arg0)
}

// CreateWorkspacesWithContext mocks base method
func (m *MockWorkSpacesAPI) CreateWorkspacesWithContext(arg0 aws.Context, arg1 *workspaces.CreateWorkspacesInput, arg2 ...request.Option) (*workspaces.CreateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspacesWithContext indicates an expected call of CreateWorkspacesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspacesWithContext), varargs...)
}

// DeleteIpGroup mocks base method
func (m *MockWorkSpacesAPI) DeleteIpGroup(arg0 *workspaces.DeleteIpGroupInput) (*workspaces.DeleteIpGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIpGroup", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIpGroup indicates an expected call of DeleteIpGroup
func (mr *MockWorkSpacesAPIMockRecorder) DeleteIpGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpGroup", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteIpGroup), arg0)
}

// DeleteIpGroupRequest mocks base method
func (m *MockWorkSpacesAPI) DeleteIpGroupRequest(arg0 *workspaces.DeleteIpGroupInput) (*request.Request, *workspaces.DeleteIpGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIpGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteIpGroupOutput)
	return ret0, ret1
}

// DeleteIpGroupRequest indicates an expected call of DeleteIpGroupRequest
func (mr *MockWorkSpacesAPIMockRecorder) DeleteIpGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpGroupRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteIpGroupRequest), arg0)
}

// DeleteIpGroupWithContext mocks base method
func (m *MockWorkSpacesAPI) DeleteIpGroupWithContext(arg0 aws.Context, arg1 *workspaces.DeleteIpGroupInput, arg2 ...request.Option) (*workspaces.DeleteIpGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIpGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIpGroupWithContext indicates an expected call of DeleteIpGroupWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DeleteIpGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpGroupWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteIpGroupWithContext), varargs...)
}

// DeleteTags mocks base method
func (m *MockWorkSpacesAPI) DeleteTags(arg0 *workspaces.DeleteTagsInput) (*workspaces.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTags", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTags indicates an expected call of DeleteTags
func (mr *MockWorkSpacesAPIMockRecorder) DeleteTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteTags), arg0)
}

// DeleteTagsRequest mocks base method
func (m *MockWorkSpacesAPI) DeleteTagsRequest(arg0 *workspaces.DeleteTagsInput) (*request.Request, *workspaces.DeleteTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteTagsOutput)
	return ret0, ret1
}

// DeleteTagsRequest indicates an expected call of DeleteTagsRequest
func (mr *MockWorkSpacesAPIMockRecorder) DeleteTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteTagsRequest), arg0)
}

// DeleteTagsWithContext mocks base method
func (m *MockWorkSpacesAPI) DeleteTagsWithContext(arg0 aws.Context, arg1 *workspaces.DeleteTagsInput, arg2 ...request.Option) (*workspaces.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagsWithContext indicates an expected call of DeleteTagsWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DeleteTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteTagsWithContext), varargs...)
}

// DeleteWorkspaceImage mocks base method
func (m *MockWorkSpacesAPI) DeleteWorkspaceImage(arg0 *workspaces.DeleteWorkspaceImageInput) (*workspaces.DeleteWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceImage", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceImage indicates an expected call of DeleteWorkspaceImage
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceImage", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceImage), arg0)
}

// DeleteWorkspaceImageRequest mocks base method
func (m *MockWorkSpacesAPI) DeleteWorkspaceImageRequest(arg0 *workspaces.DeleteWorkspaceImageInput) (*request.Request, *workspaces.DeleteWorkspaceImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteWorkspaceImageOutput)
	return ret0, ret1
}

// DeleteWorkspaceImageRequest indicates an expected call of DeleteWorkspaceImageRequest
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceImageRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceImageRequest), arg0)
}

// DeleteWorkspaceImageWithContext mocks base method
func (m *MockWorkSpacesAPI) DeleteWorkspaceImageWithContext(arg0 aws.Context, arg1 *workspaces.DeleteWorkspaceImageInput, arg2 ...request.Option) (*workspaces.DeleteWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceImageWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceImageWithContext indicates an expected call of DeleteWorkspaceImageWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceImageWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceImageWithContext), varargs...)
}

// DescribeAccount mocks base method
func (m *MockWorkSpacesAPI) DescribeAccount(arg0 *workspaces.DescribeAccountInput) (*workspaces.DescribeAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccount", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccount indicates an expected call of DescribeAccount
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccount", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccount), arg0)
}

// DescribeAccountModifications mocks base method
func (m *MockWorkSpacesAPI) DescribeAccountModifications(arg0 *workspaces.DescribeAccountModificationsInput) (*workspaces.DescribeAccountModificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountModifications", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeAccountModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountModifications indicates an expected call of DescribeAccountModifications
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountModifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountModifications", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountModifications), arg0)
}

// DescribeAccountModificationsRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeAccountModificationsRequest(arg0 *workspaces.DescribeAccountModificationsInput) (*request.Request, *workspaces.DescribeAccountModificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountModificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeAccountModificationsOutput)
	return ret0, ret1
}

// DescribeAccountModificationsRequest indicates an expected call of DescribeAccountModificationsRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountModificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountModificationsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountModificationsRequest), arg0)
}

// DescribeAccountModificationsWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeAccountModificationsWithContext(arg0 aws.Context, arg1 *workspaces.DescribeAccountModificationsInput, arg2 ...request.Option) (*workspaces.DescribeAccountModificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountModificationsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeAccountModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountModificationsWithContext indicates an expected call of DescribeAccountModificationsWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountModificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountModificationsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountModificationsWithContext), varargs...)
}

// DescribeAccountRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeAccountRequest(arg0 *workspaces.DescribeAccountInput) (*request.Request, *workspaces.DescribeAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeAccountOutput)
	return ret0, ret1
}

// DescribeAccountRequest indicates an expected call of DescribeAccountRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountRequest), arg0)
}

// DescribeAccountWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeAccountWithContext(arg0 aws.Context, arg1 *workspaces.DescribeAccountInput, arg2 ...request.Option) (*workspaces.DescribeAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountWithContext indicates an expected call of DescribeAccountWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountWithContext), varargs...)
}

// DescribeIpGroups mocks base method
func (m *MockWorkSpacesAPI) DescribeIpGroups(arg0 *workspaces.DescribeIpGroupsInput) (*workspaces.DescribeIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIpGroups", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpGroups indicates an expected call of DescribeIpGroups
func (mr *MockWorkSpacesAPIMockRecorder) DescribeIpGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpGroups", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeIpGroups), arg0)
}

// DescribeIpGroupsRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeIpGroupsRequest(arg0 *workspaces.DescribeIpGroupsInput) (*request.Request, *workspaces.DescribeIpGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIpGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeIpGroupsOutput)
	return ret0, ret1
}

// DescribeIpGroupsRequest indicates an expected call of DescribeIpGroupsRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeIpGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpGroupsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeIpGroupsRequest), arg0)
}

// DescribeIpGroupsWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeIpGroupsWithContext(arg0 aws.Context, arg1 *workspaces.DescribeIpGroupsInput, arg2 ...request.Option) (*workspaces.DescribeIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpGroupsWithContext indicates an expected call of DescribeIpGroupsWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeIpGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpGroupsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeIpGroupsWithContext), varargs...)
}

// DescribeTags mocks base method
func (m *MockWorkSpacesAPI) DescribeTags(arg0 *workspaces.DescribeTagsInput) (*workspaces.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTags", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags
func (mr *MockWorkSpacesAPIMockRecorder) DescribeTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeTags), arg0)
}

// DescribeTagsRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeTagsRequest(arg0 *workspaces.DescribeTagsInput) (*request.Request, *workspaces.DescribeTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeTagsOutput)
	return ret0, ret1
}

// DescribeTagsRequest indicates an expected call of DescribeTagsRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeTagsRequest), arg0)
}

// DescribeTagsWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeTagsWithContext(arg0 aws.Context, arg1 *workspaces.DescribeTagsInput, arg2 ...request.Option) (*workspaces.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTagsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTagsWithContext indicates an expected call of DescribeTagsWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeTagsWithContext), varargs...)
}

// DescribeWorkspaceBundles mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundles(arg0 *workspaces.DescribeWorkspaceBundlesInput) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundles", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceBundles indicates an expected call of DescribeWorkspaceBundles
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundles", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundles), arg0)
}

// DescribeWorkspaceBundlesPages mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesPages(arg0 *workspaces.DescribeWorkspaceBundlesInput, arg1 func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceBundlesPages indicates an expected call of DescribeWorkspaceBundlesPages
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesPages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesPages), arg0, arg1)
}

// DescribeWorkspaceBundlesPagesWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesPagesWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspaceBundlesInput, arg2 func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceBundlesPagesWithContext indicates an expected call of DescribeWorkspaceBundlesPagesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesPagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesPagesWithContext), varargs...)
}

// DescribeWorkspaceBundlesRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesRequest(arg0 *workspaces.DescribeWorkspaceBundlesInput) (*request.Request, *workspaces.DescribeWorkspaceBundlesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceBundlesOutput)
	return ret0, ret1
}

// DescribeWorkspaceBundlesRequest indicates an expected call of DescribeWorkspaceBundlesRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesRequest), arg0)
}

// DescribeWorkspaceBundlesWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspaceBundlesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceBundlesWithContext indicates an expected call of DescribeWorkspaceBundlesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesWithContext), varargs...)
}

// DescribeWorkspaceDirectories mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectories(arg0 *workspaces.DescribeWorkspaceDirectoriesInput) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectories", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceDirectories indicates an expected call of DescribeWorkspaceDirectories
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectories", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectories), arg0)
}

// DescribeWorkspaceDirectoriesPages mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesPages(arg0 *workspaces.DescribeWorkspaceDirectoriesInput, arg1 func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceDirectoriesPages indicates an expected call of DescribeWorkspaceDirectoriesPages
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesPages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesPages), arg0, arg1)
}

// DescribeWorkspaceDirectoriesPagesWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesPagesWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspaceDirectoriesInput, arg2 func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceDirectoriesPagesWithContext indicates an expected call of DescribeWorkspaceDirectoriesPagesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesPagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesPagesWithContext), varargs...)
}

// DescribeWorkspaceDirectoriesRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesRequest(arg0 *workspaces.DescribeWorkspaceDirectoriesInput) (*request.Request, *workspaces.DescribeWorkspaceDirectoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	return ret0, ret1
}

// DescribeWorkspaceDirectoriesRequest indicates an expected call of DescribeWorkspaceDirectoriesRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesRequest), arg0)
}

// DescribeWorkspaceDirectoriesWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspaceDirectoriesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceDirectoriesWithContext indicates an expected call of DescribeWorkspaceDirectoriesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesWithContext), varargs...)
}

// DescribeWorkspaceImages mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceImages(arg0 *workspaces.DescribeWorkspaceImagesInput) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceImages", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceImages indicates an expected call of DescribeWorkspaceImages
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImages), arg0)
}

// DescribeWorkspaceImagesRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceImagesRequest(arg0 *workspaces.DescribeWorkspaceImagesInput) (*request.Request, *workspaces.DescribeWorkspaceImagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceImagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceImagesOutput)
	return ret0, ret1
}

// DescribeWorkspaceImagesRequest indicates an expected call of DescribeWorkspaceImagesRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImagesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImagesRequest), arg0)
}

// DescribeWorkspaceImagesWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaceImagesWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspaceImagesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceImagesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceImagesWithContext indicates an expected call of DescribeWorkspaceImagesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImagesWithContext), varargs...)
}

// DescribeWorkspaces mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspaces(arg0 *workspaces.DescribeWorkspacesInput) (*workspaces.DescribeWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaces indicates an expected call of DescribeWorkspaces
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaces), arg0)
}

// DescribeWorkspacesConnectionStatus mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspacesConnectionStatus(arg0 *workspaces.DescribeWorkspacesConnectionStatusInput) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesConnectionStatus", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspacesConnectionStatus indicates an expected call of DescribeWorkspacesConnectionStatus
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesConnectionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesConnectionStatus", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesConnectionStatus), arg0)
}

// DescribeWorkspacesConnectionStatusRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspacesConnectionStatusRequest(arg0 *workspaces.DescribeWorkspacesConnectionStatusInput) (*request.Request, *workspaces.DescribeWorkspacesConnectionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesConnectionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	return ret0, ret1
}

// DescribeWorkspacesConnectionStatusRequest indicates an expected call of DescribeWorkspacesConnectionStatusRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesConnectionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesConnectionStatusRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesConnectionStatusRequest), arg0)
}

// DescribeWorkspacesConnectionStatusWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspacesConnectionStatusWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspacesConnectionStatusInput, arg2 ...request.Option) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspacesConnectionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspacesConnectionStatusWithContext indicates an expected call of DescribeWorkspacesConnectionStatusWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesConnectionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesConnectionStatusWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesConnectionStatusWithContext), varargs...)
}

// DescribeWorkspacesPages mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspacesPages(arg0 *workspaces.DescribeWorkspacesInput, arg1 func(*workspaces.DescribeWorkspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspacesPages indicates an expected call of DescribeWorkspacesPages
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesPages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesPages), arg0, arg1)
}

// DescribeWorkspacesPagesWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspacesPagesWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspacesInput, arg2 func(*workspaces.DescribeWorkspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspacesPagesWithContext indicates an expected call of DescribeWorkspacesPagesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesPagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesPagesWithContext), varargs...)
}

// DescribeWorkspacesRequest mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspacesRequest(arg0 *workspaces.DescribeWorkspacesInput) (*request.Request, *workspaces.DescribeWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspacesOutput)
	return ret0, ret1
}

// DescribeWorkspacesRequest indicates an expected call of DescribeWorkspacesRequest
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesRequest), arg0)
}

// DescribeWorkspacesWithContext mocks base method
func (m *MockWorkSpacesAPI) DescribeWorkspacesWithContext(arg0 aws.Context, arg1 *workspaces.DescribeWorkspacesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspacesWithContext indicates an expected call of DescribeWorkspacesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesWithContext), varargs...)
}

// DisassociateIpGroups mocks base method
func (m *MockWorkSpacesAPI) DisassociateIpGroups(arg0 *workspaces.DisassociateIpGroupsInput) (*workspaces.DisassociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateIpGroups", arg0)
	ret0, _ := ret[0].(*workspaces.DisassociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateIpGroups indicates an expected call of DisassociateIpGroups
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateIpGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateIpGroups", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateIpGroups), arg0)
}

// DisassociateIpGroupsRequest mocks base method
func (m *MockWorkSpacesAPI) DisassociateIpGroupsRequest(arg0 *workspaces.DisassociateIpGroupsInput) (*request.Request, *workspaces.DisassociateIpGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateIpGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DisassociateIpGroupsOutput)
	return ret0, ret1
}

// DisassociateIpGroupsRequest indicates an expected call of DisassociateIpGroupsRequest
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateIpGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateIpGroupsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateIpGroupsRequest), arg0)
}

// DisassociateIpGroupsWithContext mocks base method
func (m *MockWorkSpacesAPI) DisassociateIpGroupsWithContext(arg0 aws.Context, arg1 *workspaces.DisassociateIpGroupsInput, arg2 ...request.Option) (*workspaces.DisassociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateIpGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DisassociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateIpGroupsWithContext indicates an expected call of DisassociateIpGroupsWithContext
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateIpGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateIpGroupsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateIpGroupsWithContext), varargs...)
}

// ImportWorkspaceImage mocks base method
func (m *MockWorkSpacesAPI) ImportWorkspaceImage(arg0 *workspaces.ImportWorkspaceImageInput) (*workspaces.ImportWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportWorkspaceImage", arg0)
	ret0, _ := ret[0].(*workspaces.ImportWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportWorkspaceImage indicates an expected call of ImportWorkspaceImage
func (mr *MockWorkSpacesAPIMockRecorder) ImportWorkspaceImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWorkspaceImage", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ImportWorkspaceImage), arg0)
}

// ImportWorkspaceImageRequest mocks base method
func (m *MockWorkSpacesAPI) ImportWorkspaceImageRequest(arg0 *workspaces.ImportWorkspaceImageInput) (*request.Request, *workspaces.ImportWorkspaceImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportWorkspaceImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ImportWorkspaceImageOutput)
	return ret0, ret1
}

// ImportWorkspaceImageRequest indicates an expected call of ImportWorkspaceImageRequest
func (mr *MockWorkSpacesAPIMockRecorder) ImportWorkspaceImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWorkspaceImageRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ImportWorkspaceImageRequest), arg0)
}

// ImportWorkspaceImageWithContext mocks base method
func (m *MockWorkSpacesAPI) ImportWorkspaceImageWithContext(arg0 aws.Context, arg1 *workspaces.ImportWorkspaceImageInput, arg2 ...request.Option) (*workspaces.ImportWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportWorkspaceImageWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ImportWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportWorkspaceImageWithContext indicates an expected call of ImportWorkspaceImageWithContext
func (mr *MockWorkSpacesAPIMockRecorder) ImportWorkspaceImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWorkspaceImageWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ImportWorkspaceImageWithContext), varargs...)
}

// ListAvailableManagementCidrRanges mocks base method
func (m *MockWorkSpacesAPI) ListAvailableManagementCidrRanges(arg0 *workspaces.ListAvailableManagementCidrRangesInput) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableManagementCidrRanges", arg0)
	ret0, _ := ret[0].(*workspaces.ListAvailableManagementCidrRangesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableManagementCidrRanges indicates an expected call of ListAvailableManagementCidrRanges
func (mr *MockWorkSpacesAPIMockRecorder) ListAvailableManagementCidrRanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagementCidrRanges", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ListAvailableManagementCidrRanges), arg0)
}

// ListAvailableManagementCidrRangesRequest mocks base method
func (m *MockWorkSpacesAPI) ListAvailableManagementCidrRangesRequest(arg0 *workspaces.ListAvailableManagementCidrRangesInput) (*request.Request, *workspaces.ListAvailableManagementCidrRangesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableManagementCidrRangesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ListAvailableManagementCidrRangesOutput)
	return ret0, ret1
}

// ListAvailableManagementCidrRangesRequest indicates an expected call of ListAvailableManagementCidrRangesRequest
func (mr *MockWorkSpacesAPIMockRecorder) ListAvailableManagementCidrRangesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagementCidrRangesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ListAvailableManagementCidrRangesRequest), arg0)
}

// ListAvailableManagementCidrRangesWithContext mocks base method
func (m *MockWorkSpacesAPI) ListAvailableManagementCidrRangesWithContext(arg0 aws.Context, arg1 *workspaces.ListAvailableManagementCidrRangesInput, arg2 ...request.Option) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableManagementCidrRangesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ListAvailableManagementCidrRangesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableManagementCidrRangesWithContext indicates an expected call of ListAvailableManagementCidrRangesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) ListAvailableManagementCidrRangesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagementCidrRangesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ListAvailableManagementCidrRangesWithContext), varargs...)
}

// ModifyAccount mocks base method
func (m *MockWorkSpacesAPI) ModifyAccount(arg0 *workspaces.ModifyAccountInput) (*workspaces.ModifyAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAccount", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyAccount indicates an expected call of ModifyAccount
func (mr *MockWorkSpacesAPIMockRecorder) ModifyAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccount", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyAccount), arg0)
}

// ModifyAccountRequest mocks base method
func (m *MockWorkSpacesAPI) ModifyAccountRequest(arg0 *workspaces.ModifyAccountInput) (*request.Request, *workspaces.ModifyAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyAccountOutput)
	return ret0, ret1
}

// ModifyAccountRequest indicates an expected call of ModifyAccountRequest
func (mr *MockWorkSpacesAPIMockRecorder) ModifyAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccountRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyAccountRequest), arg0)
}

// ModifyAccountWithContext mocks base method
func (m *MockWorkSpacesAPI) ModifyAccountWithContext(arg0 aws.Context, arg1 *workspaces.ModifyAccountInput, arg2 ...request.Option) (*workspaces.ModifyAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyAccountWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyAccountWithContext indicates an expected call of ModifyAccountWithContext
func (mr *MockWorkSpacesAPIMockRecorder) ModifyAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccountWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyAccountWithContext), varargs...)
}

// ModifyWorkspaceProperties mocks base method
func (m *MockWorkSpacesAPI) ModifyWorkspaceProperties(arg0 *workspaces.ModifyWorkspacePropertiesInput) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceProperties", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspacePropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceProperties indicates an expected call of ModifyWorkspaceProperties
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceProperties", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceProperties), arg0)
}

// ModifyWorkspacePropertiesRequest mocks base method
func (m *MockWorkSpacesAPI) ModifyWorkspacePropertiesRequest(arg0 *workspaces.ModifyWorkspacePropertiesInput) (*request.Request, *workspaces.ModifyWorkspacePropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspacePropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyWorkspacePropertiesOutput)
	return ret0, ret1
}

// ModifyWorkspacePropertiesRequest indicates an expected call of ModifyWorkspacePropertiesRequest
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspacePropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspacePropertiesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspacePropertiesRequest), arg0)
}

// ModifyWorkspacePropertiesWithContext mocks base method
func (m *MockWorkSpacesAPI) ModifyWorkspacePropertiesWithContext(arg0 aws.Context, arg1 *workspaces.ModifyWorkspacePropertiesInput, arg2 ...request.Option) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyWorkspacePropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspacePropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspacePropertiesWithContext indicates an expected call of ModifyWorkspacePropertiesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspacePropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspacePropertiesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspacePropertiesWithContext), varargs...)
}

// ModifyWorkspaceState mocks base method
func (m *MockWorkSpacesAPI) ModifyWorkspaceState(arg0 *workspaces.ModifyWorkspaceStateInput) (*workspaces.ModifyWorkspaceStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceState", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceState indicates an expected call of ModifyWorkspaceState
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceState", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceState), arg0)
}

// ModifyWorkspaceStateRequest mocks base method
func (m *MockWorkSpacesAPI) ModifyWorkspaceStateRequest(arg0 *workspaces.ModifyWorkspaceStateInput) (*request.Request, *workspaces.ModifyWorkspaceStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyWorkspaceStateOutput)
	return ret0, ret1
}

// ModifyWorkspaceStateRequest indicates an expected call of ModifyWorkspaceStateRequest
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceStateRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceStateRequest), arg0)
}

// ModifyWorkspaceStateWithContext mocks base method
func (m *MockWorkSpacesAPI) ModifyWorkspaceStateWithContext(arg0 aws.Context, arg1 *workspaces.ModifyWorkspaceStateInput, arg2 ...request.Option) (*workspaces.ModifyWorkspaceStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyWorkspaceStateWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceStateWithContext indicates an expected call of ModifyWorkspaceStateWithContext
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceStateWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceStateWithContext), varargs...)
}

// RebootWorkspaces mocks base method
func (m *MockWorkSpacesAPI) RebootWorkspaces(arg0 *workspaces.RebootWorkspacesInput) (*workspaces.RebootWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.RebootWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootWorkspaces indicates an expected call of RebootWorkspaces
func (mr *MockWorkSpacesAPIMockRecorder) RebootWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebootWorkspaces), arg0)
}

// RebootWorkspacesRequest mocks base method
func (m *MockWorkSpacesAPI) RebootWorkspacesRequest(arg0 *workspaces.RebootWorkspacesInput) (*request.Request, *workspaces.RebootWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RebootWorkspacesOutput)
	return ret0, ret1
}

// RebootWorkspacesRequest indicates an expected call of RebootWorkspacesRequest
func (mr *MockWorkSpacesAPIMockRecorder) RebootWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebootWorkspacesRequest), arg0)
}

// RebootWorkspacesWithContext mocks base method
func (m *MockWorkSpacesAPI) RebootWorkspacesWithContext(arg0 aws.Context, arg1 *workspaces.RebootWorkspacesInput, arg2 ...request.Option) (*workspaces.RebootWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RebootWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootWorkspacesWithContext indicates an expected call of RebootWorkspacesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) RebootWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebootWorkspacesWithContext), varargs...)
}

// RebuildWorkspaces mocks base method
func (m *MockWorkSpacesAPI) RebuildWorkspaces(arg0 *workspaces.RebuildWorkspacesInput) (*workspaces.RebuildWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.RebuildWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildWorkspaces indicates an expected call of RebuildWorkspaces
func (mr *MockWorkSpacesAPIMockRecorder) RebuildWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebuildWorkspaces), arg0)
}

// RebuildWorkspacesRequest mocks base method
func (m *MockWorkSpacesAPI) RebuildWorkspacesRequest(arg0 *workspaces.RebuildWorkspacesInput) (*request.Request, *workspaces.RebuildWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RebuildWorkspacesOutput)
	return ret0, ret1
}

// RebuildWorkspacesRequest indicates an expected call of RebuildWorkspacesRequest
func (mr *MockWorkSpacesAPIMockRecorder) RebuildWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebuildWorkspacesRequest), arg0)
}

// RebuildWorkspacesWithContext mocks base method
func (m *MockWorkSpacesAPI) RebuildWorkspacesWithContext(arg0 aws.Context, arg1 *workspaces.RebuildWorkspacesInput, arg2 ...request.Option) (*workspaces.RebuildWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebuildWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RebuildWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildWorkspacesWithContext indicates an expected call of RebuildWorkspacesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) RebuildWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebuildWorkspacesWithContext), varargs...)
}

// RevokeIpRules mocks base method
func (m *MockWorkSpacesAPI) RevokeIpRules(arg0 *workspaces.RevokeIpRulesInput) (*workspaces.RevokeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeIpRules", arg0)
	ret0, _ := ret[0].(*workspaces.RevokeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeIpRules indicates an expected call of RevokeIpRules
func (mr *MockWorkSpacesAPIMockRecorder) RevokeIpRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIpRules", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RevokeIpRules), arg0)
}

// RevokeIpRulesRequest mocks base method
func (m *MockWorkSpacesAPI) RevokeIpRulesRequest(arg0 *workspaces.RevokeIpRulesInput) (*request.Request, *workspaces.RevokeIpRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeIpRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RevokeIpRulesOutput)
	return ret0, ret1
}

// RevokeIpRulesRequest indicates an expected call of RevokeIpRulesRequest
func (mr *MockWorkSpacesAPIMockRecorder) RevokeIpRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIpRulesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RevokeIpRulesRequest), arg0)
}

// RevokeIpRulesWithContext mocks base method
func (m *MockWorkSpacesAPI) RevokeIpRulesWithContext(arg0 aws.Context, arg1 *workspaces.RevokeIpRulesInput, arg2 ...request.Option) (*workspaces.RevokeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeIpRulesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RevokeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeIpRulesWithContext indicates an expected call of RevokeIpRulesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) RevokeIpRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIpRulesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RevokeIpRulesWithContext), varargs...)
}

// StartWorkspaces mocks base method
func (m *MockWorkSpacesAPI) StartWorkspaces(arg0 *workspaces.StartWorkspacesInput) (*workspaces.StartWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.StartWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkspaces indicates an expected call of StartWorkspaces
func (mr *MockWorkSpacesAPIMockRecorder) StartWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StartWorkspaces), arg0)
}

// StartWorkspacesRequest mocks base method
func (m *MockWorkSpacesAPI) StartWorkspacesRequest(arg0 *workspaces.StartWorkspacesInput) (*request.Request, *workspaces.StartWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.StartWorkspacesOutput)
	return ret0, ret1
}

// StartWorkspacesRequest indicates an expected call of StartWorkspacesRequest
func (mr *MockWorkSpacesAPIMockRecorder) StartWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StartWorkspacesRequest), arg0)
}

// StartWorkspacesWithContext mocks base method
func (m *MockWorkSpacesAPI) StartWorkspacesWithContext(arg0 aws.Context, arg1 *workspaces.StartWorkspacesInput, arg2 ...request.Option) (*workspaces.StartWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.StartWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkspacesWithContext indicates an expected call of StartWorkspacesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) StartWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StartWorkspacesWithContext), varargs...)
}

// StopWorkspaces mocks base method
func (m *MockWorkSpacesAPI) StopWorkspaces(arg0 *workspaces.StopWorkspacesInput) (*workspaces.StopWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.StopWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkspaces indicates an expected call of StopWorkspaces
func (mr *MockWorkSpacesAPIMockRecorder) StopWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StopWorkspaces), arg0)
}

// StopWorkspacesRequest mocks base method
func (m *MockWorkSpacesAPI) StopWorkspacesRequest(arg0 *workspaces.StopWorkspacesInput) (*request.Request, *workspaces.StopWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.StopWorkspacesOutput)
	return ret0, ret1
}

// StopWorkspacesRequest indicates an expected call of StopWorkspacesRequest
func (mr *MockWorkSpacesAPIMockRecorder) StopWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StopWorkspacesRequest), arg0)
}

// StopWorkspacesWithContext mocks base method
func (m *MockWorkSpacesAPI) StopWorkspacesWithContext(arg0 aws.Context, arg1 *workspaces.StopWorkspacesInput, arg2 ...request.Option) (*workspaces.StopWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.StopWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkspacesWithContext indicates an expected call of StopWorkspacesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) StopWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StopWorkspacesWithContext), varargs...)
}

// TerminateWorkspaces mocks base method
func (m *MockWorkSpacesAPI) TerminateWorkspaces(arg0 *workspaces.TerminateWorkspacesInput) (*workspaces.TerminateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.TerminateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateWorkspaces indicates an expected call of TerminateWorkspaces
func (mr *MockWorkSpacesAPIMockRecorder) TerminateWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).TerminateWorkspaces), arg0)
}

// TerminateWorkspacesRequest mocks base method
func (m *MockWorkSpacesAPI) TerminateWorkspacesRequest(arg0 *workspaces.TerminateWorkspacesInput) (*request.Request, *workspaces.TerminateWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.TerminateWorkspacesOutput)
	return ret0, ret1
}

// TerminateWorkspacesRequest indicates an expected call of TerminateWorkspacesRequest
func (mr *MockWorkSpacesAPIMockRecorder) TerminateWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).TerminateWorkspacesRequest), arg0)
}

// TerminateWorkspacesWithContext mocks base method
func (m *MockWorkSpacesAPI) TerminateWorkspacesWithContext(arg0 aws.Context, arg1 *workspaces.TerminateWorkspacesInput, arg2 ...request.Option) (*workspaces.TerminateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.TerminateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateWorkspacesWithContext indicates an expected call of TerminateWorkspacesWithContext
func (mr *MockWorkSpacesAPIMockRecorder) TerminateWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).TerminateWorkspacesWithContext), varargs...)
}

// UpdateRulesOfIpGroup mocks base method
func (m *MockWorkSpacesAPI) UpdateRulesOfIpGroup(arg0 *workspaces.UpdateRulesOfIpGroupInput) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRulesOfIpGroup", arg0)
	ret0, _ := ret[0].(*workspaces.UpdateRulesOfIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRulesOfIpGroup indicates an expected call of UpdateRulesOfIpGroup
func (mr *MockWorkSpacesAPIMockRecorder) UpdateRulesOfIpGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRulesOfIpGroup", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateRulesOfIpGroup), arg0)
}

// UpdateRulesOfIpGroupRequest mocks base method
func (m *MockWorkSpacesAPI) UpdateRulesOfIpGroupRequest(arg0 *workspaces.UpdateRulesOfIpGroupInput) (*request.Request, *workspaces.UpdateRulesOfIpGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRulesOfIpGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.UpdateRulesOfIpGroupOutput)
	return ret0, ret1
}

// UpdateRulesOfIpGroupRequest indicates an expected call of UpdateRulesOfIpGroupRequest
func (mr *MockWorkSpacesAPIMockRecorder) UpdateRulesOfIpGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRulesOfIpGroupRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateRulesOfIpGroupRequest), arg0)
}

// UpdateRulesOfIpGroupWithContext mocks base method
func (m *MockWorkSpacesAPI) UpdateRulesOfIpGroupWithContext(arg0 aws.Context, arg1 *workspaces.UpdateRulesOfIpGroupInput, arg2 ...request.Option) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRulesOfIpGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.UpdateRulesOfIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRulesOfIpGroupWithContext indicates an expected call of UpdateRulesOfIpGroupWithContext
func (mr *MockWorkSpacesAPIMockRecorder) UpdateRulesOfIpGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRulesOfIpGroupWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateRulesOfIpGroupWithContext), varargs...)
}
