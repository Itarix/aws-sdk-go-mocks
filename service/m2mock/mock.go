// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/m2/m2iface (interfaces: M2API)

// Package m2mock is a generated GoMock package.
package m2mock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	m2 "github.com/aws/aws-sdk-go/service/m2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockM2API is a mock of M2API interface
type MockM2API struct {
	ctrl     *gomock.Controller
	recorder *MockM2APIMockRecorder
}

// MockM2APIMockRecorder is the mock recorder for MockM2API
type MockM2APIMockRecorder struct {
	mock *MockM2API
}

// NewMockM2API creates a new mock instance
func NewMockM2API(ctrl *gomock.Controller) *MockM2API {
	mock := &MockM2API{ctrl: ctrl}
	mock.recorder = &MockM2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockM2API) EXPECT() *MockM2APIMockRecorder {
	return m.recorder
}

// CancelBatchJobExecution mocks base method
func (m *MockM2API) CancelBatchJobExecution(arg0 *m2.CancelBatchJobExecutionInput) (*m2.CancelBatchJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBatchJobExecution", arg0)
	ret0, _ := ret[0].(*m2.CancelBatchJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBatchJobExecution indicates an expected call of CancelBatchJobExecution
func (mr *MockM2APIMockRecorder) CancelBatchJobExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBatchJobExecution", reflect.TypeOf((*MockM2API)(nil).CancelBatchJobExecution), arg0)
}

// CancelBatchJobExecutionRequest mocks base method
func (m *MockM2API) CancelBatchJobExecutionRequest(arg0 *m2.CancelBatchJobExecutionInput) (*request.Request, *m2.CancelBatchJobExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBatchJobExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.CancelBatchJobExecutionOutput)
	return ret0, ret1
}

// CancelBatchJobExecutionRequest indicates an expected call of CancelBatchJobExecutionRequest
func (mr *MockM2APIMockRecorder) CancelBatchJobExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBatchJobExecutionRequest", reflect.TypeOf((*MockM2API)(nil).CancelBatchJobExecutionRequest), arg0)
}

// CancelBatchJobExecutionWithContext mocks base method
func (m *MockM2API) CancelBatchJobExecutionWithContext(arg0 context.Context, arg1 *m2.CancelBatchJobExecutionInput, arg2 ...request.Option) (*m2.CancelBatchJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelBatchJobExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*m2.CancelBatchJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBatchJobExecutionWithContext indicates an expected call of CancelBatchJobExecutionWithContext
func (mr *MockM2APIMockRecorder) CancelBatchJobExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBatchJobExecutionWithContext", reflect.TypeOf((*MockM2API)(nil).CancelBatchJobExecutionWithContext), varargs...)
}

// CreateApplication mocks base method
func (m *MockM2API) CreateApplication(arg0 *m2.CreateApplicationInput) (*m2.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*m2.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockM2APIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockM2API)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method
func (m *MockM2API) CreateApplicationRequest(arg0 *m2.CreateApplicationInput) (*request.Request, *m2.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockM2APIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockM2API)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method
func (m *MockM2API) CreateApplicationWithContext(arg0 context.Context, arg1 *m2.CreateApplicationInput, arg2 ...request.Option) (*m2.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*m2.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockM2APIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockM2API)(nil).CreateApplicationWithContext), varargs...)
}

// CreateDataSetImportTask mocks base method
func (m *MockM2API) CreateDataSetImportTask(arg0 *m2.CreateDataSetImportTaskInput) (*m2.CreateDataSetImportTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSetImportTask", arg0)
	ret0, _ := ret[0].(*m2.CreateDataSetImportTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSetImportTask indicates an expected call of CreateDataSetImportTask
func (mr *MockM2APIMockRecorder) CreateDataSetImportTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSetImportTask", reflect.TypeOf((*MockM2API)(nil).CreateDataSetImportTask), arg0)
}

// CreateDataSetImportTaskRequest mocks base method
func (m *MockM2API) CreateDataSetImportTaskRequest(arg0 *m2.CreateDataSetImportTaskInput) (*request.Request, *m2.CreateDataSetImportTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSetImportTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.CreateDataSetImportTaskOutput)
	return ret0, ret1
}

// CreateDataSetImportTaskRequest indicates an expected call of CreateDataSetImportTaskRequest
func (mr *MockM2APIMockRecorder) CreateDataSetImportTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSetImportTaskRequest", reflect.TypeOf((*MockM2API)(nil).CreateDataSetImportTaskRequest), arg0)
}

// CreateDataSetImportTaskWithContext mocks base method
func (m *MockM2API) CreateDataSetImportTaskWithContext(arg0 context.Context, arg1 *m2.CreateDataSetImportTaskInput, arg2 ...request.Option) (*m2.CreateDataSetImportTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataSetImportTaskWithContext", varargs...)
	ret0, _ := ret[0].(*m2.CreateDataSetImportTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSetImportTaskWithContext indicates an expected call of CreateDataSetImportTaskWithContext
func (mr *MockM2APIMockRecorder) CreateDataSetImportTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSetImportTaskWithContext", reflect.TypeOf((*MockM2API)(nil).CreateDataSetImportTaskWithContext), varargs...)
}

// CreateDeployment mocks base method
func (m *MockM2API) CreateDeployment(arg0 *m2.CreateDeploymentInput) (*m2.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*m2.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockM2APIMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockM2API)(nil).CreateDeployment), arg0)
}

// CreateDeploymentRequest mocks base method
func (m *MockM2API) CreateDeploymentRequest(arg0 *m2.CreateDeploymentInput) (*request.Request, *m2.CreateDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.CreateDeploymentOutput)
	return ret0, ret1
}

// CreateDeploymentRequest indicates an expected call of CreateDeploymentRequest
func (mr *MockM2APIMockRecorder) CreateDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentRequest", reflect.TypeOf((*MockM2API)(nil).CreateDeploymentRequest), arg0)
}

// CreateDeploymentWithContext mocks base method
func (m *MockM2API) CreateDeploymentWithContext(arg0 context.Context, arg1 *m2.CreateDeploymentInput, arg2 ...request.Option) (*m2.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*m2.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentWithContext indicates an expected call of CreateDeploymentWithContext
func (mr *MockM2APIMockRecorder) CreateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentWithContext", reflect.TypeOf((*MockM2API)(nil).CreateDeploymentWithContext), varargs...)
}

// CreateEnvironment mocks base method
func (m *MockM2API) CreateEnvironment(arg0 *m2.CreateEnvironmentInput) (*m2.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(*m2.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockM2APIMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockM2API)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentRequest mocks base method
func (m *MockM2API) CreateEnvironmentRequest(arg0 *m2.CreateEnvironmentInput) (*request.Request, *m2.CreateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.CreateEnvironmentOutput)
	return ret0, ret1
}

// CreateEnvironmentRequest indicates an expected call of CreateEnvironmentRequest
func (mr *MockM2APIMockRecorder) CreateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentRequest", reflect.TypeOf((*MockM2API)(nil).CreateEnvironmentRequest), arg0)
}

// CreateEnvironmentWithContext mocks base method
func (m *MockM2API) CreateEnvironmentWithContext(arg0 context.Context, arg1 *m2.CreateEnvironmentInput, arg2 ...request.Option) (*m2.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*m2.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentWithContext indicates an expected call of CreateEnvironmentWithContext
func (mr *MockM2APIMockRecorder) CreateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentWithContext", reflect.TypeOf((*MockM2API)(nil).CreateEnvironmentWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockM2API) DeleteApplication(arg0 *m2.DeleteApplicationInput) (*m2.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*m2.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockM2APIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockM2API)(nil).DeleteApplication), arg0)
}

// DeleteApplicationFromEnvironment mocks base method
func (m *MockM2API) DeleteApplicationFromEnvironment(arg0 *m2.DeleteApplicationFromEnvironmentInput) (*m2.DeleteApplicationFromEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationFromEnvironment", arg0)
	ret0, _ := ret[0].(*m2.DeleteApplicationFromEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationFromEnvironment indicates an expected call of DeleteApplicationFromEnvironment
func (mr *MockM2APIMockRecorder) DeleteApplicationFromEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationFromEnvironment", reflect.TypeOf((*MockM2API)(nil).DeleteApplicationFromEnvironment), arg0)
}

// DeleteApplicationFromEnvironmentRequest mocks base method
func (m *MockM2API) DeleteApplicationFromEnvironmentRequest(arg0 *m2.DeleteApplicationFromEnvironmentInput) (*request.Request, *m2.DeleteApplicationFromEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationFromEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.DeleteApplicationFromEnvironmentOutput)
	return ret0, ret1
}

// DeleteApplicationFromEnvironmentRequest indicates an expected call of DeleteApplicationFromEnvironmentRequest
func (mr *MockM2APIMockRecorder) DeleteApplicationFromEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationFromEnvironmentRequest", reflect.TypeOf((*MockM2API)(nil).DeleteApplicationFromEnvironmentRequest), arg0)
}

// DeleteApplicationFromEnvironmentWithContext mocks base method
func (m *MockM2API) DeleteApplicationFromEnvironmentWithContext(arg0 context.Context, arg1 *m2.DeleteApplicationFromEnvironmentInput, arg2 ...request.Option) (*m2.DeleteApplicationFromEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationFromEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*m2.DeleteApplicationFromEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationFromEnvironmentWithContext indicates an expected call of DeleteApplicationFromEnvironmentWithContext
func (mr *MockM2APIMockRecorder) DeleteApplicationFromEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationFromEnvironmentWithContext", reflect.TypeOf((*MockM2API)(nil).DeleteApplicationFromEnvironmentWithContext), varargs...)
}

// DeleteApplicationRequest mocks base method
func (m *MockM2API) DeleteApplicationRequest(arg0 *m2.DeleteApplicationInput) (*request.Request, *m2.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockM2APIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockM2API)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockM2API) DeleteApplicationWithContext(arg0 context.Context, arg1 *m2.DeleteApplicationInput, arg2 ...request.Option) (*m2.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*m2.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockM2APIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockM2API)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteEnvironment mocks base method
func (m *MockM2API) DeleteEnvironment(arg0 *m2.DeleteEnvironmentInput) (*m2.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(*m2.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockM2APIMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockM2API)(nil).DeleteEnvironment), arg0)
}

// DeleteEnvironmentRequest mocks base method
func (m *MockM2API) DeleteEnvironmentRequest(arg0 *m2.DeleteEnvironmentInput) (*request.Request, *m2.DeleteEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.DeleteEnvironmentOutput)
	return ret0, ret1
}

// DeleteEnvironmentRequest indicates an expected call of DeleteEnvironmentRequest
func (mr *MockM2APIMockRecorder) DeleteEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentRequest", reflect.TypeOf((*MockM2API)(nil).DeleteEnvironmentRequest), arg0)
}

// DeleteEnvironmentWithContext mocks base method
func (m *MockM2API) DeleteEnvironmentWithContext(arg0 context.Context, arg1 *m2.DeleteEnvironmentInput, arg2 ...request.Option) (*m2.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*m2.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentWithContext indicates an expected call of DeleteEnvironmentWithContext
func (mr *MockM2APIMockRecorder) DeleteEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentWithContext", reflect.TypeOf((*MockM2API)(nil).DeleteEnvironmentWithContext), varargs...)
}

// GetApplication mocks base method
func (m *MockM2API) GetApplication(arg0 *m2.GetApplicationInput) (*m2.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*m2.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockM2APIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockM2API)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method
func (m *MockM2API) GetApplicationRequest(arg0 *m2.GetApplicationInput) (*request.Request, *m2.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest
func (mr *MockM2APIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockM2API)(nil).GetApplicationRequest), arg0)
}

// GetApplicationVersion mocks base method
func (m *MockM2API) GetApplicationVersion(arg0 *m2.GetApplicationVersionInput) (*m2.GetApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationVersion", arg0)
	ret0, _ := ret[0].(*m2.GetApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationVersion indicates an expected call of GetApplicationVersion
func (mr *MockM2APIMockRecorder) GetApplicationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationVersion", reflect.TypeOf((*MockM2API)(nil).GetApplicationVersion), arg0)
}

// GetApplicationVersionRequest mocks base method
func (m *MockM2API) GetApplicationVersionRequest(arg0 *m2.GetApplicationVersionInput) (*request.Request, *m2.GetApplicationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.GetApplicationVersionOutput)
	return ret0, ret1
}

// GetApplicationVersionRequest indicates an expected call of GetApplicationVersionRequest
func (mr *MockM2APIMockRecorder) GetApplicationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationVersionRequest", reflect.TypeOf((*MockM2API)(nil).GetApplicationVersionRequest), arg0)
}

// GetApplicationVersionWithContext mocks base method
func (m *MockM2API) GetApplicationVersionWithContext(arg0 context.Context, arg1 *m2.GetApplicationVersionInput, arg2 ...request.Option) (*m2.GetApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*m2.GetApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationVersionWithContext indicates an expected call of GetApplicationVersionWithContext
func (mr *MockM2APIMockRecorder) GetApplicationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationVersionWithContext", reflect.TypeOf((*MockM2API)(nil).GetApplicationVersionWithContext), varargs...)
}

// GetApplicationWithContext mocks base method
func (m *MockM2API) GetApplicationWithContext(arg0 context.Context, arg1 *m2.GetApplicationInput, arg2 ...request.Option) (*m2.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*m2.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext
func (mr *MockM2APIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockM2API)(nil).GetApplicationWithContext), varargs...)
}

// GetBatchJobExecution mocks base method
func (m *MockM2API) GetBatchJobExecution(arg0 *m2.GetBatchJobExecutionInput) (*m2.GetBatchJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchJobExecution", arg0)
	ret0, _ := ret[0].(*m2.GetBatchJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchJobExecution indicates an expected call of GetBatchJobExecution
func (mr *MockM2APIMockRecorder) GetBatchJobExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchJobExecution", reflect.TypeOf((*MockM2API)(nil).GetBatchJobExecution), arg0)
}

// GetBatchJobExecutionRequest mocks base method
func (m *MockM2API) GetBatchJobExecutionRequest(arg0 *m2.GetBatchJobExecutionInput) (*request.Request, *m2.GetBatchJobExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchJobExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.GetBatchJobExecutionOutput)
	return ret0, ret1
}

// GetBatchJobExecutionRequest indicates an expected call of GetBatchJobExecutionRequest
func (mr *MockM2APIMockRecorder) GetBatchJobExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchJobExecutionRequest", reflect.TypeOf((*MockM2API)(nil).GetBatchJobExecutionRequest), arg0)
}

// GetBatchJobExecutionWithContext mocks base method
func (m *MockM2API) GetBatchJobExecutionWithContext(arg0 context.Context, arg1 *m2.GetBatchJobExecutionInput, arg2 ...request.Option) (*m2.GetBatchJobExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBatchJobExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*m2.GetBatchJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchJobExecutionWithContext indicates an expected call of GetBatchJobExecutionWithContext
func (mr *MockM2APIMockRecorder) GetBatchJobExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchJobExecutionWithContext", reflect.TypeOf((*MockM2API)(nil).GetBatchJobExecutionWithContext), varargs...)
}

// GetDataSetDetails mocks base method
func (m *MockM2API) GetDataSetDetails(arg0 *m2.GetDataSetDetailsInput) (*m2.GetDataSetDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSetDetails", arg0)
	ret0, _ := ret[0].(*m2.GetDataSetDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSetDetails indicates an expected call of GetDataSetDetails
func (mr *MockM2APIMockRecorder) GetDataSetDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetDetails", reflect.TypeOf((*MockM2API)(nil).GetDataSetDetails), arg0)
}

// GetDataSetDetailsRequest mocks base method
func (m *MockM2API) GetDataSetDetailsRequest(arg0 *m2.GetDataSetDetailsInput) (*request.Request, *m2.GetDataSetDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSetDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.GetDataSetDetailsOutput)
	return ret0, ret1
}

// GetDataSetDetailsRequest indicates an expected call of GetDataSetDetailsRequest
func (mr *MockM2APIMockRecorder) GetDataSetDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetDetailsRequest", reflect.TypeOf((*MockM2API)(nil).GetDataSetDetailsRequest), arg0)
}

// GetDataSetDetailsWithContext mocks base method
func (m *MockM2API) GetDataSetDetailsWithContext(arg0 context.Context, arg1 *m2.GetDataSetDetailsInput, arg2 ...request.Option) (*m2.GetDataSetDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataSetDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.GetDataSetDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSetDetailsWithContext indicates an expected call of GetDataSetDetailsWithContext
func (mr *MockM2APIMockRecorder) GetDataSetDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetDetailsWithContext", reflect.TypeOf((*MockM2API)(nil).GetDataSetDetailsWithContext), varargs...)
}

// GetDataSetImportTask mocks base method
func (m *MockM2API) GetDataSetImportTask(arg0 *m2.GetDataSetImportTaskInput) (*m2.GetDataSetImportTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSetImportTask", arg0)
	ret0, _ := ret[0].(*m2.GetDataSetImportTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSetImportTask indicates an expected call of GetDataSetImportTask
func (mr *MockM2APIMockRecorder) GetDataSetImportTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetImportTask", reflect.TypeOf((*MockM2API)(nil).GetDataSetImportTask), arg0)
}

// GetDataSetImportTaskRequest mocks base method
func (m *MockM2API) GetDataSetImportTaskRequest(arg0 *m2.GetDataSetImportTaskInput) (*request.Request, *m2.GetDataSetImportTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSetImportTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.GetDataSetImportTaskOutput)
	return ret0, ret1
}

// GetDataSetImportTaskRequest indicates an expected call of GetDataSetImportTaskRequest
func (mr *MockM2APIMockRecorder) GetDataSetImportTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetImportTaskRequest", reflect.TypeOf((*MockM2API)(nil).GetDataSetImportTaskRequest), arg0)
}

// GetDataSetImportTaskWithContext mocks base method
func (m *MockM2API) GetDataSetImportTaskWithContext(arg0 context.Context, arg1 *m2.GetDataSetImportTaskInput, arg2 ...request.Option) (*m2.GetDataSetImportTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataSetImportTaskWithContext", varargs...)
	ret0, _ := ret[0].(*m2.GetDataSetImportTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSetImportTaskWithContext indicates an expected call of GetDataSetImportTaskWithContext
func (mr *MockM2APIMockRecorder) GetDataSetImportTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetImportTaskWithContext", reflect.TypeOf((*MockM2API)(nil).GetDataSetImportTaskWithContext), varargs...)
}

// GetDeployment mocks base method
func (m *MockM2API) GetDeployment(arg0 *m2.GetDeploymentInput) (*m2.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0)
	ret0, _ := ret[0].(*m2.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockM2APIMockRecorder) GetDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockM2API)(nil).GetDeployment), arg0)
}

// GetDeploymentRequest mocks base method
func (m *MockM2API) GetDeploymentRequest(arg0 *m2.GetDeploymentInput) (*request.Request, *m2.GetDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.GetDeploymentOutput)
	return ret0, ret1
}

// GetDeploymentRequest indicates an expected call of GetDeploymentRequest
func (mr *MockM2APIMockRecorder) GetDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentRequest", reflect.TypeOf((*MockM2API)(nil).GetDeploymentRequest), arg0)
}

// GetDeploymentWithContext mocks base method
func (m *MockM2API) GetDeploymentWithContext(arg0 context.Context, arg1 *m2.GetDeploymentInput, arg2 ...request.Option) (*m2.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*m2.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentWithContext indicates an expected call of GetDeploymentWithContext
func (mr *MockM2APIMockRecorder) GetDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentWithContext", reflect.TypeOf((*MockM2API)(nil).GetDeploymentWithContext), varargs...)
}

// GetEnvironment mocks base method
func (m *MockM2API) GetEnvironment(arg0 *m2.GetEnvironmentInput) (*m2.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*m2.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockM2APIMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockM2API)(nil).GetEnvironment), arg0)
}

// GetEnvironmentRequest mocks base method
func (m *MockM2API) GetEnvironmentRequest(arg0 *m2.GetEnvironmentInput) (*request.Request, *m2.GetEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.GetEnvironmentOutput)
	return ret0, ret1
}

// GetEnvironmentRequest indicates an expected call of GetEnvironmentRequest
func (mr *MockM2APIMockRecorder) GetEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRequest", reflect.TypeOf((*MockM2API)(nil).GetEnvironmentRequest), arg0)
}

// GetEnvironmentWithContext mocks base method
func (m *MockM2API) GetEnvironmentWithContext(arg0 context.Context, arg1 *m2.GetEnvironmentInput, arg2 ...request.Option) (*m2.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*m2.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentWithContext indicates an expected call of GetEnvironmentWithContext
func (mr *MockM2APIMockRecorder) GetEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentWithContext", reflect.TypeOf((*MockM2API)(nil).GetEnvironmentWithContext), varargs...)
}

// ListApplicationVersions mocks base method
func (m *MockM2API) ListApplicationVersions(arg0 *m2.ListApplicationVersionsInput) (*m2.ListApplicationVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationVersions", arg0)
	ret0, _ := ret[0].(*m2.ListApplicationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationVersions indicates an expected call of ListApplicationVersions
func (mr *MockM2APIMockRecorder) ListApplicationVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersions", reflect.TypeOf((*MockM2API)(nil).ListApplicationVersions), arg0)
}

// ListApplicationVersionsPages mocks base method
func (m *MockM2API) ListApplicationVersionsPages(arg0 *m2.ListApplicationVersionsInput, arg1 func(*m2.ListApplicationVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationVersionsPages indicates an expected call of ListApplicationVersionsPages
func (mr *MockM2APIMockRecorder) ListApplicationVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsPages", reflect.TypeOf((*MockM2API)(nil).ListApplicationVersionsPages), arg0, arg1)
}

// ListApplicationVersionsPagesWithContext mocks base method
func (m *MockM2API) ListApplicationVersionsPagesWithContext(arg0 context.Context, arg1 *m2.ListApplicationVersionsInput, arg2 func(*m2.ListApplicationVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationVersionsPagesWithContext indicates an expected call of ListApplicationVersionsPagesWithContext
func (mr *MockM2APIMockRecorder) ListApplicationVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListApplicationVersionsPagesWithContext), varargs...)
}

// ListApplicationVersionsRequest mocks base method
func (m *MockM2API) ListApplicationVersionsRequest(arg0 *m2.ListApplicationVersionsInput) (*request.Request, *m2.ListApplicationVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListApplicationVersionsOutput)
	return ret0, ret1
}

// ListApplicationVersionsRequest indicates an expected call of ListApplicationVersionsRequest
func (mr *MockM2APIMockRecorder) ListApplicationVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsRequest", reflect.TypeOf((*MockM2API)(nil).ListApplicationVersionsRequest), arg0)
}

// ListApplicationVersionsWithContext mocks base method
func (m *MockM2API) ListApplicationVersionsWithContext(arg0 context.Context, arg1 *m2.ListApplicationVersionsInput, arg2 ...request.Option) (*m2.ListApplicationVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListApplicationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationVersionsWithContext indicates an expected call of ListApplicationVersionsWithContext
func (mr *MockM2APIMockRecorder) ListApplicationVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsWithContext", reflect.TypeOf((*MockM2API)(nil).ListApplicationVersionsWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockM2API) ListApplications(arg0 *m2.ListApplicationsInput) (*m2.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*m2.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockM2APIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockM2API)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockM2API) ListApplicationsPages(arg0 *m2.ListApplicationsInput, arg1 func(*m2.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockM2APIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockM2API)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockM2API) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *m2.ListApplicationsInput, arg2 func(*m2.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockM2APIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockM2API) ListApplicationsRequest(arg0 *m2.ListApplicationsInput) (*request.Request, *m2.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockM2APIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockM2API)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockM2API) ListApplicationsWithContext(arg0 context.Context, arg1 *m2.ListApplicationsInput, arg2 ...request.Option) (*m2.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockM2APIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockM2API)(nil).ListApplicationsWithContext), varargs...)
}

// ListBatchJobDefinitions mocks base method
func (m *MockM2API) ListBatchJobDefinitions(arg0 *m2.ListBatchJobDefinitionsInput) (*m2.ListBatchJobDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchJobDefinitions", arg0)
	ret0, _ := ret[0].(*m2.ListBatchJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchJobDefinitions indicates an expected call of ListBatchJobDefinitions
func (mr *MockM2APIMockRecorder) ListBatchJobDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobDefinitions", reflect.TypeOf((*MockM2API)(nil).ListBatchJobDefinitions), arg0)
}

// ListBatchJobDefinitionsPages mocks base method
func (m *MockM2API) ListBatchJobDefinitionsPages(arg0 *m2.ListBatchJobDefinitionsInput, arg1 func(*m2.ListBatchJobDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchJobDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchJobDefinitionsPages indicates an expected call of ListBatchJobDefinitionsPages
func (mr *MockM2APIMockRecorder) ListBatchJobDefinitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobDefinitionsPages", reflect.TypeOf((*MockM2API)(nil).ListBatchJobDefinitionsPages), arg0, arg1)
}

// ListBatchJobDefinitionsPagesWithContext mocks base method
func (m *MockM2API) ListBatchJobDefinitionsPagesWithContext(arg0 context.Context, arg1 *m2.ListBatchJobDefinitionsInput, arg2 func(*m2.ListBatchJobDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchJobDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchJobDefinitionsPagesWithContext indicates an expected call of ListBatchJobDefinitionsPagesWithContext
func (mr *MockM2APIMockRecorder) ListBatchJobDefinitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobDefinitionsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListBatchJobDefinitionsPagesWithContext), varargs...)
}

// ListBatchJobDefinitionsRequest mocks base method
func (m *MockM2API) ListBatchJobDefinitionsRequest(arg0 *m2.ListBatchJobDefinitionsInput) (*request.Request, *m2.ListBatchJobDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchJobDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListBatchJobDefinitionsOutput)
	return ret0, ret1
}

// ListBatchJobDefinitionsRequest indicates an expected call of ListBatchJobDefinitionsRequest
func (mr *MockM2APIMockRecorder) ListBatchJobDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobDefinitionsRequest", reflect.TypeOf((*MockM2API)(nil).ListBatchJobDefinitionsRequest), arg0)
}

// ListBatchJobDefinitionsWithContext mocks base method
func (m *MockM2API) ListBatchJobDefinitionsWithContext(arg0 context.Context, arg1 *m2.ListBatchJobDefinitionsInput, arg2 ...request.Option) (*m2.ListBatchJobDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchJobDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListBatchJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchJobDefinitionsWithContext indicates an expected call of ListBatchJobDefinitionsWithContext
func (mr *MockM2APIMockRecorder) ListBatchJobDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobDefinitionsWithContext", reflect.TypeOf((*MockM2API)(nil).ListBatchJobDefinitionsWithContext), varargs...)
}

// ListBatchJobExecutions mocks base method
func (m *MockM2API) ListBatchJobExecutions(arg0 *m2.ListBatchJobExecutionsInput) (*m2.ListBatchJobExecutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchJobExecutions", arg0)
	ret0, _ := ret[0].(*m2.ListBatchJobExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchJobExecutions indicates an expected call of ListBatchJobExecutions
func (mr *MockM2APIMockRecorder) ListBatchJobExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobExecutions", reflect.TypeOf((*MockM2API)(nil).ListBatchJobExecutions), arg0)
}

// ListBatchJobExecutionsPages mocks base method
func (m *MockM2API) ListBatchJobExecutionsPages(arg0 *m2.ListBatchJobExecutionsInput, arg1 func(*m2.ListBatchJobExecutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchJobExecutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchJobExecutionsPages indicates an expected call of ListBatchJobExecutionsPages
func (mr *MockM2APIMockRecorder) ListBatchJobExecutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobExecutionsPages", reflect.TypeOf((*MockM2API)(nil).ListBatchJobExecutionsPages), arg0, arg1)
}

// ListBatchJobExecutionsPagesWithContext mocks base method
func (m *MockM2API) ListBatchJobExecutionsPagesWithContext(arg0 context.Context, arg1 *m2.ListBatchJobExecutionsInput, arg2 func(*m2.ListBatchJobExecutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchJobExecutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchJobExecutionsPagesWithContext indicates an expected call of ListBatchJobExecutionsPagesWithContext
func (mr *MockM2APIMockRecorder) ListBatchJobExecutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobExecutionsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListBatchJobExecutionsPagesWithContext), varargs...)
}

// ListBatchJobExecutionsRequest mocks base method
func (m *MockM2API) ListBatchJobExecutionsRequest(arg0 *m2.ListBatchJobExecutionsInput) (*request.Request, *m2.ListBatchJobExecutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchJobExecutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListBatchJobExecutionsOutput)
	return ret0, ret1
}

// ListBatchJobExecutionsRequest indicates an expected call of ListBatchJobExecutionsRequest
func (mr *MockM2APIMockRecorder) ListBatchJobExecutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobExecutionsRequest", reflect.TypeOf((*MockM2API)(nil).ListBatchJobExecutionsRequest), arg0)
}

// ListBatchJobExecutionsWithContext mocks base method
func (m *MockM2API) ListBatchJobExecutionsWithContext(arg0 context.Context, arg1 *m2.ListBatchJobExecutionsInput, arg2 ...request.Option) (*m2.ListBatchJobExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchJobExecutionsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListBatchJobExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchJobExecutionsWithContext indicates an expected call of ListBatchJobExecutionsWithContext
func (mr *MockM2APIMockRecorder) ListBatchJobExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchJobExecutionsWithContext", reflect.TypeOf((*MockM2API)(nil).ListBatchJobExecutionsWithContext), varargs...)
}

// ListDataSetImportHistory mocks base method
func (m *MockM2API) ListDataSetImportHistory(arg0 *m2.ListDataSetImportHistoryInput) (*m2.ListDataSetImportHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetImportHistory", arg0)
	ret0, _ := ret[0].(*m2.ListDataSetImportHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSetImportHistory indicates an expected call of ListDataSetImportHistory
func (mr *MockM2APIMockRecorder) ListDataSetImportHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetImportHistory", reflect.TypeOf((*MockM2API)(nil).ListDataSetImportHistory), arg0)
}

// ListDataSetImportHistoryPages mocks base method
func (m *MockM2API) ListDataSetImportHistoryPages(arg0 *m2.ListDataSetImportHistoryInput, arg1 func(*m2.ListDataSetImportHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetImportHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetImportHistoryPages indicates an expected call of ListDataSetImportHistoryPages
func (mr *MockM2APIMockRecorder) ListDataSetImportHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetImportHistoryPages", reflect.TypeOf((*MockM2API)(nil).ListDataSetImportHistoryPages), arg0, arg1)
}

// ListDataSetImportHistoryPagesWithContext mocks base method
func (m *MockM2API) ListDataSetImportHistoryPagesWithContext(arg0 context.Context, arg1 *m2.ListDataSetImportHistoryInput, arg2 func(*m2.ListDataSetImportHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetImportHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetImportHistoryPagesWithContext indicates an expected call of ListDataSetImportHistoryPagesWithContext
func (mr *MockM2APIMockRecorder) ListDataSetImportHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetImportHistoryPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListDataSetImportHistoryPagesWithContext), varargs...)
}

// ListDataSetImportHistoryRequest mocks base method
func (m *MockM2API) ListDataSetImportHistoryRequest(arg0 *m2.ListDataSetImportHistoryInput) (*request.Request, *m2.ListDataSetImportHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetImportHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListDataSetImportHistoryOutput)
	return ret0, ret1
}

// ListDataSetImportHistoryRequest indicates an expected call of ListDataSetImportHistoryRequest
func (mr *MockM2APIMockRecorder) ListDataSetImportHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetImportHistoryRequest", reflect.TypeOf((*MockM2API)(nil).ListDataSetImportHistoryRequest), arg0)
}

// ListDataSetImportHistoryWithContext mocks base method
func (m *MockM2API) ListDataSetImportHistoryWithContext(arg0 context.Context, arg1 *m2.ListDataSetImportHistoryInput, arg2 ...request.Option) (*m2.ListDataSetImportHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetImportHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListDataSetImportHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSetImportHistoryWithContext indicates an expected call of ListDataSetImportHistoryWithContext
func (mr *MockM2APIMockRecorder) ListDataSetImportHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetImportHistoryWithContext", reflect.TypeOf((*MockM2API)(nil).ListDataSetImportHistoryWithContext), varargs...)
}

// ListDataSets mocks base method
func (m *MockM2API) ListDataSets(arg0 *m2.ListDataSetsInput) (*m2.ListDataSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSets", arg0)
	ret0, _ := ret[0].(*m2.ListDataSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSets indicates an expected call of ListDataSets
func (mr *MockM2APIMockRecorder) ListDataSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSets", reflect.TypeOf((*MockM2API)(nil).ListDataSets), arg0)
}

// ListDataSetsPages mocks base method
func (m *MockM2API) ListDataSetsPages(arg0 *m2.ListDataSetsInput, arg1 func(*m2.ListDataSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetsPages indicates an expected call of ListDataSetsPages
func (mr *MockM2APIMockRecorder) ListDataSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsPages", reflect.TypeOf((*MockM2API)(nil).ListDataSetsPages), arg0, arg1)
}

// ListDataSetsPagesWithContext mocks base method
func (m *MockM2API) ListDataSetsPagesWithContext(arg0 context.Context, arg1 *m2.ListDataSetsInput, arg2 func(*m2.ListDataSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetsPagesWithContext indicates an expected call of ListDataSetsPagesWithContext
func (mr *MockM2APIMockRecorder) ListDataSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListDataSetsPagesWithContext), varargs...)
}

// ListDataSetsRequest mocks base method
func (m *MockM2API) ListDataSetsRequest(arg0 *m2.ListDataSetsInput) (*request.Request, *m2.ListDataSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListDataSetsOutput)
	return ret0, ret1
}

// ListDataSetsRequest indicates an expected call of ListDataSetsRequest
func (mr *MockM2APIMockRecorder) ListDataSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsRequest", reflect.TypeOf((*MockM2API)(nil).ListDataSetsRequest), arg0)
}

// ListDataSetsWithContext mocks base method
func (m *MockM2API) ListDataSetsWithContext(arg0 context.Context, arg1 *m2.ListDataSetsInput, arg2 ...request.Option) (*m2.ListDataSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListDataSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSetsWithContext indicates an expected call of ListDataSetsWithContext
func (mr *MockM2APIMockRecorder) ListDataSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsWithContext", reflect.TypeOf((*MockM2API)(nil).ListDataSetsWithContext), varargs...)
}

// ListDeployments mocks base method
func (m *MockM2API) ListDeployments(arg0 *m2.ListDeploymentsInput) (*m2.ListDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", arg0)
	ret0, _ := ret[0].(*m2.ListDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments
func (mr *MockM2APIMockRecorder) ListDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockM2API)(nil).ListDeployments), arg0)
}

// ListDeploymentsPages mocks base method
func (m *MockM2API) ListDeploymentsPages(arg0 *m2.ListDeploymentsInput, arg1 func(*m2.ListDeploymentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentsPages indicates an expected call of ListDeploymentsPages
func (mr *MockM2APIMockRecorder) ListDeploymentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPages", reflect.TypeOf((*MockM2API)(nil).ListDeploymentsPages), arg0, arg1)
}

// ListDeploymentsPagesWithContext mocks base method
func (m *MockM2API) ListDeploymentsPagesWithContext(arg0 context.Context, arg1 *m2.ListDeploymentsInput, arg2 func(*m2.ListDeploymentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentsPagesWithContext indicates an expected call of ListDeploymentsPagesWithContext
func (mr *MockM2APIMockRecorder) ListDeploymentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListDeploymentsPagesWithContext), varargs...)
}

// ListDeploymentsRequest mocks base method
func (m *MockM2API) ListDeploymentsRequest(arg0 *m2.ListDeploymentsInput) (*request.Request, *m2.ListDeploymentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListDeploymentsOutput)
	return ret0, ret1
}

// ListDeploymentsRequest indicates an expected call of ListDeploymentsRequest
func (mr *MockM2APIMockRecorder) ListDeploymentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsRequest", reflect.TypeOf((*MockM2API)(nil).ListDeploymentsRequest), arg0)
}

// ListDeploymentsWithContext mocks base method
func (m *MockM2API) ListDeploymentsWithContext(arg0 context.Context, arg1 *m2.ListDeploymentsInput, arg2 ...request.Option) (*m2.ListDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsWithContext indicates an expected call of ListDeploymentsWithContext
func (mr *MockM2APIMockRecorder) ListDeploymentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsWithContext", reflect.TypeOf((*MockM2API)(nil).ListDeploymentsWithContext), varargs...)
}

// ListEngineVersions mocks base method
func (m *MockM2API) ListEngineVersions(arg0 *m2.ListEngineVersionsInput) (*m2.ListEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEngineVersions", arg0)
	ret0, _ := ret[0].(*m2.ListEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEngineVersions indicates an expected call of ListEngineVersions
func (mr *MockM2APIMockRecorder) ListEngineVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngineVersions", reflect.TypeOf((*MockM2API)(nil).ListEngineVersions), arg0)
}

// ListEngineVersionsPages mocks base method
func (m *MockM2API) ListEngineVersionsPages(arg0 *m2.ListEngineVersionsInput, arg1 func(*m2.ListEngineVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEngineVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEngineVersionsPages indicates an expected call of ListEngineVersionsPages
func (mr *MockM2APIMockRecorder) ListEngineVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngineVersionsPages", reflect.TypeOf((*MockM2API)(nil).ListEngineVersionsPages), arg0, arg1)
}

// ListEngineVersionsPagesWithContext mocks base method
func (m *MockM2API) ListEngineVersionsPagesWithContext(arg0 context.Context, arg1 *m2.ListEngineVersionsInput, arg2 func(*m2.ListEngineVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEngineVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEngineVersionsPagesWithContext indicates an expected call of ListEngineVersionsPagesWithContext
func (mr *MockM2APIMockRecorder) ListEngineVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngineVersionsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListEngineVersionsPagesWithContext), varargs...)
}

// ListEngineVersionsRequest mocks base method
func (m *MockM2API) ListEngineVersionsRequest(arg0 *m2.ListEngineVersionsInput) (*request.Request, *m2.ListEngineVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEngineVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListEngineVersionsOutput)
	return ret0, ret1
}

// ListEngineVersionsRequest indicates an expected call of ListEngineVersionsRequest
func (mr *MockM2APIMockRecorder) ListEngineVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngineVersionsRequest", reflect.TypeOf((*MockM2API)(nil).ListEngineVersionsRequest), arg0)
}

// ListEngineVersionsWithContext mocks base method
func (m *MockM2API) ListEngineVersionsWithContext(arg0 context.Context, arg1 *m2.ListEngineVersionsInput, arg2 ...request.Option) (*m2.ListEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEngineVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEngineVersionsWithContext indicates an expected call of ListEngineVersionsWithContext
func (mr *MockM2APIMockRecorder) ListEngineVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngineVersionsWithContext", reflect.TypeOf((*MockM2API)(nil).ListEngineVersionsWithContext), varargs...)
}

// ListEnvironments mocks base method
func (m *MockM2API) ListEnvironments(arg0 *m2.ListEnvironmentsInput) (*m2.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(*m2.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockM2APIMockRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockM2API)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsPages mocks base method
func (m *MockM2API) ListEnvironmentsPages(arg0 *m2.ListEnvironmentsInput, arg1 func(*m2.ListEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPages indicates an expected call of ListEnvironmentsPages
func (mr *MockM2APIMockRecorder) ListEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPages", reflect.TypeOf((*MockM2API)(nil).ListEnvironmentsPages), arg0, arg1)
}

// ListEnvironmentsPagesWithContext mocks base method
func (m *MockM2API) ListEnvironmentsPagesWithContext(arg0 context.Context, arg1 *m2.ListEnvironmentsInput, arg2 func(*m2.ListEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPagesWithContext indicates an expected call of ListEnvironmentsPagesWithContext
func (mr *MockM2APIMockRecorder) ListEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPagesWithContext", reflect.TypeOf((*MockM2API)(nil).ListEnvironmentsPagesWithContext), varargs...)
}

// ListEnvironmentsRequest mocks base method
func (m *MockM2API) ListEnvironmentsRequest(arg0 *m2.ListEnvironmentsInput) (*request.Request, *m2.ListEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListEnvironmentsOutput)
	return ret0, ret1
}

// ListEnvironmentsRequest indicates an expected call of ListEnvironmentsRequest
func (mr *MockM2APIMockRecorder) ListEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsRequest", reflect.TypeOf((*MockM2API)(nil).ListEnvironmentsRequest), arg0)
}

// ListEnvironmentsWithContext mocks base method
func (m *MockM2API) ListEnvironmentsWithContext(arg0 context.Context, arg1 *m2.ListEnvironmentsInput, arg2 ...request.Option) (*m2.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsWithContext indicates an expected call of ListEnvironmentsWithContext
func (mr *MockM2APIMockRecorder) ListEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsWithContext", reflect.TypeOf((*MockM2API)(nil).ListEnvironmentsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockM2API) ListTagsForResource(arg0 *m2.ListTagsForResourceInput) (*m2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*m2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockM2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockM2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockM2API) ListTagsForResourceRequest(arg0 *m2.ListTagsForResourceInput) (*request.Request, *m2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockM2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockM2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockM2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *m2.ListTagsForResourceInput, arg2 ...request.Option) (*m2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*m2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockM2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockM2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartApplication mocks base method
func (m *MockM2API) StartApplication(arg0 *m2.StartApplicationInput) (*m2.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplication", arg0)
	ret0, _ := ret[0].(*m2.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplication indicates an expected call of StartApplication
func (mr *MockM2APIMockRecorder) StartApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplication", reflect.TypeOf((*MockM2API)(nil).StartApplication), arg0)
}

// StartApplicationRequest mocks base method
func (m *MockM2API) StartApplicationRequest(arg0 *m2.StartApplicationInput) (*request.Request, *m2.StartApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.StartApplicationOutput)
	return ret0, ret1
}

// StartApplicationRequest indicates an expected call of StartApplicationRequest
func (mr *MockM2APIMockRecorder) StartApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationRequest", reflect.TypeOf((*MockM2API)(nil).StartApplicationRequest), arg0)
}

// StartApplicationWithContext mocks base method
func (m *MockM2API) StartApplicationWithContext(arg0 context.Context, arg1 *m2.StartApplicationInput, arg2 ...request.Option) (*m2.StartApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*m2.StartApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplicationWithContext indicates an expected call of StartApplicationWithContext
func (mr *MockM2APIMockRecorder) StartApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplicationWithContext", reflect.TypeOf((*MockM2API)(nil).StartApplicationWithContext), varargs...)
}

// StartBatchJob mocks base method
func (m *MockM2API) StartBatchJob(arg0 *m2.StartBatchJobInput) (*m2.StartBatchJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBatchJob", arg0)
	ret0, _ := ret[0].(*m2.StartBatchJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBatchJob indicates an expected call of StartBatchJob
func (mr *MockM2APIMockRecorder) StartBatchJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBatchJob", reflect.TypeOf((*MockM2API)(nil).StartBatchJob), arg0)
}

// StartBatchJobRequest mocks base method
func (m *MockM2API) StartBatchJobRequest(arg0 *m2.StartBatchJobInput) (*request.Request, *m2.StartBatchJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBatchJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.StartBatchJobOutput)
	return ret0, ret1
}

// StartBatchJobRequest indicates an expected call of StartBatchJobRequest
func (mr *MockM2APIMockRecorder) StartBatchJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBatchJobRequest", reflect.TypeOf((*MockM2API)(nil).StartBatchJobRequest), arg0)
}

// StartBatchJobWithContext mocks base method
func (m *MockM2API) StartBatchJobWithContext(arg0 context.Context, arg1 *m2.StartBatchJobInput, arg2 ...request.Option) (*m2.StartBatchJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBatchJobWithContext", varargs...)
	ret0, _ := ret[0].(*m2.StartBatchJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBatchJobWithContext indicates an expected call of StartBatchJobWithContext
func (mr *MockM2APIMockRecorder) StartBatchJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBatchJobWithContext", reflect.TypeOf((*MockM2API)(nil).StartBatchJobWithContext), varargs...)
}

// StopApplication mocks base method
func (m *MockM2API) StopApplication(arg0 *m2.StopApplicationInput) (*m2.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplication", arg0)
	ret0, _ := ret[0].(*m2.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplication indicates an expected call of StopApplication
func (mr *MockM2APIMockRecorder) StopApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplication", reflect.TypeOf((*MockM2API)(nil).StopApplication), arg0)
}

// StopApplicationRequest mocks base method
func (m *MockM2API) StopApplicationRequest(arg0 *m2.StopApplicationInput) (*request.Request, *m2.StopApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.StopApplicationOutput)
	return ret0, ret1
}

// StopApplicationRequest indicates an expected call of StopApplicationRequest
func (mr *MockM2APIMockRecorder) StopApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationRequest", reflect.TypeOf((*MockM2API)(nil).StopApplicationRequest), arg0)
}

// StopApplicationWithContext mocks base method
func (m *MockM2API) StopApplicationWithContext(arg0 context.Context, arg1 *m2.StopApplicationInput, arg2 ...request.Option) (*m2.StopApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*m2.StopApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplicationWithContext indicates an expected call of StopApplicationWithContext
func (mr *MockM2APIMockRecorder) StopApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplicationWithContext", reflect.TypeOf((*MockM2API)(nil).StopApplicationWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockM2API) TagResource(arg0 *m2.TagResourceInput) (*m2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*m2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockM2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockM2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockM2API) TagResourceRequest(arg0 *m2.TagResourceInput) (*request.Request, *m2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockM2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockM2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockM2API) TagResourceWithContext(arg0 context.Context, arg1 *m2.TagResourceInput, arg2 ...request.Option) (*m2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*m2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockM2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockM2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockM2API) UntagResource(arg0 *m2.UntagResourceInput) (*m2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*m2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockM2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockM2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockM2API) UntagResourceRequest(arg0 *m2.UntagResourceInput) (*request.Request, *m2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockM2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockM2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockM2API) UntagResourceWithContext(arg0 context.Context, arg1 *m2.UntagResourceInput, arg2 ...request.Option) (*m2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*m2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockM2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockM2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockM2API) UpdateApplication(arg0 *m2.UpdateApplicationInput) (*m2.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*m2.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockM2APIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockM2API)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockM2API) UpdateApplicationRequest(arg0 *m2.UpdateApplicationInput) (*request.Request, *m2.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockM2APIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockM2API)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockM2API) UpdateApplicationWithContext(arg0 context.Context, arg1 *m2.UpdateApplicationInput, arg2 ...request.Option) (*m2.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*m2.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockM2APIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockM2API)(nil).UpdateApplicationWithContext), varargs...)
}

// UpdateEnvironment mocks base method
func (m *MockM2API) UpdateEnvironment(arg0 *m2.UpdateEnvironmentInput) (*m2.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0)
	ret0, _ := ret[0].(*m2.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockM2APIMockRecorder) UpdateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockM2API)(nil).UpdateEnvironment), arg0)
}

// UpdateEnvironmentRequest mocks base method
func (m *MockM2API) UpdateEnvironmentRequest(arg0 *m2.UpdateEnvironmentInput) (*request.Request, *m2.UpdateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*m2.UpdateEnvironmentOutput)
	return ret0, ret1
}

// UpdateEnvironmentRequest indicates an expected call of UpdateEnvironmentRequest
func (mr *MockM2APIMockRecorder) UpdateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentRequest", reflect.TypeOf((*MockM2API)(nil).UpdateEnvironmentRequest), arg0)
}

// UpdateEnvironmentWithContext mocks base method
func (m *MockM2API) UpdateEnvironmentWithContext(arg0 context.Context, arg1 *m2.UpdateEnvironmentInput, arg2 ...request.Option) (*m2.UpdateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*m2.UpdateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentWithContext indicates an expected call of UpdateEnvironmentWithContext
func (mr *MockM2APIMockRecorder) UpdateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentWithContext", reflect.TypeOf((*MockM2API)(nil).UpdateEnvironmentWithContext), varargs...)
}
