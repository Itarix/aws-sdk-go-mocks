// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/vpclattice/vpclatticeiface (interfaces: VPCLatticeAPI)

// Package vpclatticemock is a generated GoMock package.
package vpclatticemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	vpclattice "github.com/aws/aws-sdk-go/service/vpclattice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVPCLatticeAPI is a mock of VPCLatticeAPI interface
type MockVPCLatticeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVPCLatticeAPIMockRecorder
}

// MockVPCLatticeAPIMockRecorder is the mock recorder for MockVPCLatticeAPI
type MockVPCLatticeAPIMockRecorder struct {
	mock *MockVPCLatticeAPI
}

// NewMockVPCLatticeAPI creates a new mock instance
func NewMockVPCLatticeAPI(ctrl *gomock.Controller) *MockVPCLatticeAPI {
	mock := &MockVPCLatticeAPI{ctrl: ctrl}
	mock.recorder = &MockVPCLatticeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVPCLatticeAPI) EXPECT() *MockVPCLatticeAPIMockRecorder {
	return m.recorder
}

// BatchUpdateRule mocks base method
func (m *MockVPCLatticeAPI) BatchUpdateRule(arg0 *vpclattice.BatchUpdateRuleInput) (*vpclattice.BatchUpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateRule", arg0)
	ret0, _ := ret[0].(*vpclattice.BatchUpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateRule indicates an expected call of BatchUpdateRule
func (mr *MockVPCLatticeAPIMockRecorder) BatchUpdateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRule", reflect.TypeOf((*MockVPCLatticeAPI)(nil).BatchUpdateRule), arg0)
}

// BatchUpdateRuleRequest mocks base method
func (m *MockVPCLatticeAPI) BatchUpdateRuleRequest(arg0 *vpclattice.BatchUpdateRuleInput) (*request.Request, *vpclattice.BatchUpdateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.BatchUpdateRuleOutput)
	return ret0, ret1
}

// BatchUpdateRuleRequest indicates an expected call of BatchUpdateRuleRequest
func (mr *MockVPCLatticeAPIMockRecorder) BatchUpdateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRuleRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).BatchUpdateRuleRequest), arg0)
}

// BatchUpdateRuleWithContext mocks base method
func (m *MockVPCLatticeAPI) BatchUpdateRuleWithContext(arg0 context.Context, arg1 *vpclattice.BatchUpdateRuleInput, arg2 ...request.Option) (*vpclattice.BatchUpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.BatchUpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateRuleWithContext indicates an expected call of BatchUpdateRuleWithContext
func (mr *MockVPCLatticeAPIMockRecorder) BatchUpdateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateRuleWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).BatchUpdateRuleWithContext), varargs...)
}

// CreateAccessLogSubscription mocks base method
func (m *MockVPCLatticeAPI) CreateAccessLogSubscription(arg0 *vpclattice.CreateAccessLogSubscriptionInput) (*vpclattice.CreateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessLogSubscription indicates an expected call of CreateAccessLogSubscription
func (mr *MockVPCLatticeAPIMockRecorder) CreateAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogSubscription", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateAccessLogSubscription), arg0)
}

// CreateAccessLogSubscriptionRequest mocks base method
func (m *MockVPCLatticeAPI) CreateAccessLogSubscriptionRequest(arg0 *vpclattice.CreateAccessLogSubscriptionInput) (*request.Request, *vpclattice.CreateAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateAccessLogSubscriptionOutput)
	return ret0, ret1
}

// CreateAccessLogSubscriptionRequest indicates an expected call of CreateAccessLogSubscriptionRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogSubscriptionRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateAccessLogSubscriptionRequest), arg0)
}

// CreateAccessLogSubscriptionWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateAccessLogSubscriptionWithContext(arg0 context.Context, arg1 *vpclattice.CreateAccessLogSubscriptionInput, arg2 ...request.Option) (*vpclattice.CreateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessLogSubscriptionWithContext indicates an expected call of CreateAccessLogSubscriptionWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessLogSubscriptionWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateAccessLogSubscriptionWithContext), varargs...)
}

// CreateListener mocks base method
func (m *MockVPCLatticeAPI) CreateListener(arg0 *vpclattice.CreateListenerInput) (*vpclattice.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListener indicates an expected call of CreateListener
func (mr *MockVPCLatticeAPIMockRecorder) CreateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateListener), arg0)
}

// CreateListenerRequest mocks base method
func (m *MockVPCLatticeAPI) CreateListenerRequest(arg0 *vpclattice.CreateListenerInput) (*request.Request, *vpclattice.CreateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateListenerOutput)
	return ret0, ret1
}

// CreateListenerRequest indicates an expected call of CreateListenerRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateListenerRequest), arg0)
}

// CreateListenerWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateListenerWithContext(arg0 context.Context, arg1 *vpclattice.CreateListenerInput, arg2 ...request.Option) (*vpclattice.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListenerWithContext indicates an expected call of CreateListenerWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateListenerWithContext), varargs...)
}

// CreateRule mocks base method
func (m *MockVPCLatticeAPI) CreateRule(arg0 *vpclattice.CreateRuleInput) (*vpclattice.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule
func (mr *MockVPCLatticeAPIMockRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateRule), arg0)
}

// CreateRuleRequest mocks base method
func (m *MockVPCLatticeAPI) CreateRuleRequest(arg0 *vpclattice.CreateRuleInput) (*request.Request, *vpclattice.CreateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateRuleOutput)
	return ret0, ret1
}

// CreateRuleRequest indicates an expected call of CreateRuleRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateRuleRequest), arg0)
}

// CreateRuleWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateRuleWithContext(arg0 context.Context, arg1 *vpclattice.CreateRuleInput, arg2 ...request.Option) (*vpclattice.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleWithContext indicates an expected call of CreateRuleWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateRuleWithContext), varargs...)
}

// CreateService mocks base method
func (m *MockVPCLatticeAPI) CreateService(arg0 *vpclattice.CreateServiceInput) (*vpclattice.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService
func (mr *MockVPCLatticeAPIMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateService), arg0)
}

// CreateServiceNetwork mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetwork(arg0 *vpclattice.CreateServiceNetworkInput) (*vpclattice.CreateServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceNetwork", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceNetwork indicates an expected call of CreateServiceNetwork
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetwork", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetwork), arg0)
}

// CreateServiceNetworkRequest mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkRequest(arg0 *vpclattice.CreateServiceNetworkInput) (*request.Request, *vpclattice.CreateServiceNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateServiceNetworkOutput)
	return ret0, ret1
}

// CreateServiceNetworkRequest indicates an expected call of CreateServiceNetworkRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkRequest), arg0)
}

// CreateServiceNetworkServiceAssociation mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkServiceAssociation(arg0 *vpclattice.CreateServiceNetworkServiceAssociationInput) (*vpclattice.CreateServiceNetworkServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceNetworkServiceAssociation", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateServiceNetworkServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceNetworkServiceAssociation indicates an expected call of CreateServiceNetworkServiceAssociation
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkServiceAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkServiceAssociation", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkServiceAssociation), arg0)
}

// CreateServiceNetworkServiceAssociationRequest mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkServiceAssociationRequest(arg0 *vpclattice.CreateServiceNetworkServiceAssociationInput) (*request.Request, *vpclattice.CreateServiceNetworkServiceAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceNetworkServiceAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateServiceNetworkServiceAssociationOutput)
	return ret0, ret1
}

// CreateServiceNetworkServiceAssociationRequest indicates an expected call of CreateServiceNetworkServiceAssociationRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkServiceAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkServiceAssociationRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkServiceAssociationRequest), arg0)
}

// CreateServiceNetworkServiceAssociationWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkServiceAssociationWithContext(arg0 context.Context, arg1 *vpclattice.CreateServiceNetworkServiceAssociationInput, arg2 ...request.Option) (*vpclattice.CreateServiceNetworkServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceNetworkServiceAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateServiceNetworkServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceNetworkServiceAssociationWithContext indicates an expected call of CreateServiceNetworkServiceAssociationWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkServiceAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkServiceAssociationWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkServiceAssociationWithContext), varargs...)
}

// CreateServiceNetworkVpcAssociation mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkVpcAssociation(arg0 *vpclattice.CreateServiceNetworkVpcAssociationInput) (*vpclattice.CreateServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceNetworkVpcAssociation", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceNetworkVpcAssociation indicates an expected call of CreateServiceNetworkVpcAssociation
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkVpcAssociation", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkVpcAssociation), arg0)
}

// CreateServiceNetworkVpcAssociationRequest mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkVpcAssociationRequest(arg0 *vpclattice.CreateServiceNetworkVpcAssociationInput) (*request.Request, *vpclattice.CreateServiceNetworkVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceNetworkVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateServiceNetworkVpcAssociationOutput)
	return ret0, ret1
}

// CreateServiceNetworkVpcAssociationRequest indicates an expected call of CreateServiceNetworkVpcAssociationRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkVpcAssociationRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkVpcAssociationRequest), arg0)
}

// CreateServiceNetworkVpcAssociationWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkVpcAssociationWithContext(arg0 context.Context, arg1 *vpclattice.CreateServiceNetworkVpcAssociationInput, arg2 ...request.Option) (*vpclattice.CreateServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceNetworkVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceNetworkVpcAssociationWithContext indicates an expected call of CreateServiceNetworkVpcAssociationWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkVpcAssociationWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkVpcAssociationWithContext), varargs...)
}

// CreateServiceNetworkWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateServiceNetworkWithContext(arg0 context.Context, arg1 *vpclattice.CreateServiceNetworkInput, arg2 ...request.Option) (*vpclattice.CreateServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceNetworkWithContext indicates an expected call of CreateServiceNetworkWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceNetworkWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceNetworkWithContext), varargs...)
}

// CreateServiceRequest mocks base method
func (m *MockVPCLatticeAPI) CreateServiceRequest(arg0 *vpclattice.CreateServiceInput) (*request.Request, *vpclattice.CreateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateServiceOutput)
	return ret0, ret1
}

// CreateServiceRequest indicates an expected call of CreateServiceRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceRequest), arg0)
}

// CreateServiceWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateServiceWithContext(arg0 context.Context, arg1 *vpclattice.CreateServiceInput, arg2 ...request.Option) (*vpclattice.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceWithContext indicates an expected call of CreateServiceWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateServiceWithContext), varargs...)
}

// CreateTargetGroup mocks base method
func (m *MockVPCLatticeAPI) CreateTargetGroup(arg0 *vpclattice.CreateTargetGroupInput) (*vpclattice.CreateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroup", arg0)
	ret0, _ := ret[0].(*vpclattice.CreateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetGroup indicates an expected call of CreateTargetGroup
func (mr *MockVPCLatticeAPIMockRecorder) CreateTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroup", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateTargetGroup), arg0)
}

// CreateTargetGroupRequest mocks base method
func (m *MockVPCLatticeAPI) CreateTargetGroupRequest(arg0 *vpclattice.CreateTargetGroupInput) (*request.Request, *vpclattice.CreateTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.CreateTargetGroupOutput)
	return ret0, ret1
}

// CreateTargetGroupRequest indicates an expected call of CreateTargetGroupRequest
func (mr *MockVPCLatticeAPIMockRecorder) CreateTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroupRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateTargetGroupRequest), arg0)
}

// CreateTargetGroupWithContext mocks base method
func (m *MockVPCLatticeAPI) CreateTargetGroupWithContext(arg0 context.Context, arg1 *vpclattice.CreateTargetGroupInput, arg2 ...request.Option) (*vpclattice.CreateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.CreateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetGroupWithContext indicates an expected call of CreateTargetGroupWithContext
func (mr *MockVPCLatticeAPIMockRecorder) CreateTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetGroupWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).CreateTargetGroupWithContext), varargs...)
}

// DeleteAccessLogSubscription mocks base method
func (m *MockVPCLatticeAPI) DeleteAccessLogSubscription(arg0 *vpclattice.DeleteAccessLogSubscriptionInput) (*vpclattice.DeleteAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessLogSubscription indicates an expected call of DeleteAccessLogSubscription
func (mr *MockVPCLatticeAPIMockRecorder) DeleteAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSubscription", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteAccessLogSubscription), arg0)
}

// DeleteAccessLogSubscriptionRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteAccessLogSubscriptionRequest(arg0 *vpclattice.DeleteAccessLogSubscriptionInput) (*request.Request, *vpclattice.DeleteAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteAccessLogSubscriptionOutput)
	return ret0, ret1
}

// DeleteAccessLogSubscriptionRequest indicates an expected call of DeleteAccessLogSubscriptionRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSubscriptionRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteAccessLogSubscriptionRequest), arg0)
}

// DeleteAccessLogSubscriptionWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteAccessLogSubscriptionWithContext(arg0 context.Context, arg1 *vpclattice.DeleteAccessLogSubscriptionInput, arg2 ...request.Option) (*vpclattice.DeleteAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessLogSubscriptionWithContext indicates an expected call of DeleteAccessLogSubscriptionWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSubscriptionWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteAccessLogSubscriptionWithContext), varargs...)
}

// DeleteAuthPolicy mocks base method
func (m *MockVPCLatticeAPI) DeleteAuthPolicy(arg0 *vpclattice.DeleteAuthPolicyInput) (*vpclattice.DeleteAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthPolicy", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthPolicy indicates an expected call of DeleteAuthPolicy
func (mr *MockVPCLatticeAPIMockRecorder) DeleteAuthPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthPolicy", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteAuthPolicy), arg0)
}

// DeleteAuthPolicyRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteAuthPolicyRequest(arg0 *vpclattice.DeleteAuthPolicyInput) (*request.Request, *vpclattice.DeleteAuthPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteAuthPolicyOutput)
	return ret0, ret1
}

// DeleteAuthPolicyRequest indicates an expected call of DeleteAuthPolicyRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteAuthPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthPolicyRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteAuthPolicyRequest), arg0)
}

// DeleteAuthPolicyWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteAuthPolicyWithContext(arg0 context.Context, arg1 *vpclattice.DeleteAuthPolicyInput, arg2 ...request.Option) (*vpclattice.DeleteAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthPolicyWithContext indicates an expected call of DeleteAuthPolicyWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteAuthPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthPolicyWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteAuthPolicyWithContext), varargs...)
}

// DeleteListener mocks base method
func (m *MockVPCLatticeAPI) DeleteListener(arg0 *vpclattice.DeleteListenerInput) (*vpclattice.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListener", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListener indicates an expected call of DeleteListener
func (mr *MockVPCLatticeAPIMockRecorder) DeleteListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListener", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteListener), arg0)
}

// DeleteListenerRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteListenerRequest(arg0 *vpclattice.DeleteListenerInput) (*request.Request, *vpclattice.DeleteListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteListenerOutput)
	return ret0, ret1
}

// DeleteListenerRequest indicates an expected call of DeleteListenerRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteListenerRequest), arg0)
}

// DeleteListenerWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteListenerWithContext(arg0 context.Context, arg1 *vpclattice.DeleteListenerInput, arg2 ...request.Option) (*vpclattice.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteListenerWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListenerWithContext indicates an expected call of DeleteListenerWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteListenerWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method
func (m *MockVPCLatticeAPI) DeleteResourcePolicy(arg0 *vpclattice.DeleteResourcePolicyInput) (*vpclattice.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy
func (mr *MockVPCLatticeAPIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteResourcePolicyRequest(arg0 *vpclattice.DeleteResourcePolicyInput) (*request.Request, *vpclattice.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteResourcePolicyWithContext(arg0 context.Context, arg1 *vpclattice.DeleteResourcePolicyInput, arg2 ...request.Option) (*vpclattice.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteRule mocks base method
func (m *MockVPCLatticeAPI) DeleteRule(arg0 *vpclattice.DeleteRuleInput) (*vpclattice.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule
func (mr *MockVPCLatticeAPIMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteRule), arg0)
}

// DeleteRuleRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteRuleRequest(arg0 *vpclattice.DeleteRuleInput) (*request.Request, *vpclattice.DeleteRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteRuleOutput)
	return ret0, ret1
}

// DeleteRuleRequest indicates an expected call of DeleteRuleRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteRuleRequest), arg0)
}

// DeleteRuleWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteRuleWithContext(arg0 context.Context, arg1 *vpclattice.DeleteRuleInput, arg2 ...request.Option) (*vpclattice.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleWithContext indicates an expected call of DeleteRuleWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteRuleWithContext), varargs...)
}

// DeleteService mocks base method
func (m *MockVPCLatticeAPI) DeleteService(arg0 *vpclattice.DeleteServiceInput) (*vpclattice.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockVPCLatticeAPIMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteService), arg0)
}

// DeleteServiceNetwork mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetwork(arg0 *vpclattice.DeleteServiceNetworkInput) (*vpclattice.DeleteServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceNetwork", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceNetwork indicates an expected call of DeleteServiceNetwork
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetwork", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetwork), arg0)
}

// DeleteServiceNetworkRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkRequest(arg0 *vpclattice.DeleteServiceNetworkInput) (*request.Request, *vpclattice.DeleteServiceNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteServiceNetworkOutput)
	return ret0, ret1
}

// DeleteServiceNetworkRequest indicates an expected call of DeleteServiceNetworkRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkRequest), arg0)
}

// DeleteServiceNetworkServiceAssociation mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkServiceAssociation(arg0 *vpclattice.DeleteServiceNetworkServiceAssociationInput) (*vpclattice.DeleteServiceNetworkServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceNetworkServiceAssociation", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceNetworkServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceNetworkServiceAssociation indicates an expected call of DeleteServiceNetworkServiceAssociation
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkServiceAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkServiceAssociation", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkServiceAssociation), arg0)
}

// DeleteServiceNetworkServiceAssociationRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkServiceAssociationRequest(arg0 *vpclattice.DeleteServiceNetworkServiceAssociationInput) (*request.Request, *vpclattice.DeleteServiceNetworkServiceAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceNetworkServiceAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteServiceNetworkServiceAssociationOutput)
	return ret0, ret1
}

// DeleteServiceNetworkServiceAssociationRequest indicates an expected call of DeleteServiceNetworkServiceAssociationRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkServiceAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkServiceAssociationRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkServiceAssociationRequest), arg0)
}

// DeleteServiceNetworkServiceAssociationWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkServiceAssociationWithContext(arg0 context.Context, arg1 *vpclattice.DeleteServiceNetworkServiceAssociationInput, arg2 ...request.Option) (*vpclattice.DeleteServiceNetworkServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceNetworkServiceAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceNetworkServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceNetworkServiceAssociationWithContext indicates an expected call of DeleteServiceNetworkServiceAssociationWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkServiceAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkServiceAssociationWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkServiceAssociationWithContext), varargs...)
}

// DeleteServiceNetworkVpcAssociation mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkVpcAssociation(arg0 *vpclattice.DeleteServiceNetworkVpcAssociationInput) (*vpclattice.DeleteServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceNetworkVpcAssociation", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceNetworkVpcAssociation indicates an expected call of DeleteServiceNetworkVpcAssociation
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkVpcAssociation", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkVpcAssociation), arg0)
}

// DeleteServiceNetworkVpcAssociationRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkVpcAssociationRequest(arg0 *vpclattice.DeleteServiceNetworkVpcAssociationInput) (*request.Request, *vpclattice.DeleteServiceNetworkVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceNetworkVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteServiceNetworkVpcAssociationOutput)
	return ret0, ret1
}

// DeleteServiceNetworkVpcAssociationRequest indicates an expected call of DeleteServiceNetworkVpcAssociationRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkVpcAssociationRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkVpcAssociationRequest), arg0)
}

// DeleteServiceNetworkVpcAssociationWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkVpcAssociationWithContext(arg0 context.Context, arg1 *vpclattice.DeleteServiceNetworkVpcAssociationInput, arg2 ...request.Option) (*vpclattice.DeleteServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceNetworkVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceNetworkVpcAssociationWithContext indicates an expected call of DeleteServiceNetworkVpcAssociationWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkVpcAssociationWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkVpcAssociationWithContext), varargs...)
}

// DeleteServiceNetworkWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceNetworkWithContext(arg0 context.Context, arg1 *vpclattice.DeleteServiceNetworkInput, arg2 ...request.Option) (*vpclattice.DeleteServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceNetworkWithContext indicates an expected call of DeleteServiceNetworkWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceNetworkWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceNetworkWithContext), varargs...)
}

// DeleteServiceRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceRequest(arg0 *vpclattice.DeleteServiceInput) (*request.Request, *vpclattice.DeleteServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteServiceOutput)
	return ret0, ret1
}

// DeleteServiceRequest indicates an expected call of DeleteServiceRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceRequest), arg0)
}

// DeleteServiceWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteServiceWithContext(arg0 context.Context, arg1 *vpclattice.DeleteServiceInput, arg2 ...request.Option) (*vpclattice.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceWithContext indicates an expected call of DeleteServiceWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteServiceWithContext), varargs...)
}

// DeleteTargetGroup mocks base method
func (m *MockVPCLatticeAPI) DeleteTargetGroup(arg0 *vpclattice.DeleteTargetGroupInput) (*vpclattice.DeleteTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetGroup", arg0)
	ret0, _ := ret[0].(*vpclattice.DeleteTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetGroup indicates an expected call of DeleteTargetGroup
func (mr *MockVPCLatticeAPIMockRecorder) DeleteTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroup", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteTargetGroup), arg0)
}

// DeleteTargetGroupRequest mocks base method
func (m *MockVPCLatticeAPI) DeleteTargetGroupRequest(arg0 *vpclattice.DeleteTargetGroupInput) (*request.Request, *vpclattice.DeleteTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeleteTargetGroupOutput)
	return ret0, ret1
}

// DeleteTargetGroupRequest indicates an expected call of DeleteTargetGroupRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeleteTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroupRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteTargetGroupRequest), arg0)
}

// DeleteTargetGroupWithContext mocks base method
func (m *MockVPCLatticeAPI) DeleteTargetGroupWithContext(arg0 context.Context, arg1 *vpclattice.DeleteTargetGroupInput, arg2 ...request.Option) (*vpclattice.DeleteTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeleteTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetGroupWithContext indicates an expected call of DeleteTargetGroupWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeleteTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetGroupWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeleteTargetGroupWithContext), varargs...)
}

// DeregisterTargets mocks base method
func (m *MockVPCLatticeAPI) DeregisterTargets(arg0 *vpclattice.DeregisterTargetsInput) (*vpclattice.DeregisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTargets", arg0)
	ret0, _ := ret[0].(*vpclattice.DeregisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterTargets indicates an expected call of DeregisterTargets
func (mr *MockVPCLatticeAPIMockRecorder) DeregisterTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargets", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeregisterTargets), arg0)
}

// DeregisterTargetsRequest mocks base method
func (m *MockVPCLatticeAPI) DeregisterTargetsRequest(arg0 *vpclattice.DeregisterTargetsInput) (*request.Request, *vpclattice.DeregisterTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.DeregisterTargetsOutput)
	return ret0, ret1
}

// DeregisterTargetsRequest indicates an expected call of DeregisterTargetsRequest
func (mr *MockVPCLatticeAPIMockRecorder) DeregisterTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargetsRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeregisterTargetsRequest), arg0)
}

// DeregisterTargetsWithContext mocks base method
func (m *MockVPCLatticeAPI) DeregisterTargetsWithContext(arg0 context.Context, arg1 *vpclattice.DeregisterTargetsInput, arg2 ...request.Option) (*vpclattice.DeregisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.DeregisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterTargetsWithContext indicates an expected call of DeregisterTargetsWithContext
func (mr *MockVPCLatticeAPIMockRecorder) DeregisterTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTargetsWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).DeregisterTargetsWithContext), varargs...)
}

// GetAccessLogSubscription mocks base method
func (m *MockVPCLatticeAPI) GetAccessLogSubscription(arg0 *vpclattice.GetAccessLogSubscriptionInput) (*vpclattice.GetAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*vpclattice.GetAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessLogSubscription indicates an expected call of GetAccessLogSubscription
func (mr *MockVPCLatticeAPIMockRecorder) GetAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogSubscription", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetAccessLogSubscription), arg0)
}

// GetAccessLogSubscriptionRequest mocks base method
func (m *MockVPCLatticeAPI) GetAccessLogSubscriptionRequest(arg0 *vpclattice.GetAccessLogSubscriptionInput) (*request.Request, *vpclattice.GetAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetAccessLogSubscriptionOutput)
	return ret0, ret1
}

// GetAccessLogSubscriptionRequest indicates an expected call of GetAccessLogSubscriptionRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogSubscriptionRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetAccessLogSubscriptionRequest), arg0)
}

// GetAccessLogSubscriptionWithContext mocks base method
func (m *MockVPCLatticeAPI) GetAccessLogSubscriptionWithContext(arg0 context.Context, arg1 *vpclattice.GetAccessLogSubscriptionInput, arg2 ...request.Option) (*vpclattice.GetAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessLogSubscriptionWithContext indicates an expected call of GetAccessLogSubscriptionWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogSubscriptionWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetAccessLogSubscriptionWithContext), varargs...)
}

// GetAuthPolicy mocks base method
func (m *MockVPCLatticeAPI) GetAuthPolicy(arg0 *vpclattice.GetAuthPolicyInput) (*vpclattice.GetAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthPolicy", arg0)
	ret0, _ := ret[0].(*vpclattice.GetAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthPolicy indicates an expected call of GetAuthPolicy
func (mr *MockVPCLatticeAPIMockRecorder) GetAuthPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthPolicy", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetAuthPolicy), arg0)
}

// GetAuthPolicyRequest mocks base method
func (m *MockVPCLatticeAPI) GetAuthPolicyRequest(arg0 *vpclattice.GetAuthPolicyInput) (*request.Request, *vpclattice.GetAuthPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetAuthPolicyOutput)
	return ret0, ret1
}

// GetAuthPolicyRequest indicates an expected call of GetAuthPolicyRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetAuthPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthPolicyRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetAuthPolicyRequest), arg0)
}

// GetAuthPolicyWithContext mocks base method
func (m *MockVPCLatticeAPI) GetAuthPolicyWithContext(arg0 context.Context, arg1 *vpclattice.GetAuthPolicyInput, arg2 ...request.Option) (*vpclattice.GetAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthPolicyWithContext indicates an expected call of GetAuthPolicyWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetAuthPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthPolicyWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetAuthPolicyWithContext), varargs...)
}

// GetListener mocks base method
func (m *MockVPCLatticeAPI) GetListener(arg0 *vpclattice.GetListenerInput) (*vpclattice.GetListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListener", arg0)
	ret0, _ := ret[0].(*vpclattice.GetListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListener indicates an expected call of GetListener
func (mr *MockVPCLatticeAPIMockRecorder) GetListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListener", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetListener), arg0)
}

// GetListenerRequest mocks base method
func (m *MockVPCLatticeAPI) GetListenerRequest(arg0 *vpclattice.GetListenerInput) (*request.Request, *vpclattice.GetListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetListenerOutput)
	return ret0, ret1
}

// GetListenerRequest indicates an expected call of GetListenerRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListenerRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetListenerRequest), arg0)
}

// GetListenerWithContext mocks base method
func (m *MockVPCLatticeAPI) GetListenerWithContext(arg0 context.Context, arg1 *vpclattice.GetListenerInput, arg2 ...request.Option) (*vpclattice.GetListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListenerWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListenerWithContext indicates an expected call of GetListenerWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListenerWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetListenerWithContext), varargs...)
}

// GetResourcePolicy mocks base method
func (m *MockVPCLatticeAPI) GetResourcePolicy(arg0 *vpclattice.GetResourcePolicyInput) (*vpclattice.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0)
	ret0, _ := ret[0].(*vpclattice.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy
func (mr *MockVPCLatticeAPIMockRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetResourcePolicy), arg0)
}

// GetResourcePolicyRequest mocks base method
func (m *MockVPCLatticeAPI) GetResourcePolicyRequest(arg0 *vpclattice.GetResourcePolicyInput) (*request.Request, *vpclattice.GetResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetResourcePolicyOutput)
	return ret0, ret1
}

// GetResourcePolicyRequest indicates an expected call of GetResourcePolicyRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetResourcePolicyRequest), arg0)
}

// GetResourcePolicyWithContext mocks base method
func (m *MockVPCLatticeAPI) GetResourcePolicyWithContext(arg0 context.Context, arg1 *vpclattice.GetResourcePolicyInput, arg2 ...request.Option) (*vpclattice.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicyWithContext indicates an expected call of GetResourcePolicyWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetResourcePolicyWithContext), varargs...)
}

// GetRule mocks base method
func (m *MockVPCLatticeAPI) GetRule(arg0 *vpclattice.GetRuleInput) (*vpclattice.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0)
	ret0, _ := ret[0].(*vpclattice.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule
func (mr *MockVPCLatticeAPIMockRecorder) GetRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetRule), arg0)
}

// GetRuleRequest mocks base method
func (m *MockVPCLatticeAPI) GetRuleRequest(arg0 *vpclattice.GetRuleInput) (*request.Request, *vpclattice.GetRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetRuleOutput)
	return ret0, ret1
}

// GetRuleRequest indicates an expected call of GetRuleRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetRuleRequest), arg0)
}

// GetRuleWithContext mocks base method
func (m *MockVPCLatticeAPI) GetRuleWithContext(arg0 context.Context, arg1 *vpclattice.GetRuleInput, arg2 ...request.Option) (*vpclattice.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleWithContext indicates an expected call of GetRuleWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetRuleWithContext), varargs...)
}

// GetService mocks base method
func (m *MockVPCLatticeAPI) GetService(arg0 *vpclattice.GetServiceInput) (*vpclattice.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*vpclattice.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockVPCLatticeAPIMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetService), arg0)
}

// GetServiceNetwork mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetwork(arg0 *vpclattice.GetServiceNetworkInput) (*vpclattice.GetServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNetwork", arg0)
	ret0, _ := ret[0].(*vpclattice.GetServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNetwork indicates an expected call of GetServiceNetwork
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetwork", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetwork), arg0)
}

// GetServiceNetworkRequest mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkRequest(arg0 *vpclattice.GetServiceNetworkInput) (*request.Request, *vpclattice.GetServiceNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetServiceNetworkOutput)
	return ret0, ret1
}

// GetServiceNetworkRequest indicates an expected call of GetServiceNetworkRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkRequest), arg0)
}

// GetServiceNetworkServiceAssociation mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkServiceAssociation(arg0 *vpclattice.GetServiceNetworkServiceAssociationInput) (*vpclattice.GetServiceNetworkServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNetworkServiceAssociation", arg0)
	ret0, _ := ret[0].(*vpclattice.GetServiceNetworkServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNetworkServiceAssociation indicates an expected call of GetServiceNetworkServiceAssociation
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkServiceAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkServiceAssociation", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkServiceAssociation), arg0)
}

// GetServiceNetworkServiceAssociationRequest mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkServiceAssociationRequest(arg0 *vpclattice.GetServiceNetworkServiceAssociationInput) (*request.Request, *vpclattice.GetServiceNetworkServiceAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNetworkServiceAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetServiceNetworkServiceAssociationOutput)
	return ret0, ret1
}

// GetServiceNetworkServiceAssociationRequest indicates an expected call of GetServiceNetworkServiceAssociationRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkServiceAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkServiceAssociationRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkServiceAssociationRequest), arg0)
}

// GetServiceNetworkServiceAssociationWithContext mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkServiceAssociationWithContext(arg0 context.Context, arg1 *vpclattice.GetServiceNetworkServiceAssociationInput, arg2 ...request.Option) (*vpclattice.GetServiceNetworkServiceAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceNetworkServiceAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetServiceNetworkServiceAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNetworkServiceAssociationWithContext indicates an expected call of GetServiceNetworkServiceAssociationWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkServiceAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkServiceAssociationWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkServiceAssociationWithContext), varargs...)
}

// GetServiceNetworkVpcAssociation mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkVpcAssociation(arg0 *vpclattice.GetServiceNetworkVpcAssociationInput) (*vpclattice.GetServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNetworkVpcAssociation", arg0)
	ret0, _ := ret[0].(*vpclattice.GetServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNetworkVpcAssociation indicates an expected call of GetServiceNetworkVpcAssociation
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkVpcAssociation", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkVpcAssociation), arg0)
}

// GetServiceNetworkVpcAssociationRequest mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkVpcAssociationRequest(arg0 *vpclattice.GetServiceNetworkVpcAssociationInput) (*request.Request, *vpclattice.GetServiceNetworkVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNetworkVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetServiceNetworkVpcAssociationOutput)
	return ret0, ret1
}

// GetServiceNetworkVpcAssociationRequest indicates an expected call of GetServiceNetworkVpcAssociationRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkVpcAssociationRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkVpcAssociationRequest), arg0)
}

// GetServiceNetworkVpcAssociationWithContext mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkVpcAssociationWithContext(arg0 context.Context, arg1 *vpclattice.GetServiceNetworkVpcAssociationInput, arg2 ...request.Option) (*vpclattice.GetServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceNetworkVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNetworkVpcAssociationWithContext indicates an expected call of GetServiceNetworkVpcAssociationWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkVpcAssociationWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkVpcAssociationWithContext), varargs...)
}

// GetServiceNetworkWithContext mocks base method
func (m *MockVPCLatticeAPI) GetServiceNetworkWithContext(arg0 context.Context, arg1 *vpclattice.GetServiceNetworkInput, arg2 ...request.Option) (*vpclattice.GetServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNetworkWithContext indicates an expected call of GetServiceNetworkWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceNetworkWithContext), varargs...)
}

// GetServiceRequest mocks base method
func (m *MockVPCLatticeAPI) GetServiceRequest(arg0 *vpclattice.GetServiceInput) (*request.Request, *vpclattice.GetServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetServiceOutput)
	return ret0, ret1
}

// GetServiceRequest indicates an expected call of GetServiceRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceRequest), arg0)
}

// GetServiceWithContext mocks base method
func (m *MockVPCLatticeAPI) GetServiceWithContext(arg0 context.Context, arg1 *vpclattice.GetServiceInput, arg2 ...request.Option) (*vpclattice.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetServiceWithContext), varargs...)
}

// GetTargetGroup mocks base method
func (m *MockVPCLatticeAPI) GetTargetGroup(arg0 *vpclattice.GetTargetGroupInput) (*vpclattice.GetTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroup", arg0)
	ret0, _ := ret[0].(*vpclattice.GetTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetGroup indicates an expected call of GetTargetGroup
func (mr *MockVPCLatticeAPIMockRecorder) GetTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroup", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetTargetGroup), arg0)
}

// GetTargetGroupRequest mocks base method
func (m *MockVPCLatticeAPI) GetTargetGroupRequest(arg0 *vpclattice.GetTargetGroupInput) (*request.Request, *vpclattice.GetTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.GetTargetGroupOutput)
	return ret0, ret1
}

// GetTargetGroupRequest indicates an expected call of GetTargetGroupRequest
func (mr *MockVPCLatticeAPIMockRecorder) GetTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetTargetGroupRequest), arg0)
}

// GetTargetGroupWithContext mocks base method
func (m *MockVPCLatticeAPI) GetTargetGroupWithContext(arg0 context.Context, arg1 *vpclattice.GetTargetGroupInput, arg2 ...request.Option) (*vpclattice.GetTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.GetTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetGroupWithContext indicates an expected call of GetTargetGroupWithContext
func (mr *MockVPCLatticeAPIMockRecorder) GetTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetGroupWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).GetTargetGroupWithContext), varargs...)
}

// ListAccessLogSubscriptions mocks base method
func (m *MockVPCLatticeAPI) ListAccessLogSubscriptions(arg0 *vpclattice.ListAccessLogSubscriptionsInput) (*vpclattice.ListAccessLogSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptions", arg0)
	ret0, _ := ret[0].(*vpclattice.ListAccessLogSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessLogSubscriptions indicates an expected call of ListAccessLogSubscriptions
func (mr *MockVPCLatticeAPIMockRecorder) ListAccessLogSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptions", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListAccessLogSubscriptions), arg0)
}

// ListAccessLogSubscriptionsPages mocks base method
func (m *MockVPCLatticeAPI) ListAccessLogSubscriptionsPages(arg0 *vpclattice.ListAccessLogSubscriptionsInput, arg1 func(*vpclattice.ListAccessLogSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessLogSubscriptionsPages indicates an expected call of ListAccessLogSubscriptionsPages
func (mr *MockVPCLatticeAPIMockRecorder) ListAccessLogSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptionsPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListAccessLogSubscriptionsPages), arg0, arg1)
}

// ListAccessLogSubscriptionsPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListAccessLogSubscriptionsPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListAccessLogSubscriptionsInput, arg2 func(*vpclattice.ListAccessLogSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessLogSubscriptionsPagesWithContext indicates an expected call of ListAccessLogSubscriptionsPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListAccessLogSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptionsPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListAccessLogSubscriptionsPagesWithContext), varargs...)
}

// ListAccessLogSubscriptionsRequest mocks base method
func (m *MockVPCLatticeAPI) ListAccessLogSubscriptionsRequest(arg0 *vpclattice.ListAccessLogSubscriptionsInput) (*request.Request, *vpclattice.ListAccessLogSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListAccessLogSubscriptionsOutput)
	return ret0, ret1
}

// ListAccessLogSubscriptionsRequest indicates an expected call of ListAccessLogSubscriptionsRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListAccessLogSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptionsRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListAccessLogSubscriptionsRequest), arg0)
}

// ListAccessLogSubscriptionsWithContext mocks base method
func (m *MockVPCLatticeAPI) ListAccessLogSubscriptionsWithContext(arg0 context.Context, arg1 *vpclattice.ListAccessLogSubscriptionsInput, arg2 ...request.Option) (*vpclattice.ListAccessLogSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessLogSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListAccessLogSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessLogSubscriptionsWithContext indicates an expected call of ListAccessLogSubscriptionsWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListAccessLogSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessLogSubscriptionsWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListAccessLogSubscriptionsWithContext), varargs...)
}

// ListListeners mocks base method
func (m *MockVPCLatticeAPI) ListListeners(arg0 *vpclattice.ListListenersInput) (*vpclattice.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListeners", arg0)
	ret0, _ := ret[0].(*vpclattice.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListeners indicates an expected call of ListListeners
func (mr *MockVPCLatticeAPIMockRecorder) ListListeners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListeners", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListListeners), arg0)
}

// ListListenersPages mocks base method
func (m *MockVPCLatticeAPI) ListListenersPages(arg0 *vpclattice.ListListenersInput, arg1 func(*vpclattice.ListListenersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListenersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListListenersPages indicates an expected call of ListListenersPages
func (mr *MockVPCLatticeAPIMockRecorder) ListListenersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListListenersPages), arg0, arg1)
}

// ListListenersPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListListenersPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListListenersInput, arg2 func(*vpclattice.ListListenersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListListenersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListListenersPagesWithContext indicates an expected call of ListListenersPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListListenersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListListenersPagesWithContext), varargs...)
}

// ListListenersRequest mocks base method
func (m *MockVPCLatticeAPI) ListListenersRequest(arg0 *vpclattice.ListListenersInput) (*request.Request, *vpclattice.ListListenersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListenersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListListenersOutput)
	return ret0, ret1
}

// ListListenersRequest indicates an expected call of ListListenersRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListListenersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListListenersRequest), arg0)
}

// ListListenersWithContext mocks base method
func (m *MockVPCLatticeAPI) ListListenersWithContext(arg0 context.Context, arg1 *vpclattice.ListListenersInput, arg2 ...request.Option) (*vpclattice.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListListenersWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListenersWithContext indicates an expected call of ListListenersWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListListenersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListListenersWithContext), varargs...)
}

// ListRules mocks base method
func (m *MockVPCLatticeAPI) ListRules(arg0 *vpclattice.ListRulesInput) (*vpclattice.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].(*vpclattice.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules
func (mr *MockVPCLatticeAPIMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListRules), arg0)
}

// ListRulesPages mocks base method
func (m *MockVPCLatticeAPI) ListRulesPages(arg0 *vpclattice.ListRulesInput, arg1 func(*vpclattice.ListRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPages indicates an expected call of ListRulesPages
func (mr *MockVPCLatticeAPIMockRecorder) ListRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListRulesPages), arg0, arg1)
}

// ListRulesPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListRulesPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListRulesInput, arg2 func(*vpclattice.ListRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPagesWithContext indicates an expected call of ListRulesPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListRulesPagesWithContext), varargs...)
}

// ListRulesRequest mocks base method
func (m *MockVPCLatticeAPI) ListRulesRequest(arg0 *vpclattice.ListRulesInput) (*request.Request, *vpclattice.ListRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListRulesOutput)
	return ret0, ret1
}

// ListRulesRequest indicates an expected call of ListRulesRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListRulesRequest), arg0)
}

// ListRulesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListRulesWithContext(arg0 context.Context, arg1 *vpclattice.ListRulesInput, arg2 ...request.Option) (*vpclattice.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesWithContext indicates an expected call of ListRulesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListRulesWithContext), varargs...)
}

// ListServiceNetworkServiceAssociations mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkServiceAssociations(arg0 *vpclattice.ListServiceNetworkServiceAssociationsInput) (*vpclattice.ListServiceNetworkServiceAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworkServiceAssociations", arg0)
	ret0, _ := ret[0].(*vpclattice.ListServiceNetworkServiceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceNetworkServiceAssociations indicates an expected call of ListServiceNetworkServiceAssociations
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkServiceAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkServiceAssociations", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkServiceAssociations), arg0)
}

// ListServiceNetworkServiceAssociationsPages mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkServiceAssociationsPages(arg0 *vpclattice.ListServiceNetworkServiceAssociationsInput, arg1 func(*vpclattice.ListServiceNetworkServiceAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworkServiceAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceNetworkServiceAssociationsPages indicates an expected call of ListServiceNetworkServiceAssociationsPages
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkServiceAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkServiceAssociationsPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkServiceAssociationsPages), arg0, arg1)
}

// ListServiceNetworkServiceAssociationsPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkServiceAssociationsPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListServiceNetworkServiceAssociationsInput, arg2 func(*vpclattice.ListServiceNetworkServiceAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceNetworkServiceAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceNetworkServiceAssociationsPagesWithContext indicates an expected call of ListServiceNetworkServiceAssociationsPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkServiceAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkServiceAssociationsPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkServiceAssociationsPagesWithContext), varargs...)
}

// ListServiceNetworkServiceAssociationsRequest mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkServiceAssociationsRequest(arg0 *vpclattice.ListServiceNetworkServiceAssociationsInput) (*request.Request, *vpclattice.ListServiceNetworkServiceAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworkServiceAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListServiceNetworkServiceAssociationsOutput)
	return ret0, ret1
}

// ListServiceNetworkServiceAssociationsRequest indicates an expected call of ListServiceNetworkServiceAssociationsRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkServiceAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkServiceAssociationsRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkServiceAssociationsRequest), arg0)
}

// ListServiceNetworkServiceAssociationsWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkServiceAssociationsWithContext(arg0 context.Context, arg1 *vpclattice.ListServiceNetworkServiceAssociationsInput, arg2 ...request.Option) (*vpclattice.ListServiceNetworkServiceAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceNetworkServiceAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListServiceNetworkServiceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceNetworkServiceAssociationsWithContext indicates an expected call of ListServiceNetworkServiceAssociationsWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkServiceAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkServiceAssociationsWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkServiceAssociationsWithContext), varargs...)
}

// ListServiceNetworkVpcAssociations mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkVpcAssociations(arg0 *vpclattice.ListServiceNetworkVpcAssociationsInput) (*vpclattice.ListServiceNetworkVpcAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworkVpcAssociations", arg0)
	ret0, _ := ret[0].(*vpclattice.ListServiceNetworkVpcAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceNetworkVpcAssociations indicates an expected call of ListServiceNetworkVpcAssociations
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkVpcAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkVpcAssociations", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkVpcAssociations), arg0)
}

// ListServiceNetworkVpcAssociationsPages mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkVpcAssociationsPages(arg0 *vpclattice.ListServiceNetworkVpcAssociationsInput, arg1 func(*vpclattice.ListServiceNetworkVpcAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworkVpcAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceNetworkVpcAssociationsPages indicates an expected call of ListServiceNetworkVpcAssociationsPages
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkVpcAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkVpcAssociationsPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkVpcAssociationsPages), arg0, arg1)
}

// ListServiceNetworkVpcAssociationsPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkVpcAssociationsPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListServiceNetworkVpcAssociationsInput, arg2 func(*vpclattice.ListServiceNetworkVpcAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceNetworkVpcAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceNetworkVpcAssociationsPagesWithContext indicates an expected call of ListServiceNetworkVpcAssociationsPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkVpcAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkVpcAssociationsPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkVpcAssociationsPagesWithContext), varargs...)
}

// ListServiceNetworkVpcAssociationsRequest mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkVpcAssociationsRequest(arg0 *vpclattice.ListServiceNetworkVpcAssociationsInput) (*request.Request, *vpclattice.ListServiceNetworkVpcAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworkVpcAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListServiceNetworkVpcAssociationsOutput)
	return ret0, ret1
}

// ListServiceNetworkVpcAssociationsRequest indicates an expected call of ListServiceNetworkVpcAssociationsRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkVpcAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkVpcAssociationsRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkVpcAssociationsRequest), arg0)
}

// ListServiceNetworkVpcAssociationsWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworkVpcAssociationsWithContext(arg0 context.Context, arg1 *vpclattice.ListServiceNetworkVpcAssociationsInput, arg2 ...request.Option) (*vpclattice.ListServiceNetworkVpcAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceNetworkVpcAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListServiceNetworkVpcAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceNetworkVpcAssociationsWithContext indicates an expected call of ListServiceNetworkVpcAssociationsWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworkVpcAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworkVpcAssociationsWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworkVpcAssociationsWithContext), varargs...)
}

// ListServiceNetworks mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworks(arg0 *vpclattice.ListServiceNetworksInput) (*vpclattice.ListServiceNetworksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworks", arg0)
	ret0, _ := ret[0].(*vpclattice.ListServiceNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceNetworks indicates an expected call of ListServiceNetworks
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworks", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworks), arg0)
}

// ListServiceNetworksPages mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworksPages(arg0 *vpclattice.ListServiceNetworksInput, arg1 func(*vpclattice.ListServiceNetworksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceNetworksPages indicates an expected call of ListServiceNetworksPages
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworksPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworksPages), arg0, arg1)
}

// ListServiceNetworksPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworksPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListServiceNetworksInput, arg2 func(*vpclattice.ListServiceNetworksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceNetworksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceNetworksPagesWithContext indicates an expected call of ListServiceNetworksPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworksPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworksPagesWithContext), varargs...)
}

// ListServiceNetworksRequest mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworksRequest(arg0 *vpclattice.ListServiceNetworksInput) (*request.Request, *vpclattice.ListServiceNetworksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceNetworksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListServiceNetworksOutput)
	return ret0, ret1
}

// ListServiceNetworksRequest indicates an expected call of ListServiceNetworksRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworksRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworksRequest), arg0)
}

// ListServiceNetworksWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServiceNetworksWithContext(arg0 context.Context, arg1 *vpclattice.ListServiceNetworksInput, arg2 ...request.Option) (*vpclattice.ListServiceNetworksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceNetworksWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListServiceNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceNetworksWithContext indicates an expected call of ListServiceNetworksWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServiceNetworksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNetworksWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServiceNetworksWithContext), varargs...)
}

// ListServices mocks base method
func (m *MockVPCLatticeAPI) ListServices(arg0 *vpclattice.ListServicesInput) (*vpclattice.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*vpclattice.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockVPCLatticeAPIMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServices), arg0)
}

// ListServicesPages mocks base method
func (m *MockVPCLatticeAPI) ListServicesPages(arg0 *vpclattice.ListServicesInput, arg1 func(*vpclattice.ListServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPages indicates an expected call of ListServicesPages
func (mr *MockVPCLatticeAPIMockRecorder) ListServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServicesPages), arg0, arg1)
}

// ListServicesPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServicesPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListServicesInput, arg2 func(*vpclattice.ListServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPagesWithContext indicates an expected call of ListServicesPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServicesPagesWithContext), varargs...)
}

// ListServicesRequest mocks base method
func (m *MockVPCLatticeAPI) ListServicesRequest(arg0 *vpclattice.ListServicesInput) (*request.Request, *vpclattice.ListServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListServicesOutput)
	return ret0, ret1
}

// ListServicesRequest indicates an expected call of ListServicesRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServicesRequest), arg0)
}

// ListServicesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListServicesWithContext(arg0 context.Context, arg1 *vpclattice.ListServicesInput, arg2 ...request.Option) (*vpclattice.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesWithContext indicates an expected call of ListServicesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListServicesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockVPCLatticeAPI) ListTagsForResource(arg0 *vpclattice.ListTagsForResourceInput) (*vpclattice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*vpclattice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockVPCLatticeAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockVPCLatticeAPI) ListTagsForResourceRequest(arg0 *vpclattice.ListTagsForResourceInput) (*request.Request, *vpclattice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockVPCLatticeAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *vpclattice.ListTagsForResourceInput, arg2 ...request.Option) (*vpclattice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTargetGroups mocks base method
func (m *MockVPCLatticeAPI) ListTargetGroups(arg0 *vpclattice.ListTargetGroupsInput) (*vpclattice.ListTargetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetGroups", arg0)
	ret0, _ := ret[0].(*vpclattice.ListTargetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetGroups indicates an expected call of ListTargetGroups
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroups", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetGroups), arg0)
}

// ListTargetGroupsPages mocks base method
func (m *MockVPCLatticeAPI) ListTargetGroupsPages(arg0 *vpclattice.ListTargetGroupsInput, arg1 func(*vpclattice.ListTargetGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetGroupsPages indicates an expected call of ListTargetGroupsPages
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroupsPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetGroupsPages), arg0, arg1)
}

// ListTargetGroupsPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListTargetGroupsPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListTargetGroupsInput, arg2 func(*vpclattice.ListTargetGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetGroupsPagesWithContext indicates an expected call of ListTargetGroupsPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroupsPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetGroupsPagesWithContext), varargs...)
}

// ListTargetGroupsRequest mocks base method
func (m *MockVPCLatticeAPI) ListTargetGroupsRequest(arg0 *vpclattice.ListTargetGroupsInput) (*request.Request, *vpclattice.ListTargetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListTargetGroupsOutput)
	return ret0, ret1
}

// ListTargetGroupsRequest indicates an expected call of ListTargetGroupsRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroupsRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetGroupsRequest), arg0)
}

// ListTargetGroupsWithContext mocks base method
func (m *MockVPCLatticeAPI) ListTargetGroupsWithContext(arg0 context.Context, arg1 *vpclattice.ListTargetGroupsInput, arg2 ...request.Option) (*vpclattice.ListTargetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListTargetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetGroupsWithContext indicates an expected call of ListTargetGroupsWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetGroupsWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetGroupsWithContext), varargs...)
}

// ListTargets mocks base method
func (m *MockVPCLatticeAPI) ListTargets(arg0 *vpclattice.ListTargetsInput) (*vpclattice.ListTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargets", arg0)
	ret0, _ := ret[0].(*vpclattice.ListTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargets indicates an expected call of ListTargets
func (mr *MockVPCLatticeAPIMockRecorder) ListTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargets", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargets), arg0)
}

// ListTargetsPages mocks base method
func (m *MockVPCLatticeAPI) ListTargetsPages(arg0 *vpclattice.ListTargetsInput, arg1 func(*vpclattice.ListTargetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetsPages indicates an expected call of ListTargetsPages
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsPages", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetsPages), arg0, arg1)
}

// ListTargetsPagesWithContext mocks base method
func (m *MockVPCLatticeAPI) ListTargetsPagesWithContext(arg0 context.Context, arg1 *vpclattice.ListTargetsInput, arg2 func(*vpclattice.ListTargetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTargetsPagesWithContext indicates an expected call of ListTargetsPagesWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsPagesWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetsPagesWithContext), varargs...)
}

// ListTargetsRequest mocks base method
func (m *MockVPCLatticeAPI) ListTargetsRequest(arg0 *vpclattice.ListTargetsInput) (*request.Request, *vpclattice.ListTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.ListTargetsOutput)
	return ret0, ret1
}

// ListTargetsRequest indicates an expected call of ListTargetsRequest
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetsRequest), arg0)
}

// ListTargetsWithContext mocks base method
func (m *MockVPCLatticeAPI) ListTargetsWithContext(arg0 context.Context, arg1 *vpclattice.ListTargetsInput, arg2 ...request.Option) (*vpclattice.ListTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.ListTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsWithContext indicates an expected call of ListTargetsWithContext
func (mr *MockVPCLatticeAPIMockRecorder) ListTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).ListTargetsWithContext), varargs...)
}

// PutAuthPolicy mocks base method
func (m *MockVPCLatticeAPI) PutAuthPolicy(arg0 *vpclattice.PutAuthPolicyInput) (*vpclattice.PutAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthPolicy", arg0)
	ret0, _ := ret[0].(*vpclattice.PutAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthPolicy indicates an expected call of PutAuthPolicy
func (mr *MockVPCLatticeAPIMockRecorder) PutAuthPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthPolicy", reflect.TypeOf((*MockVPCLatticeAPI)(nil).PutAuthPolicy), arg0)
}

// PutAuthPolicyRequest mocks base method
func (m *MockVPCLatticeAPI) PutAuthPolicyRequest(arg0 *vpclattice.PutAuthPolicyInput) (*request.Request, *vpclattice.PutAuthPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.PutAuthPolicyOutput)
	return ret0, ret1
}

// PutAuthPolicyRequest indicates an expected call of PutAuthPolicyRequest
func (mr *MockVPCLatticeAPIMockRecorder) PutAuthPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthPolicyRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).PutAuthPolicyRequest), arg0)
}

// PutAuthPolicyWithContext mocks base method
func (m *MockVPCLatticeAPI) PutAuthPolicyWithContext(arg0 context.Context, arg1 *vpclattice.PutAuthPolicyInput, arg2 ...request.Option) (*vpclattice.PutAuthPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAuthPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.PutAuthPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthPolicyWithContext indicates an expected call of PutAuthPolicyWithContext
func (mr *MockVPCLatticeAPIMockRecorder) PutAuthPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthPolicyWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).PutAuthPolicyWithContext), varargs...)
}

// PutResourcePolicy mocks base method
func (m *MockVPCLatticeAPI) PutResourcePolicy(arg0 *vpclattice.PutResourcePolicyInput) (*vpclattice.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*vpclattice.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy
func (mr *MockVPCLatticeAPIMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockVPCLatticeAPI)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method
func (m *MockVPCLatticeAPI) PutResourcePolicyRequest(arg0 *vpclattice.PutResourcePolicyInput) (*request.Request, *vpclattice.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest
func (mr *MockVPCLatticeAPIMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method
func (m *MockVPCLatticeAPI) PutResourcePolicyWithContext(arg0 context.Context, arg1 *vpclattice.PutResourcePolicyInput, arg2 ...request.Option) (*vpclattice.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext
func (mr *MockVPCLatticeAPIMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).PutResourcePolicyWithContext), varargs...)
}

// RegisterTargets mocks base method
func (m *MockVPCLatticeAPI) RegisterTargets(arg0 *vpclattice.RegisterTargetsInput) (*vpclattice.RegisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTargets", arg0)
	ret0, _ := ret[0].(*vpclattice.RegisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTargets indicates an expected call of RegisterTargets
func (mr *MockVPCLatticeAPIMockRecorder) RegisterTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargets", reflect.TypeOf((*MockVPCLatticeAPI)(nil).RegisterTargets), arg0)
}

// RegisterTargetsRequest mocks base method
func (m *MockVPCLatticeAPI) RegisterTargetsRequest(arg0 *vpclattice.RegisterTargetsInput) (*request.Request, *vpclattice.RegisterTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.RegisterTargetsOutput)
	return ret0, ret1
}

// RegisterTargetsRequest indicates an expected call of RegisterTargetsRequest
func (mr *MockVPCLatticeAPIMockRecorder) RegisterTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargetsRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).RegisterTargetsRequest), arg0)
}

// RegisterTargetsWithContext mocks base method
func (m *MockVPCLatticeAPI) RegisterTargetsWithContext(arg0 context.Context, arg1 *vpclattice.RegisterTargetsInput, arg2 ...request.Option) (*vpclattice.RegisterTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.RegisterTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTargetsWithContext indicates an expected call of RegisterTargetsWithContext
func (mr *MockVPCLatticeAPIMockRecorder) RegisterTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTargetsWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).RegisterTargetsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockVPCLatticeAPI) TagResource(arg0 *vpclattice.TagResourceInput) (*vpclattice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*vpclattice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockVPCLatticeAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockVPCLatticeAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockVPCLatticeAPI) TagResourceRequest(arg0 *vpclattice.TagResourceInput) (*request.Request, *vpclattice.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockVPCLatticeAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockVPCLatticeAPI) TagResourceWithContext(arg0 context.Context, arg1 *vpclattice.TagResourceInput, arg2 ...request.Option) (*vpclattice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockVPCLatticeAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockVPCLatticeAPI) UntagResource(arg0 *vpclattice.UntagResourceInput) (*vpclattice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*vpclattice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockVPCLatticeAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockVPCLatticeAPI) UntagResourceRequest(arg0 *vpclattice.UntagResourceInput) (*request.Request, *vpclattice.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockVPCLatticeAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockVPCLatticeAPI) UntagResourceWithContext(arg0 context.Context, arg1 *vpclattice.UntagResourceInput, arg2 ...request.Option) (*vpclattice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccessLogSubscription mocks base method
func (m *MockVPCLatticeAPI) UpdateAccessLogSubscription(arg0 *vpclattice.UpdateAccessLogSubscriptionInput) (*vpclattice.UpdateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessLogSubscription", arg0)
	ret0, _ := ret[0].(*vpclattice.UpdateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessLogSubscription indicates an expected call of UpdateAccessLogSubscription
func (mr *MockVPCLatticeAPIMockRecorder) UpdateAccessLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogSubscription", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateAccessLogSubscription), arg0)
}

// UpdateAccessLogSubscriptionRequest mocks base method
func (m *MockVPCLatticeAPI) UpdateAccessLogSubscriptionRequest(arg0 *vpclattice.UpdateAccessLogSubscriptionInput) (*request.Request, *vpclattice.UpdateAccessLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UpdateAccessLogSubscriptionOutput)
	return ret0, ret1
}

// UpdateAccessLogSubscriptionRequest indicates an expected call of UpdateAccessLogSubscriptionRequest
func (mr *MockVPCLatticeAPIMockRecorder) UpdateAccessLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogSubscriptionRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateAccessLogSubscriptionRequest), arg0)
}

// UpdateAccessLogSubscriptionWithContext mocks base method
func (m *MockVPCLatticeAPI) UpdateAccessLogSubscriptionWithContext(arg0 context.Context, arg1 *vpclattice.UpdateAccessLogSubscriptionInput, arg2 ...request.Option) (*vpclattice.UpdateAccessLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UpdateAccessLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessLogSubscriptionWithContext indicates an expected call of UpdateAccessLogSubscriptionWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UpdateAccessLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessLogSubscriptionWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateAccessLogSubscriptionWithContext), varargs...)
}

// UpdateListener mocks base method
func (m *MockVPCLatticeAPI) UpdateListener(arg0 *vpclattice.UpdateListenerInput) (*vpclattice.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListener", arg0)
	ret0, _ := ret[0].(*vpclattice.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListener indicates an expected call of UpdateListener
func (mr *MockVPCLatticeAPIMockRecorder) UpdateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListener", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateListener), arg0)
}

// UpdateListenerRequest mocks base method
func (m *MockVPCLatticeAPI) UpdateListenerRequest(arg0 *vpclattice.UpdateListenerInput) (*request.Request, *vpclattice.UpdateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UpdateListenerOutput)
	return ret0, ret1
}

// UpdateListenerRequest indicates an expected call of UpdateListenerRequest
func (mr *MockVPCLatticeAPIMockRecorder) UpdateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateListenerRequest), arg0)
}

// UpdateListenerWithContext mocks base method
func (m *MockVPCLatticeAPI) UpdateListenerWithContext(arg0 context.Context, arg1 *vpclattice.UpdateListenerInput, arg2 ...request.Option) (*vpclattice.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListenerWithContext indicates an expected call of UpdateListenerWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UpdateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateListenerWithContext), varargs...)
}

// UpdateRule mocks base method
func (m *MockVPCLatticeAPI) UpdateRule(arg0 *vpclattice.UpdateRuleInput) (*vpclattice.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", arg0)
	ret0, _ := ret[0].(*vpclattice.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule
func (mr *MockVPCLatticeAPIMockRecorder) UpdateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateRule), arg0)
}

// UpdateRuleRequest mocks base method
func (m *MockVPCLatticeAPI) UpdateRuleRequest(arg0 *vpclattice.UpdateRuleInput) (*request.Request, *vpclattice.UpdateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UpdateRuleOutput)
	return ret0, ret1
}

// UpdateRuleRequest indicates an expected call of UpdateRuleRequest
func (mr *MockVPCLatticeAPIMockRecorder) UpdateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateRuleRequest), arg0)
}

// UpdateRuleWithContext mocks base method
func (m *MockVPCLatticeAPI) UpdateRuleWithContext(arg0 context.Context, arg1 *vpclattice.UpdateRuleInput, arg2 ...request.Option) (*vpclattice.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleWithContext indicates an expected call of UpdateRuleWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UpdateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateRuleWithContext), varargs...)
}

// UpdateService mocks base method
func (m *MockVPCLatticeAPI) UpdateService(arg0 *vpclattice.UpdateServiceInput) (*vpclattice.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(*vpclattice.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockVPCLatticeAPIMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateService), arg0)
}

// UpdateServiceNetwork mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceNetwork(arg0 *vpclattice.UpdateServiceNetworkInput) (*vpclattice.UpdateServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceNetwork", arg0)
	ret0, _ := ret[0].(*vpclattice.UpdateServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceNetwork indicates an expected call of UpdateServiceNetwork
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNetwork", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceNetwork), arg0)
}

// UpdateServiceNetworkRequest mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceNetworkRequest(arg0 *vpclattice.UpdateServiceNetworkInput) (*request.Request, *vpclattice.UpdateServiceNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UpdateServiceNetworkOutput)
	return ret0, ret1
}

// UpdateServiceNetworkRequest indicates an expected call of UpdateServiceNetworkRequest
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNetworkRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceNetworkRequest), arg0)
}

// UpdateServiceNetworkVpcAssociation mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceNetworkVpcAssociation(arg0 *vpclattice.UpdateServiceNetworkVpcAssociationInput) (*vpclattice.UpdateServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceNetworkVpcAssociation", arg0)
	ret0, _ := ret[0].(*vpclattice.UpdateServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceNetworkVpcAssociation indicates an expected call of UpdateServiceNetworkVpcAssociation
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceNetworkVpcAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNetworkVpcAssociation", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceNetworkVpcAssociation), arg0)
}

// UpdateServiceNetworkVpcAssociationRequest mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceNetworkVpcAssociationRequest(arg0 *vpclattice.UpdateServiceNetworkVpcAssociationInput) (*request.Request, *vpclattice.UpdateServiceNetworkVpcAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceNetworkVpcAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UpdateServiceNetworkVpcAssociationOutput)
	return ret0, ret1
}

// UpdateServiceNetworkVpcAssociationRequest indicates an expected call of UpdateServiceNetworkVpcAssociationRequest
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceNetworkVpcAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNetworkVpcAssociationRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceNetworkVpcAssociationRequest), arg0)
}

// UpdateServiceNetworkVpcAssociationWithContext mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceNetworkVpcAssociationWithContext(arg0 context.Context, arg1 *vpclattice.UpdateServiceNetworkVpcAssociationInput, arg2 ...request.Option) (*vpclattice.UpdateServiceNetworkVpcAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceNetworkVpcAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UpdateServiceNetworkVpcAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceNetworkVpcAssociationWithContext indicates an expected call of UpdateServiceNetworkVpcAssociationWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceNetworkVpcAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNetworkVpcAssociationWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceNetworkVpcAssociationWithContext), varargs...)
}

// UpdateServiceNetworkWithContext mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceNetworkWithContext(arg0 context.Context, arg1 *vpclattice.UpdateServiceNetworkInput, arg2 ...request.Option) (*vpclattice.UpdateServiceNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UpdateServiceNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceNetworkWithContext indicates an expected call of UpdateServiceNetworkWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNetworkWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceNetworkWithContext), varargs...)
}

// UpdateServiceRequest mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceRequest(arg0 *vpclattice.UpdateServiceInput) (*request.Request, *vpclattice.UpdateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UpdateServiceOutput)
	return ret0, ret1
}

// UpdateServiceRequest indicates an expected call of UpdateServiceRequest
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceRequest), arg0)
}

// UpdateServiceWithContext mocks base method
func (m *MockVPCLatticeAPI) UpdateServiceWithContext(arg0 context.Context, arg1 *vpclattice.UpdateServiceInput, arg2 ...request.Option) (*vpclattice.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceWithContext indicates an expected call of UpdateServiceWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UpdateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateServiceWithContext), varargs...)
}

// UpdateTargetGroup mocks base method
func (m *MockVPCLatticeAPI) UpdateTargetGroup(arg0 *vpclattice.UpdateTargetGroupInput) (*vpclattice.UpdateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetGroup", arg0)
	ret0, _ := ret[0].(*vpclattice.UpdateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetGroup indicates an expected call of UpdateTargetGroup
func (mr *MockVPCLatticeAPIMockRecorder) UpdateTargetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroup", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateTargetGroup), arg0)
}

// UpdateTargetGroupRequest mocks base method
func (m *MockVPCLatticeAPI) UpdateTargetGroupRequest(arg0 *vpclattice.UpdateTargetGroupInput) (*request.Request, *vpclattice.UpdateTargetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*vpclattice.UpdateTargetGroupOutput)
	return ret0, ret1
}

// UpdateTargetGroupRequest indicates an expected call of UpdateTargetGroupRequest
func (mr *MockVPCLatticeAPIMockRecorder) UpdateTargetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroupRequest", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateTargetGroupRequest), arg0)
}

// UpdateTargetGroupWithContext mocks base method
func (m *MockVPCLatticeAPI) UpdateTargetGroupWithContext(arg0 context.Context, arg1 *vpclattice.UpdateTargetGroupInput, arg2 ...request.Option) (*vpclattice.UpdateTargetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTargetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*vpclattice.UpdateTargetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetGroupWithContext indicates an expected call of UpdateTargetGroupWithContext
func (mr *MockVPCLatticeAPIMockRecorder) UpdateTargetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetGroupWithContext", reflect.TypeOf((*MockVPCLatticeAPI)(nil).UpdateTargetGroupWithContext), varargs...)
}
