// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/sfn/sfniface (interfaces: SFNAPI)

// Package sfnmock is a generated GoMock package.
package sfnmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	sfn "github.com/aws/aws-sdk-go/service/sfn"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSFNAPI is a mock of SFNAPI interface
type MockSFNAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSFNAPIMockRecorder
}

// MockSFNAPIMockRecorder is the mock recorder for MockSFNAPI
type MockSFNAPIMockRecorder struct {
	mock *MockSFNAPI
}

// NewMockSFNAPI creates a new mock instance
func NewMockSFNAPI(ctrl *gomock.Controller) *MockSFNAPI {
	mock := &MockSFNAPI{ctrl: ctrl}
	mock.recorder = &MockSFNAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSFNAPI) EXPECT() *MockSFNAPIMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method
func (m *MockSFNAPI) CreateActivity(arg0 *sfn.CreateActivityInput) (*sfn.CreateActivityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", arg0)
	ret0, _ := ret[0].(*sfn.CreateActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity
func (mr *MockSFNAPIMockRecorder) CreateActivity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockSFNAPI)(nil).CreateActivity), arg0)
}

// CreateActivityRequest mocks base method
func (m *MockSFNAPI) CreateActivityRequest(arg0 *sfn.CreateActivityInput) (*request.Request, *sfn.CreateActivityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.CreateActivityOutput)
	return ret0, ret1
}

// CreateActivityRequest indicates an expected call of CreateActivityRequest
func (mr *MockSFNAPIMockRecorder) CreateActivityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivityRequest", reflect.TypeOf((*MockSFNAPI)(nil).CreateActivityRequest), arg0)
}

// CreateActivityWithContext mocks base method
func (m *MockSFNAPI) CreateActivityWithContext(arg0 context.Context, arg1 *sfn.CreateActivityInput, arg2 ...request.Option) (*sfn.CreateActivityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateActivityWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.CreateActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivityWithContext indicates an expected call of CreateActivityWithContext
func (mr *MockSFNAPIMockRecorder) CreateActivityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivityWithContext", reflect.TypeOf((*MockSFNAPI)(nil).CreateActivityWithContext), varargs...)
}

// CreateStateMachine mocks base method
func (m *MockSFNAPI) CreateStateMachine(arg0 *sfn.CreateStateMachineInput) (*sfn.CreateStateMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStateMachine", arg0)
	ret0, _ := ret[0].(*sfn.CreateStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateMachine indicates an expected call of CreateStateMachine
func (mr *MockSFNAPIMockRecorder) CreateStateMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachine", reflect.TypeOf((*MockSFNAPI)(nil).CreateStateMachine), arg0)
}

// CreateStateMachineAlias mocks base method
func (m *MockSFNAPI) CreateStateMachineAlias(arg0 *sfn.CreateStateMachineAliasInput) (*sfn.CreateStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStateMachineAlias", arg0)
	ret0, _ := ret[0].(*sfn.CreateStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateMachineAlias indicates an expected call of CreateStateMachineAlias
func (mr *MockSFNAPIMockRecorder) CreateStateMachineAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachineAlias", reflect.TypeOf((*MockSFNAPI)(nil).CreateStateMachineAlias), arg0)
}

// CreateStateMachineAliasRequest mocks base method
func (m *MockSFNAPI) CreateStateMachineAliasRequest(arg0 *sfn.CreateStateMachineAliasInput) (*request.Request, *sfn.CreateStateMachineAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStateMachineAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.CreateStateMachineAliasOutput)
	return ret0, ret1
}

// CreateStateMachineAliasRequest indicates an expected call of CreateStateMachineAliasRequest
func (mr *MockSFNAPIMockRecorder) CreateStateMachineAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachineAliasRequest", reflect.TypeOf((*MockSFNAPI)(nil).CreateStateMachineAliasRequest), arg0)
}

// CreateStateMachineAliasWithContext mocks base method
func (m *MockSFNAPI) CreateStateMachineAliasWithContext(arg0 context.Context, arg1 *sfn.CreateStateMachineAliasInput, arg2 ...request.Option) (*sfn.CreateStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStateMachineAliasWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.CreateStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateMachineAliasWithContext indicates an expected call of CreateStateMachineAliasWithContext
func (mr *MockSFNAPIMockRecorder) CreateStateMachineAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachineAliasWithContext", reflect.TypeOf((*MockSFNAPI)(nil).CreateStateMachineAliasWithContext), varargs...)
}

// CreateStateMachineRequest mocks base method
func (m *MockSFNAPI) CreateStateMachineRequest(arg0 *sfn.CreateStateMachineInput) (*request.Request, *sfn.CreateStateMachineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStateMachineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.CreateStateMachineOutput)
	return ret0, ret1
}

// CreateStateMachineRequest indicates an expected call of CreateStateMachineRequest
func (mr *MockSFNAPIMockRecorder) CreateStateMachineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachineRequest", reflect.TypeOf((*MockSFNAPI)(nil).CreateStateMachineRequest), arg0)
}

// CreateStateMachineWithContext mocks base method
func (m *MockSFNAPI) CreateStateMachineWithContext(arg0 context.Context, arg1 *sfn.CreateStateMachineInput, arg2 ...request.Option) (*sfn.CreateStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStateMachineWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.CreateStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateMachineWithContext indicates an expected call of CreateStateMachineWithContext
func (mr *MockSFNAPIMockRecorder) CreateStateMachineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachineWithContext", reflect.TypeOf((*MockSFNAPI)(nil).CreateStateMachineWithContext), varargs...)
}

// DeleteActivity mocks base method
func (m *MockSFNAPI) DeleteActivity(arg0 *sfn.DeleteActivityInput) (*sfn.DeleteActivityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivity", arg0)
	ret0, _ := ret[0].(*sfn.DeleteActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActivity indicates an expected call of DeleteActivity
func (mr *MockSFNAPIMockRecorder) DeleteActivity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivity", reflect.TypeOf((*MockSFNAPI)(nil).DeleteActivity), arg0)
}

// DeleteActivityRequest mocks base method
func (m *MockSFNAPI) DeleteActivityRequest(arg0 *sfn.DeleteActivityInput) (*request.Request, *sfn.DeleteActivityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DeleteActivityOutput)
	return ret0, ret1
}

// DeleteActivityRequest indicates an expected call of DeleteActivityRequest
func (mr *MockSFNAPIMockRecorder) DeleteActivityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivityRequest", reflect.TypeOf((*MockSFNAPI)(nil).DeleteActivityRequest), arg0)
}

// DeleteActivityWithContext mocks base method
func (m *MockSFNAPI) DeleteActivityWithContext(arg0 context.Context, arg1 *sfn.DeleteActivityInput, arg2 ...request.Option) (*sfn.DeleteActivityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteActivityWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DeleteActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActivityWithContext indicates an expected call of DeleteActivityWithContext
func (mr *MockSFNAPIMockRecorder) DeleteActivityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivityWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DeleteActivityWithContext), varargs...)
}

// DeleteStateMachine mocks base method
func (m *MockSFNAPI) DeleteStateMachine(arg0 *sfn.DeleteStateMachineInput) (*sfn.DeleteStateMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateMachine", arg0)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachine indicates an expected call of DeleteStateMachine
func (mr *MockSFNAPIMockRecorder) DeleteStateMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachine", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachine), arg0)
}

// DeleteStateMachineAlias mocks base method
func (m *MockSFNAPI) DeleteStateMachineAlias(arg0 *sfn.DeleteStateMachineAliasInput) (*sfn.DeleteStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateMachineAlias", arg0)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachineAlias indicates an expected call of DeleteStateMachineAlias
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineAlias", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineAlias), arg0)
}

// DeleteStateMachineAliasRequest mocks base method
func (m *MockSFNAPI) DeleteStateMachineAliasRequest(arg0 *sfn.DeleteStateMachineAliasInput) (*request.Request, *sfn.DeleteStateMachineAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateMachineAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DeleteStateMachineAliasOutput)
	return ret0, ret1
}

// DeleteStateMachineAliasRequest indicates an expected call of DeleteStateMachineAliasRequest
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineAliasRequest", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineAliasRequest), arg0)
}

// DeleteStateMachineAliasWithContext mocks base method
func (m *MockSFNAPI) DeleteStateMachineAliasWithContext(arg0 context.Context, arg1 *sfn.DeleteStateMachineAliasInput, arg2 ...request.Option) (*sfn.DeleteStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStateMachineAliasWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachineAliasWithContext indicates an expected call of DeleteStateMachineAliasWithContext
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineAliasWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineAliasWithContext), varargs...)
}

// DeleteStateMachineRequest mocks base method
func (m *MockSFNAPI) DeleteStateMachineRequest(arg0 *sfn.DeleteStateMachineInput) (*request.Request, *sfn.DeleteStateMachineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateMachineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DeleteStateMachineOutput)
	return ret0, ret1
}

// DeleteStateMachineRequest indicates an expected call of DeleteStateMachineRequest
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineRequest", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineRequest), arg0)
}

// DeleteStateMachineVersion mocks base method
func (m *MockSFNAPI) DeleteStateMachineVersion(arg0 *sfn.DeleteStateMachineVersionInput) (*sfn.DeleteStateMachineVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateMachineVersion", arg0)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachineVersion indicates an expected call of DeleteStateMachineVersion
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineVersion", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineVersion), arg0)
}

// DeleteStateMachineVersionRequest mocks base method
func (m *MockSFNAPI) DeleteStateMachineVersionRequest(arg0 *sfn.DeleteStateMachineVersionInput) (*request.Request, *sfn.DeleteStateMachineVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateMachineVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DeleteStateMachineVersionOutput)
	return ret0, ret1
}

// DeleteStateMachineVersionRequest indicates an expected call of DeleteStateMachineVersionRequest
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineVersionRequest", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineVersionRequest), arg0)
}

// DeleteStateMachineVersionWithContext mocks base method
func (m *MockSFNAPI) DeleteStateMachineVersionWithContext(arg0 context.Context, arg1 *sfn.DeleteStateMachineVersionInput, arg2 ...request.Option) (*sfn.DeleteStateMachineVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStateMachineVersionWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachineVersionWithContext indicates an expected call of DeleteStateMachineVersionWithContext
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineVersionWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineVersionWithContext), varargs...)
}

// DeleteStateMachineWithContext mocks base method
func (m *MockSFNAPI) DeleteStateMachineWithContext(arg0 context.Context, arg1 *sfn.DeleteStateMachineInput, arg2 ...request.Option) (*sfn.DeleteStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStateMachineWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachineWithContext indicates an expected call of DeleteStateMachineWithContext
func (mr *MockSFNAPIMockRecorder) DeleteStateMachineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DeleteStateMachineWithContext), varargs...)
}

// DescribeActivity mocks base method
func (m *MockSFNAPI) DescribeActivity(arg0 *sfn.DescribeActivityInput) (*sfn.DescribeActivityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActivity", arg0)
	ret0, _ := ret[0].(*sfn.DescribeActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActivity indicates an expected call of DescribeActivity
func (mr *MockSFNAPIMockRecorder) DescribeActivity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActivity", reflect.TypeOf((*MockSFNAPI)(nil).DescribeActivity), arg0)
}

// DescribeActivityRequest mocks base method
func (m *MockSFNAPI) DescribeActivityRequest(arg0 *sfn.DescribeActivityInput) (*request.Request, *sfn.DescribeActivityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActivityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DescribeActivityOutput)
	return ret0, ret1
}

// DescribeActivityRequest indicates an expected call of DescribeActivityRequest
func (mr *MockSFNAPIMockRecorder) DescribeActivityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActivityRequest", reflect.TypeOf((*MockSFNAPI)(nil).DescribeActivityRequest), arg0)
}

// DescribeActivityWithContext mocks base method
func (m *MockSFNAPI) DescribeActivityWithContext(arg0 context.Context, arg1 *sfn.DescribeActivityInput, arg2 ...request.Option) (*sfn.DescribeActivityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeActivityWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActivityWithContext indicates an expected call of DescribeActivityWithContext
func (mr *MockSFNAPIMockRecorder) DescribeActivityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActivityWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DescribeActivityWithContext), varargs...)
}

// DescribeExecution mocks base method
func (m *MockSFNAPI) DescribeExecution(arg0 *sfn.DescribeExecutionInput) (*sfn.DescribeExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExecution", arg0)
	ret0, _ := ret[0].(*sfn.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecution indicates an expected call of DescribeExecution
func (mr *MockSFNAPIMockRecorder) DescribeExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecution", reflect.TypeOf((*MockSFNAPI)(nil).DescribeExecution), arg0)
}

// DescribeExecutionRequest mocks base method
func (m *MockSFNAPI) DescribeExecutionRequest(arg0 *sfn.DescribeExecutionInput) (*request.Request, *sfn.DescribeExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DescribeExecutionOutput)
	return ret0, ret1
}

// DescribeExecutionRequest indicates an expected call of DescribeExecutionRequest
func (mr *MockSFNAPIMockRecorder) DescribeExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecutionRequest", reflect.TypeOf((*MockSFNAPI)(nil).DescribeExecutionRequest), arg0)
}

// DescribeExecutionWithContext mocks base method
func (m *MockSFNAPI) DescribeExecutionWithContext(arg0 context.Context, arg1 *sfn.DescribeExecutionInput, arg2 ...request.Option) (*sfn.DescribeExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecutionWithContext indicates an expected call of DescribeExecutionWithContext
func (mr *MockSFNAPIMockRecorder) DescribeExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecutionWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DescribeExecutionWithContext), varargs...)
}

// DescribeMapRun mocks base method
func (m *MockSFNAPI) DescribeMapRun(arg0 *sfn.DescribeMapRunInput) (*sfn.DescribeMapRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMapRun", arg0)
	ret0, _ := ret[0].(*sfn.DescribeMapRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMapRun indicates an expected call of DescribeMapRun
func (mr *MockSFNAPIMockRecorder) DescribeMapRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMapRun", reflect.TypeOf((*MockSFNAPI)(nil).DescribeMapRun), arg0)
}

// DescribeMapRunRequest mocks base method
func (m *MockSFNAPI) DescribeMapRunRequest(arg0 *sfn.DescribeMapRunInput) (*request.Request, *sfn.DescribeMapRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMapRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DescribeMapRunOutput)
	return ret0, ret1
}

// DescribeMapRunRequest indicates an expected call of DescribeMapRunRequest
func (mr *MockSFNAPIMockRecorder) DescribeMapRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMapRunRequest", reflect.TypeOf((*MockSFNAPI)(nil).DescribeMapRunRequest), arg0)
}

// DescribeMapRunWithContext mocks base method
func (m *MockSFNAPI) DescribeMapRunWithContext(arg0 context.Context, arg1 *sfn.DescribeMapRunInput, arg2 ...request.Option) (*sfn.DescribeMapRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMapRunWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeMapRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMapRunWithContext indicates an expected call of DescribeMapRunWithContext
func (mr *MockSFNAPIMockRecorder) DescribeMapRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMapRunWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DescribeMapRunWithContext), varargs...)
}

// DescribeStateMachine mocks base method
func (m *MockSFNAPI) DescribeStateMachine(arg0 *sfn.DescribeStateMachineInput) (*sfn.DescribeStateMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStateMachine", arg0)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachine indicates an expected call of DescribeStateMachine
func (mr *MockSFNAPIMockRecorder) DescribeStateMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachine", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachine), arg0)
}

// DescribeStateMachineAlias mocks base method
func (m *MockSFNAPI) DescribeStateMachineAlias(arg0 *sfn.DescribeStateMachineAliasInput) (*sfn.DescribeStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStateMachineAlias", arg0)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineAlias indicates an expected call of DescribeStateMachineAlias
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineAlias", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineAlias), arg0)
}

// DescribeStateMachineAliasRequest mocks base method
func (m *MockSFNAPI) DescribeStateMachineAliasRequest(arg0 *sfn.DescribeStateMachineAliasInput) (*request.Request, *sfn.DescribeStateMachineAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStateMachineAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DescribeStateMachineAliasOutput)
	return ret0, ret1
}

// DescribeStateMachineAliasRequest indicates an expected call of DescribeStateMachineAliasRequest
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineAliasRequest", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineAliasRequest), arg0)
}

// DescribeStateMachineAliasWithContext mocks base method
func (m *MockSFNAPI) DescribeStateMachineAliasWithContext(arg0 context.Context, arg1 *sfn.DescribeStateMachineAliasInput, arg2 ...request.Option) (*sfn.DescribeStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachineAliasWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineAliasWithContext indicates an expected call of DescribeStateMachineAliasWithContext
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineAliasWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineAliasWithContext), varargs...)
}

// DescribeStateMachineForExecution mocks base method
func (m *MockSFNAPI) DescribeStateMachineForExecution(arg0 *sfn.DescribeStateMachineForExecutionInput) (*sfn.DescribeStateMachineForExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStateMachineForExecution", arg0)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineForExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineForExecution indicates an expected call of DescribeStateMachineForExecution
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineForExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineForExecution", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineForExecution), arg0)
}

// DescribeStateMachineForExecutionRequest mocks base method
func (m *MockSFNAPI) DescribeStateMachineForExecutionRequest(arg0 *sfn.DescribeStateMachineForExecutionInput) (*request.Request, *sfn.DescribeStateMachineForExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStateMachineForExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DescribeStateMachineForExecutionOutput)
	return ret0, ret1
}

// DescribeStateMachineForExecutionRequest indicates an expected call of DescribeStateMachineForExecutionRequest
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineForExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineForExecutionRequest", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineForExecutionRequest), arg0)
}

// DescribeStateMachineForExecutionWithContext mocks base method
func (m *MockSFNAPI) DescribeStateMachineForExecutionWithContext(arg0 context.Context, arg1 *sfn.DescribeStateMachineForExecutionInput, arg2 ...request.Option) (*sfn.DescribeStateMachineForExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachineForExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineForExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineForExecutionWithContext indicates an expected call of DescribeStateMachineForExecutionWithContext
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineForExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineForExecutionWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineForExecutionWithContext), varargs...)
}

// DescribeStateMachineRequest mocks base method
func (m *MockSFNAPI) DescribeStateMachineRequest(arg0 *sfn.DescribeStateMachineInput) (*request.Request, *sfn.DescribeStateMachineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStateMachineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.DescribeStateMachineOutput)
	return ret0, ret1
}

// DescribeStateMachineRequest indicates an expected call of DescribeStateMachineRequest
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineRequest", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineRequest), arg0)
}

// DescribeStateMachineWithContext mocks base method
func (m *MockSFNAPI) DescribeStateMachineWithContext(arg0 context.Context, arg1 *sfn.DescribeStateMachineInput, arg2 ...request.Option) (*sfn.DescribeStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachineWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineWithContext indicates an expected call of DescribeStateMachineWithContext
func (mr *MockSFNAPIMockRecorder) DescribeStateMachineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineWithContext", reflect.TypeOf((*MockSFNAPI)(nil).DescribeStateMachineWithContext), varargs...)
}

// GetActivityTask mocks base method
func (m *MockSFNAPI) GetActivityTask(arg0 *sfn.GetActivityTaskInput) (*sfn.GetActivityTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityTask", arg0)
	ret0, _ := ret[0].(*sfn.GetActivityTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityTask indicates an expected call of GetActivityTask
func (mr *MockSFNAPIMockRecorder) GetActivityTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityTask", reflect.TypeOf((*MockSFNAPI)(nil).GetActivityTask), arg0)
}

// GetActivityTaskRequest mocks base method
func (m *MockSFNAPI) GetActivityTaskRequest(arg0 *sfn.GetActivityTaskInput) (*request.Request, *sfn.GetActivityTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.GetActivityTaskOutput)
	return ret0, ret1
}

// GetActivityTaskRequest indicates an expected call of GetActivityTaskRequest
func (mr *MockSFNAPIMockRecorder) GetActivityTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityTaskRequest", reflect.TypeOf((*MockSFNAPI)(nil).GetActivityTaskRequest), arg0)
}

// GetActivityTaskWithContext mocks base method
func (m *MockSFNAPI) GetActivityTaskWithContext(arg0 context.Context, arg1 *sfn.GetActivityTaskInput, arg2 ...request.Option) (*sfn.GetActivityTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActivityTaskWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.GetActivityTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityTaskWithContext indicates an expected call of GetActivityTaskWithContext
func (mr *MockSFNAPIMockRecorder) GetActivityTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityTaskWithContext", reflect.TypeOf((*MockSFNAPI)(nil).GetActivityTaskWithContext), varargs...)
}

// GetExecutionHistory mocks base method
func (m *MockSFNAPI) GetExecutionHistory(arg0 *sfn.GetExecutionHistoryInput) (*sfn.GetExecutionHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionHistory", arg0)
	ret0, _ := ret[0].(*sfn.GetExecutionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionHistory indicates an expected call of GetExecutionHistory
func (mr *MockSFNAPIMockRecorder) GetExecutionHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistory", reflect.TypeOf((*MockSFNAPI)(nil).GetExecutionHistory), arg0)
}

// GetExecutionHistoryPages mocks base method
func (m *MockSFNAPI) GetExecutionHistoryPages(arg0 *sfn.GetExecutionHistoryInput, arg1 func(*sfn.GetExecutionHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExecutionHistoryPages indicates an expected call of GetExecutionHistoryPages
func (mr *MockSFNAPIMockRecorder) GetExecutionHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistoryPages", reflect.TypeOf((*MockSFNAPI)(nil).GetExecutionHistoryPages), arg0, arg1)
}

// GetExecutionHistoryPagesWithContext mocks base method
func (m *MockSFNAPI) GetExecutionHistoryPagesWithContext(arg0 context.Context, arg1 *sfn.GetExecutionHistoryInput, arg2 func(*sfn.GetExecutionHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExecutionHistoryPagesWithContext indicates an expected call of GetExecutionHistoryPagesWithContext
func (mr *MockSFNAPIMockRecorder) GetExecutionHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistoryPagesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).GetExecutionHistoryPagesWithContext), varargs...)
}

// GetExecutionHistoryRequest mocks base method
func (m *MockSFNAPI) GetExecutionHistoryRequest(arg0 *sfn.GetExecutionHistoryInput) (*request.Request, *sfn.GetExecutionHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.GetExecutionHistoryOutput)
	return ret0, ret1
}

// GetExecutionHistoryRequest indicates an expected call of GetExecutionHistoryRequest
func (mr *MockSFNAPIMockRecorder) GetExecutionHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistoryRequest", reflect.TypeOf((*MockSFNAPI)(nil).GetExecutionHistoryRequest), arg0)
}

// GetExecutionHistoryWithContext mocks base method
func (m *MockSFNAPI) GetExecutionHistoryWithContext(arg0 context.Context, arg1 *sfn.GetExecutionHistoryInput, arg2 ...request.Option) (*sfn.GetExecutionHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.GetExecutionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionHistoryWithContext indicates an expected call of GetExecutionHistoryWithContext
func (mr *MockSFNAPIMockRecorder) GetExecutionHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistoryWithContext", reflect.TypeOf((*MockSFNAPI)(nil).GetExecutionHistoryWithContext), varargs...)
}

// ListActivities mocks base method
func (m *MockSFNAPI) ListActivities(arg0 *sfn.ListActivitiesInput) (*sfn.ListActivitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivities", arg0)
	ret0, _ := ret[0].(*sfn.ListActivitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivities indicates an expected call of ListActivities
func (mr *MockSFNAPIMockRecorder) ListActivities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivities", reflect.TypeOf((*MockSFNAPI)(nil).ListActivities), arg0)
}

// ListActivitiesPages mocks base method
func (m *MockSFNAPI) ListActivitiesPages(arg0 *sfn.ListActivitiesInput, arg1 func(*sfn.ListActivitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListActivitiesPages indicates an expected call of ListActivitiesPages
func (mr *MockSFNAPIMockRecorder) ListActivitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivitiesPages", reflect.TypeOf((*MockSFNAPI)(nil).ListActivitiesPages), arg0, arg1)
}

// ListActivitiesPagesWithContext mocks base method
func (m *MockSFNAPI) ListActivitiesPagesWithContext(arg0 context.Context, arg1 *sfn.ListActivitiesInput, arg2 func(*sfn.ListActivitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActivitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListActivitiesPagesWithContext indicates an expected call of ListActivitiesPagesWithContext
func (mr *MockSFNAPIMockRecorder) ListActivitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivitiesPagesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListActivitiesPagesWithContext), varargs...)
}

// ListActivitiesRequest mocks base method
func (m *MockSFNAPI) ListActivitiesRequest(arg0 *sfn.ListActivitiesInput) (*request.Request, *sfn.ListActivitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.ListActivitiesOutput)
	return ret0, ret1
}

// ListActivitiesRequest indicates an expected call of ListActivitiesRequest
func (mr *MockSFNAPIMockRecorder) ListActivitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivitiesRequest", reflect.TypeOf((*MockSFNAPI)(nil).ListActivitiesRequest), arg0)
}

// ListActivitiesWithContext mocks base method
func (m *MockSFNAPI) ListActivitiesWithContext(arg0 context.Context, arg1 *sfn.ListActivitiesInput, arg2 ...request.Option) (*sfn.ListActivitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActivitiesWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.ListActivitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivitiesWithContext indicates an expected call of ListActivitiesWithContext
func (mr *MockSFNAPIMockRecorder) ListActivitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivitiesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListActivitiesWithContext), varargs...)
}

// ListExecutions mocks base method
func (m *MockSFNAPI) ListExecutions(arg0 *sfn.ListExecutionsInput) (*sfn.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutions", arg0)
	ret0, _ := ret[0].(*sfn.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutions indicates an expected call of ListExecutions
func (mr *MockSFNAPIMockRecorder) ListExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutions", reflect.TypeOf((*MockSFNAPI)(nil).ListExecutions), arg0)
}

// ListExecutionsPages mocks base method
func (m *MockSFNAPI) ListExecutionsPages(arg0 *sfn.ListExecutionsInput, arg1 func(*sfn.ListExecutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPages indicates an expected call of ListExecutionsPages
func (mr *MockSFNAPIMockRecorder) ListExecutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPages", reflect.TypeOf((*MockSFNAPI)(nil).ListExecutionsPages), arg0, arg1)
}

// ListExecutionsPagesWithContext mocks base method
func (m *MockSFNAPI) ListExecutionsPagesWithContext(arg0 context.Context, arg1 *sfn.ListExecutionsInput, arg2 func(*sfn.ListExecutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPagesWithContext indicates an expected call of ListExecutionsPagesWithContext
func (mr *MockSFNAPIMockRecorder) ListExecutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPagesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListExecutionsPagesWithContext), varargs...)
}

// ListExecutionsRequest mocks base method
func (m *MockSFNAPI) ListExecutionsRequest(arg0 *sfn.ListExecutionsInput) (*request.Request, *sfn.ListExecutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.ListExecutionsOutput)
	return ret0, ret1
}

// ListExecutionsRequest indicates an expected call of ListExecutionsRequest
func (mr *MockSFNAPIMockRecorder) ListExecutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsRequest", reflect.TypeOf((*MockSFNAPI)(nil).ListExecutionsRequest), arg0)
}

// ListExecutionsWithContext mocks base method
func (m *MockSFNAPI) ListExecutionsWithContext(arg0 context.Context, arg1 *sfn.ListExecutionsInput, arg2 ...request.Option) (*sfn.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutionsWithContext indicates an expected call of ListExecutionsWithContext
func (mr *MockSFNAPIMockRecorder) ListExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListExecutionsWithContext), varargs...)
}

// ListMapRuns mocks base method
func (m *MockSFNAPI) ListMapRuns(arg0 *sfn.ListMapRunsInput) (*sfn.ListMapRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMapRuns", arg0)
	ret0, _ := ret[0].(*sfn.ListMapRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMapRuns indicates an expected call of ListMapRuns
func (mr *MockSFNAPIMockRecorder) ListMapRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapRuns", reflect.TypeOf((*MockSFNAPI)(nil).ListMapRuns), arg0)
}

// ListMapRunsPages mocks base method
func (m *MockSFNAPI) ListMapRunsPages(arg0 *sfn.ListMapRunsInput, arg1 func(*sfn.ListMapRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMapRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMapRunsPages indicates an expected call of ListMapRunsPages
func (mr *MockSFNAPIMockRecorder) ListMapRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapRunsPages", reflect.TypeOf((*MockSFNAPI)(nil).ListMapRunsPages), arg0, arg1)
}

// ListMapRunsPagesWithContext mocks base method
func (m *MockSFNAPI) ListMapRunsPagesWithContext(arg0 context.Context, arg1 *sfn.ListMapRunsInput, arg2 func(*sfn.ListMapRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMapRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMapRunsPagesWithContext indicates an expected call of ListMapRunsPagesWithContext
func (mr *MockSFNAPIMockRecorder) ListMapRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapRunsPagesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListMapRunsPagesWithContext), varargs...)
}

// ListMapRunsRequest mocks base method
func (m *MockSFNAPI) ListMapRunsRequest(arg0 *sfn.ListMapRunsInput) (*request.Request, *sfn.ListMapRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMapRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.ListMapRunsOutput)
	return ret0, ret1
}

// ListMapRunsRequest indicates an expected call of ListMapRunsRequest
func (mr *MockSFNAPIMockRecorder) ListMapRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapRunsRequest", reflect.TypeOf((*MockSFNAPI)(nil).ListMapRunsRequest), arg0)
}

// ListMapRunsWithContext mocks base method
func (m *MockSFNAPI) ListMapRunsWithContext(arg0 context.Context, arg1 *sfn.ListMapRunsInput, arg2 ...request.Option) (*sfn.ListMapRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMapRunsWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.ListMapRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMapRunsWithContext indicates an expected call of ListMapRunsWithContext
func (mr *MockSFNAPIMockRecorder) ListMapRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapRunsWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListMapRunsWithContext), varargs...)
}

// ListStateMachineAliases mocks base method
func (m *MockSFNAPI) ListStateMachineAliases(arg0 *sfn.ListStateMachineAliasesInput) (*sfn.ListStateMachineAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachineAliases", arg0)
	ret0, _ := ret[0].(*sfn.ListStateMachineAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineAliases indicates an expected call of ListStateMachineAliases
func (mr *MockSFNAPIMockRecorder) ListStateMachineAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineAliases", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachineAliases), arg0)
}

// ListStateMachineAliasesRequest mocks base method
func (m *MockSFNAPI) ListStateMachineAliasesRequest(arg0 *sfn.ListStateMachineAliasesInput) (*request.Request, *sfn.ListStateMachineAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachineAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.ListStateMachineAliasesOutput)
	return ret0, ret1
}

// ListStateMachineAliasesRequest indicates an expected call of ListStateMachineAliasesRequest
func (mr *MockSFNAPIMockRecorder) ListStateMachineAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineAliasesRequest", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachineAliasesRequest), arg0)
}

// ListStateMachineAliasesWithContext mocks base method
func (m *MockSFNAPI) ListStateMachineAliasesWithContext(arg0 context.Context, arg1 *sfn.ListStateMachineAliasesInput, arg2 ...request.Option) (*sfn.ListStateMachineAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachineAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachineAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineAliasesWithContext indicates an expected call of ListStateMachineAliasesWithContext
func (mr *MockSFNAPIMockRecorder) ListStateMachineAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineAliasesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachineAliasesWithContext), varargs...)
}

// ListStateMachineVersions mocks base method
func (m *MockSFNAPI) ListStateMachineVersions(arg0 *sfn.ListStateMachineVersionsInput) (*sfn.ListStateMachineVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachineVersions", arg0)
	ret0, _ := ret[0].(*sfn.ListStateMachineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineVersions indicates an expected call of ListStateMachineVersions
func (mr *MockSFNAPIMockRecorder) ListStateMachineVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineVersions", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachineVersions), arg0)
}

// ListStateMachineVersionsRequest mocks base method
func (m *MockSFNAPI) ListStateMachineVersionsRequest(arg0 *sfn.ListStateMachineVersionsInput) (*request.Request, *sfn.ListStateMachineVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachineVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.ListStateMachineVersionsOutput)
	return ret0, ret1
}

// ListStateMachineVersionsRequest indicates an expected call of ListStateMachineVersionsRequest
func (mr *MockSFNAPIMockRecorder) ListStateMachineVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineVersionsRequest", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachineVersionsRequest), arg0)
}

// ListStateMachineVersionsWithContext mocks base method
func (m *MockSFNAPI) ListStateMachineVersionsWithContext(arg0 context.Context, arg1 *sfn.ListStateMachineVersionsInput, arg2 ...request.Option) (*sfn.ListStateMachineVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachineVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineVersionsWithContext indicates an expected call of ListStateMachineVersionsWithContext
func (mr *MockSFNAPIMockRecorder) ListStateMachineVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineVersionsWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachineVersionsWithContext), varargs...)
}

// ListStateMachines mocks base method
func (m *MockSFNAPI) ListStateMachines(arg0 *sfn.ListStateMachinesInput) (*sfn.ListStateMachinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachines", arg0)
	ret0, _ := ret[0].(*sfn.ListStateMachinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachines indicates an expected call of ListStateMachines
func (mr *MockSFNAPIMockRecorder) ListStateMachines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachines", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachines), arg0)
}

// ListStateMachinesPages mocks base method
func (m *MockSFNAPI) ListStateMachinesPages(arg0 *sfn.ListStateMachinesInput, arg1 func(*sfn.ListStateMachinesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachinesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStateMachinesPages indicates an expected call of ListStateMachinesPages
func (mr *MockSFNAPIMockRecorder) ListStateMachinesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachinesPages", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachinesPages), arg0, arg1)
}

// ListStateMachinesPagesWithContext mocks base method
func (m *MockSFNAPI) ListStateMachinesPagesWithContext(arg0 context.Context, arg1 *sfn.ListStateMachinesInput, arg2 func(*sfn.ListStateMachinesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachinesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStateMachinesPagesWithContext indicates an expected call of ListStateMachinesPagesWithContext
func (mr *MockSFNAPIMockRecorder) ListStateMachinesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachinesPagesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachinesPagesWithContext), varargs...)
}

// ListStateMachinesRequest mocks base method
func (m *MockSFNAPI) ListStateMachinesRequest(arg0 *sfn.ListStateMachinesInput) (*request.Request, *sfn.ListStateMachinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.ListStateMachinesOutput)
	return ret0, ret1
}

// ListStateMachinesRequest indicates an expected call of ListStateMachinesRequest
func (mr *MockSFNAPIMockRecorder) ListStateMachinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachinesRequest", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachinesRequest), arg0)
}

// ListStateMachinesWithContext mocks base method
func (m *MockSFNAPI) ListStateMachinesWithContext(arg0 context.Context, arg1 *sfn.ListStateMachinesInput, arg2 ...request.Option) (*sfn.ListStateMachinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachinesWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachinesWithContext indicates an expected call of ListStateMachinesWithContext
func (mr *MockSFNAPIMockRecorder) ListStateMachinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachinesWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListStateMachinesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSFNAPI) ListTagsForResource(arg0 *sfn.ListTagsForResourceInput) (*sfn.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*sfn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSFNAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSFNAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSFNAPI) ListTagsForResourceRequest(arg0 *sfn.ListTagsForResourceInput) (*request.Request, *sfn.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSFNAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSFNAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSFNAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *sfn.ListTagsForResourceInput, arg2 ...request.Option) (*sfn.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSFNAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSFNAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PublishStateMachineVersion mocks base method
func (m *MockSFNAPI) PublishStateMachineVersion(arg0 *sfn.PublishStateMachineVersionInput) (*sfn.PublishStateMachineVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishStateMachineVersion", arg0)
	ret0, _ := ret[0].(*sfn.PublishStateMachineVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishStateMachineVersion indicates an expected call of PublishStateMachineVersion
func (mr *MockSFNAPIMockRecorder) PublishStateMachineVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishStateMachineVersion", reflect.TypeOf((*MockSFNAPI)(nil).PublishStateMachineVersion), arg0)
}

// PublishStateMachineVersionRequest mocks base method
func (m *MockSFNAPI) PublishStateMachineVersionRequest(arg0 *sfn.PublishStateMachineVersionInput) (*request.Request, *sfn.PublishStateMachineVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishStateMachineVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.PublishStateMachineVersionOutput)
	return ret0, ret1
}

// PublishStateMachineVersionRequest indicates an expected call of PublishStateMachineVersionRequest
func (mr *MockSFNAPIMockRecorder) PublishStateMachineVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishStateMachineVersionRequest", reflect.TypeOf((*MockSFNAPI)(nil).PublishStateMachineVersionRequest), arg0)
}

// PublishStateMachineVersionWithContext mocks base method
func (m *MockSFNAPI) PublishStateMachineVersionWithContext(arg0 context.Context, arg1 *sfn.PublishStateMachineVersionInput, arg2 ...request.Option) (*sfn.PublishStateMachineVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishStateMachineVersionWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.PublishStateMachineVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishStateMachineVersionWithContext indicates an expected call of PublishStateMachineVersionWithContext
func (mr *MockSFNAPIMockRecorder) PublishStateMachineVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishStateMachineVersionWithContext", reflect.TypeOf((*MockSFNAPI)(nil).PublishStateMachineVersionWithContext), varargs...)
}

// SendTaskFailure mocks base method
func (m *MockSFNAPI) SendTaskFailure(arg0 *sfn.SendTaskFailureInput) (*sfn.SendTaskFailureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskFailure", arg0)
	ret0, _ := ret[0].(*sfn.SendTaskFailureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTaskFailure indicates an expected call of SendTaskFailure
func (mr *MockSFNAPIMockRecorder) SendTaskFailure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskFailure", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskFailure), arg0)
}

// SendTaskFailureRequest mocks base method
func (m *MockSFNAPI) SendTaskFailureRequest(arg0 *sfn.SendTaskFailureInput) (*request.Request, *sfn.SendTaskFailureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskFailureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.SendTaskFailureOutput)
	return ret0, ret1
}

// SendTaskFailureRequest indicates an expected call of SendTaskFailureRequest
func (mr *MockSFNAPIMockRecorder) SendTaskFailureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskFailureRequest", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskFailureRequest), arg0)
}

// SendTaskFailureWithContext mocks base method
func (m *MockSFNAPI) SendTaskFailureWithContext(arg0 context.Context, arg1 *sfn.SendTaskFailureInput, arg2 ...request.Option) (*sfn.SendTaskFailureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTaskFailureWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.SendTaskFailureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTaskFailureWithContext indicates an expected call of SendTaskFailureWithContext
func (mr *MockSFNAPIMockRecorder) SendTaskFailureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskFailureWithContext", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskFailureWithContext), varargs...)
}

// SendTaskHeartbeat mocks base method
func (m *MockSFNAPI) SendTaskHeartbeat(arg0 *sfn.SendTaskHeartbeatInput) (*sfn.SendTaskHeartbeatOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskHeartbeat", arg0)
	ret0, _ := ret[0].(*sfn.SendTaskHeartbeatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTaskHeartbeat indicates an expected call of SendTaskHeartbeat
func (mr *MockSFNAPIMockRecorder) SendTaskHeartbeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskHeartbeat", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskHeartbeat), arg0)
}

// SendTaskHeartbeatRequest mocks base method
func (m *MockSFNAPI) SendTaskHeartbeatRequest(arg0 *sfn.SendTaskHeartbeatInput) (*request.Request, *sfn.SendTaskHeartbeatOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskHeartbeatRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.SendTaskHeartbeatOutput)
	return ret0, ret1
}

// SendTaskHeartbeatRequest indicates an expected call of SendTaskHeartbeatRequest
func (mr *MockSFNAPIMockRecorder) SendTaskHeartbeatRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskHeartbeatRequest", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskHeartbeatRequest), arg0)
}

// SendTaskHeartbeatWithContext mocks base method
func (m *MockSFNAPI) SendTaskHeartbeatWithContext(arg0 context.Context, arg1 *sfn.SendTaskHeartbeatInput, arg2 ...request.Option) (*sfn.SendTaskHeartbeatOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTaskHeartbeatWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.SendTaskHeartbeatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTaskHeartbeatWithContext indicates an expected call of SendTaskHeartbeatWithContext
func (mr *MockSFNAPIMockRecorder) SendTaskHeartbeatWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskHeartbeatWithContext", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskHeartbeatWithContext), varargs...)
}

// SendTaskSuccess mocks base method
func (m *MockSFNAPI) SendTaskSuccess(arg0 *sfn.SendTaskSuccessInput) (*sfn.SendTaskSuccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskSuccess", arg0)
	ret0, _ := ret[0].(*sfn.SendTaskSuccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTaskSuccess indicates an expected call of SendTaskSuccess
func (mr *MockSFNAPIMockRecorder) SendTaskSuccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskSuccess", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskSuccess), arg0)
}

// SendTaskSuccessRequest mocks base method
func (m *MockSFNAPI) SendTaskSuccessRequest(arg0 *sfn.SendTaskSuccessInput) (*request.Request, *sfn.SendTaskSuccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskSuccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.SendTaskSuccessOutput)
	return ret0, ret1
}

// SendTaskSuccessRequest indicates an expected call of SendTaskSuccessRequest
func (mr *MockSFNAPIMockRecorder) SendTaskSuccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskSuccessRequest", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskSuccessRequest), arg0)
}

// SendTaskSuccessWithContext mocks base method
func (m *MockSFNAPI) SendTaskSuccessWithContext(arg0 context.Context, arg1 *sfn.SendTaskSuccessInput, arg2 ...request.Option) (*sfn.SendTaskSuccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTaskSuccessWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.SendTaskSuccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTaskSuccessWithContext indicates an expected call of SendTaskSuccessWithContext
func (mr *MockSFNAPIMockRecorder) SendTaskSuccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskSuccessWithContext", reflect.TypeOf((*MockSFNAPI)(nil).SendTaskSuccessWithContext), varargs...)
}

// StartExecution mocks base method
func (m *MockSFNAPI) StartExecution(arg0 *sfn.StartExecutionInput) (*sfn.StartExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecution", arg0)
	ret0, _ := ret[0].(*sfn.StartExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecution indicates an expected call of StartExecution
func (mr *MockSFNAPIMockRecorder) StartExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockSFNAPI)(nil).StartExecution), arg0)
}

// StartExecutionRequest mocks base method
func (m *MockSFNAPI) StartExecutionRequest(arg0 *sfn.StartExecutionInput) (*request.Request, *sfn.StartExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.StartExecutionOutput)
	return ret0, ret1
}

// StartExecutionRequest indicates an expected call of StartExecutionRequest
func (mr *MockSFNAPIMockRecorder) StartExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecutionRequest", reflect.TypeOf((*MockSFNAPI)(nil).StartExecutionRequest), arg0)
}

// StartExecutionWithContext mocks base method
func (m *MockSFNAPI) StartExecutionWithContext(arg0 context.Context, arg1 *sfn.StartExecutionInput, arg2 ...request.Option) (*sfn.StartExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.StartExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecutionWithContext indicates an expected call of StartExecutionWithContext
func (mr *MockSFNAPIMockRecorder) StartExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecutionWithContext", reflect.TypeOf((*MockSFNAPI)(nil).StartExecutionWithContext), varargs...)
}

// StartSyncExecution mocks base method
func (m *MockSFNAPI) StartSyncExecution(arg0 *sfn.StartSyncExecutionInput) (*sfn.StartSyncExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSyncExecution", arg0)
	ret0, _ := ret[0].(*sfn.StartSyncExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSyncExecution indicates an expected call of StartSyncExecution
func (mr *MockSFNAPIMockRecorder) StartSyncExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSyncExecution", reflect.TypeOf((*MockSFNAPI)(nil).StartSyncExecution), arg0)
}

// StartSyncExecutionRequest mocks base method
func (m *MockSFNAPI) StartSyncExecutionRequest(arg0 *sfn.StartSyncExecutionInput) (*request.Request, *sfn.StartSyncExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSyncExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.StartSyncExecutionOutput)
	return ret0, ret1
}

// StartSyncExecutionRequest indicates an expected call of StartSyncExecutionRequest
func (mr *MockSFNAPIMockRecorder) StartSyncExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSyncExecutionRequest", reflect.TypeOf((*MockSFNAPI)(nil).StartSyncExecutionRequest), arg0)
}

// StartSyncExecutionWithContext mocks base method
func (m *MockSFNAPI) StartSyncExecutionWithContext(arg0 context.Context, arg1 *sfn.StartSyncExecutionInput, arg2 ...request.Option) (*sfn.StartSyncExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSyncExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.StartSyncExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSyncExecutionWithContext indicates an expected call of StartSyncExecutionWithContext
func (mr *MockSFNAPIMockRecorder) StartSyncExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSyncExecutionWithContext", reflect.TypeOf((*MockSFNAPI)(nil).StartSyncExecutionWithContext), varargs...)
}

// StopExecution mocks base method
func (m *MockSFNAPI) StopExecution(arg0 *sfn.StopExecutionInput) (*sfn.StopExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExecution", arg0)
	ret0, _ := ret[0].(*sfn.StopExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExecution indicates an expected call of StopExecution
func (mr *MockSFNAPIMockRecorder) StopExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecution", reflect.TypeOf((*MockSFNAPI)(nil).StopExecution), arg0)
}

// StopExecutionRequest mocks base method
func (m *MockSFNAPI) StopExecutionRequest(arg0 *sfn.StopExecutionInput) (*request.Request, *sfn.StopExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.StopExecutionOutput)
	return ret0, ret1
}

// StopExecutionRequest indicates an expected call of StopExecutionRequest
func (mr *MockSFNAPIMockRecorder) StopExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecutionRequest", reflect.TypeOf((*MockSFNAPI)(nil).StopExecutionRequest), arg0)
}

// StopExecutionWithContext mocks base method
func (m *MockSFNAPI) StopExecutionWithContext(arg0 context.Context, arg1 *sfn.StopExecutionInput, arg2 ...request.Option) (*sfn.StopExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.StopExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExecutionWithContext indicates an expected call of StopExecutionWithContext
func (mr *MockSFNAPIMockRecorder) StopExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecutionWithContext", reflect.TypeOf((*MockSFNAPI)(nil).StopExecutionWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSFNAPI) TagResource(arg0 *sfn.TagResourceInput) (*sfn.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*sfn.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSFNAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSFNAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSFNAPI) TagResourceRequest(arg0 *sfn.TagResourceInput) (*request.Request, *sfn.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSFNAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSFNAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSFNAPI) TagResourceWithContext(arg0 context.Context, arg1 *sfn.TagResourceInput, arg2 ...request.Option) (*sfn.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSFNAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSFNAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSFNAPI) UntagResource(arg0 *sfn.UntagResourceInput) (*sfn.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*sfn.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSFNAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSFNAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSFNAPI) UntagResourceRequest(arg0 *sfn.UntagResourceInput) (*request.Request, *sfn.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSFNAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSFNAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSFNAPI) UntagResourceWithContext(arg0 context.Context, arg1 *sfn.UntagResourceInput, arg2 ...request.Option) (*sfn.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSFNAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSFNAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateMapRun mocks base method
func (m *MockSFNAPI) UpdateMapRun(arg0 *sfn.UpdateMapRunInput) (*sfn.UpdateMapRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapRun", arg0)
	ret0, _ := ret[0].(*sfn.UpdateMapRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapRun indicates an expected call of UpdateMapRun
func (mr *MockSFNAPIMockRecorder) UpdateMapRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapRun", reflect.TypeOf((*MockSFNAPI)(nil).UpdateMapRun), arg0)
}

// UpdateMapRunRequest mocks base method
func (m *MockSFNAPI) UpdateMapRunRequest(arg0 *sfn.UpdateMapRunInput) (*request.Request, *sfn.UpdateMapRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.UpdateMapRunOutput)
	return ret0, ret1
}

// UpdateMapRunRequest indicates an expected call of UpdateMapRunRequest
func (mr *MockSFNAPIMockRecorder) UpdateMapRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapRunRequest", reflect.TypeOf((*MockSFNAPI)(nil).UpdateMapRunRequest), arg0)
}

// UpdateMapRunWithContext mocks base method
func (m *MockSFNAPI) UpdateMapRunWithContext(arg0 context.Context, arg1 *sfn.UpdateMapRunInput, arg2 ...request.Option) (*sfn.UpdateMapRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMapRunWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.UpdateMapRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapRunWithContext indicates an expected call of UpdateMapRunWithContext
func (mr *MockSFNAPIMockRecorder) UpdateMapRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapRunWithContext", reflect.TypeOf((*MockSFNAPI)(nil).UpdateMapRunWithContext), varargs...)
}

// UpdateStateMachine mocks base method
func (m *MockSFNAPI) UpdateStateMachine(arg0 *sfn.UpdateStateMachineInput) (*sfn.UpdateStateMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStateMachine", arg0)
	ret0, _ := ret[0].(*sfn.UpdateStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStateMachine indicates an expected call of UpdateStateMachine
func (mr *MockSFNAPIMockRecorder) UpdateStateMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachine", reflect.TypeOf((*MockSFNAPI)(nil).UpdateStateMachine), arg0)
}

// UpdateStateMachineAlias mocks base method
func (m *MockSFNAPI) UpdateStateMachineAlias(arg0 *sfn.UpdateStateMachineAliasInput) (*sfn.UpdateStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStateMachineAlias", arg0)
	ret0, _ := ret[0].(*sfn.UpdateStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStateMachineAlias indicates an expected call of UpdateStateMachineAlias
func (mr *MockSFNAPIMockRecorder) UpdateStateMachineAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachineAlias", reflect.TypeOf((*MockSFNAPI)(nil).UpdateStateMachineAlias), arg0)
}

// UpdateStateMachineAliasRequest mocks base method
func (m *MockSFNAPI) UpdateStateMachineAliasRequest(arg0 *sfn.UpdateStateMachineAliasInput) (*request.Request, *sfn.UpdateStateMachineAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStateMachineAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.UpdateStateMachineAliasOutput)
	return ret0, ret1
}

// UpdateStateMachineAliasRequest indicates an expected call of UpdateStateMachineAliasRequest
func (mr *MockSFNAPIMockRecorder) UpdateStateMachineAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachineAliasRequest", reflect.TypeOf((*MockSFNAPI)(nil).UpdateStateMachineAliasRequest), arg0)
}

// UpdateStateMachineAliasWithContext mocks base method
func (m *MockSFNAPI) UpdateStateMachineAliasWithContext(arg0 context.Context, arg1 *sfn.UpdateStateMachineAliasInput, arg2 ...request.Option) (*sfn.UpdateStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStateMachineAliasWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.UpdateStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStateMachineAliasWithContext indicates an expected call of UpdateStateMachineAliasWithContext
func (mr *MockSFNAPIMockRecorder) UpdateStateMachineAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachineAliasWithContext", reflect.TypeOf((*MockSFNAPI)(nil).UpdateStateMachineAliasWithContext), varargs...)
}

// UpdateStateMachineRequest mocks base method
func (m *MockSFNAPI) UpdateStateMachineRequest(arg0 *sfn.UpdateStateMachineInput) (*request.Request, *sfn.UpdateStateMachineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStateMachineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sfn.UpdateStateMachineOutput)
	return ret0, ret1
}

// UpdateStateMachineRequest indicates an expected call of UpdateStateMachineRequest
func (mr *MockSFNAPIMockRecorder) UpdateStateMachineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachineRequest", reflect.TypeOf((*MockSFNAPI)(nil).UpdateStateMachineRequest), arg0)
}

// UpdateStateMachineWithContext mocks base method
func (m *MockSFNAPI) UpdateStateMachineWithContext(arg0 context.Context, arg1 *sfn.UpdateStateMachineInput, arg2 ...request.Option) (*sfn.UpdateStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStateMachineWithContext", varargs...)
	ret0, _ := ret[0].(*sfn.UpdateStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStateMachineWithContext indicates an expected call of UpdateStateMachineWithContext
func (mr *MockSFNAPIMockRecorder) UpdateStateMachineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachineWithContext", reflect.TypeOf((*MockSFNAPI)(nil).UpdateStateMachineWithContext), varargs...)
}
