// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/globalaccelerator/globalacceleratoriface (interfaces: GlobalAcceleratorAPI)

// Package globalacceleratormock is a generated GoMock package.
package globalacceleratormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	globalaccelerator "github.com/aws/aws-sdk-go/service/globalaccelerator"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGlobalAcceleratorAPI is a mock of GlobalAcceleratorAPI interface
type MockGlobalAcceleratorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalAcceleratorAPIMockRecorder
}

// MockGlobalAcceleratorAPIMockRecorder is the mock recorder for MockGlobalAcceleratorAPI
type MockGlobalAcceleratorAPIMockRecorder struct {
	mock *MockGlobalAcceleratorAPI
}

// NewMockGlobalAcceleratorAPI creates a new mock instance
func NewMockGlobalAcceleratorAPI(ctrl *gomock.Controller) *MockGlobalAcceleratorAPI {
	mock := &MockGlobalAcceleratorAPI{ctrl: ctrl}
	mock.recorder = &MockGlobalAcceleratorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalAcceleratorAPI) EXPECT() *MockGlobalAcceleratorAPIMockRecorder {
	return m.recorder
}

// CreateAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) CreateAccelerator(arg0 *globalaccelerator.CreateAcceleratorInput) (*globalaccelerator.CreateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccelerator indicates an expected call of CreateAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateAccelerator), arg0)
}

// CreateAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateAcceleratorRequest(arg0 *globalaccelerator.CreateAcceleratorInput) (*request.Request, *globalaccelerator.CreateAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateAcceleratorOutput)
	return ret0, ret1
}

// CreateAcceleratorRequest indicates an expected call of CreateAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateAcceleratorRequest), arg0)
}

// CreateAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.CreateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcceleratorWithContext indicates an expected call of CreateAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateAcceleratorWithContext), varargs...)
}

// CreateEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) CreateEndpointGroup(arg0 *globalaccelerator.CreateEndpointGroupInput) (*globalaccelerator.CreateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointGroup indicates an expected call of CreateEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateEndpointGroup), arg0)
}

// CreateEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateEndpointGroupRequest(arg0 *globalaccelerator.CreateEndpointGroupInput) (*request.Request, *globalaccelerator.CreateEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateEndpointGroupOutput)
	return ret0, ret1
}

// CreateEndpointGroupRequest indicates an expected call of CreateEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateEndpointGroupRequest), arg0)
}

// CreateEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.CreateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointGroupWithContext indicates an expected call of CreateEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateEndpointGroupWithContext), varargs...)
}

// CreateListener mocks base method
func (m *MockGlobalAcceleratorAPI) CreateListener(arg0 *globalaccelerator.CreateListenerInput) (*globalaccelerator.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListener indicates an expected call of CreateListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateListener), arg0)
}

// CreateListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateListenerRequest(arg0 *globalaccelerator.CreateListenerInput) (*request.Request, *globalaccelerator.CreateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateListenerOutput)
	return ret0, ret1
}

// CreateListenerRequest indicates an expected call of CreateListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateListenerRequest), arg0)
}

// CreateListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateListenerInput, arg2 ...request.Option) (*globalaccelerator.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListenerWithContext indicates an expected call of CreateListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateListenerWithContext), varargs...)
}

// DeleteAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteAccelerator(arg0 *globalaccelerator.DeleteAcceleratorInput) (*globalaccelerator.DeleteAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccelerator indicates an expected call of DeleteAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteAccelerator), arg0)
}

// DeleteAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteAcceleratorRequest(arg0 *globalaccelerator.DeleteAcceleratorInput) (*request.Request, *globalaccelerator.DeleteAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteAcceleratorOutput)
	return ret0, ret1
}

// DeleteAcceleratorRequest indicates an expected call of DeleteAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteAcceleratorRequest), arg0)
}

// DeleteAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.DeleteAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAcceleratorWithContext indicates an expected call of DeleteAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteAcceleratorWithContext), varargs...)
}

// DeleteEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteEndpointGroup(arg0 *globalaccelerator.DeleteEndpointGroupInput) (*globalaccelerator.DeleteEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointGroup indicates an expected call of DeleteEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteEndpointGroup), arg0)
}

// DeleteEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteEndpointGroupRequest(arg0 *globalaccelerator.DeleteEndpointGroupInput) (*request.Request, *globalaccelerator.DeleteEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteEndpointGroupOutput)
	return ret0, ret1
}

// DeleteEndpointGroupRequest indicates an expected call of DeleteEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteEndpointGroupRequest), arg0)
}

// DeleteEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.DeleteEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointGroupWithContext indicates an expected call of DeleteEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteEndpointGroupWithContext), varargs...)
}

// DeleteListener mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteListener(arg0 *globalaccelerator.DeleteListenerInput) (*globalaccelerator.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListener indicates an expected call of DeleteListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteListener), arg0)
}

// DeleteListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteListenerRequest(arg0 *globalaccelerator.DeleteListenerInput) (*request.Request, *globalaccelerator.DeleteListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteListenerOutput)
	return ret0, ret1
}

// DeleteListenerRequest indicates an expected call of DeleteListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteListenerRequest), arg0)
}

// DeleteListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteListenerInput, arg2 ...request.Option) (*globalaccelerator.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListenerWithContext indicates an expected call of DeleteListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteListenerWithContext), varargs...)
}

// DescribeAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAccelerator(arg0 *globalaccelerator.DescribeAcceleratorInput) (*globalaccelerator.DescribeAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccelerator indicates an expected call of DescribeAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAccelerator), arg0)
}

// DescribeAcceleratorAttributes mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorAttributes(arg0 *globalaccelerator.DescribeAcceleratorAttributesInput) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAcceleratorAttributes", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAcceleratorAttributes indicates an expected call of DescribeAcceleratorAttributes
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorAttributes", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorAttributes), arg0)
}

// DescribeAcceleratorAttributesRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorAttributesRequest(arg0 *globalaccelerator.DescribeAcceleratorAttributesInput) (*request.Request, *globalaccelerator.DescribeAcceleratorAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAcceleratorAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeAcceleratorAttributesOutput)
	return ret0, ret1
}

// DescribeAcceleratorAttributesRequest indicates an expected call of DescribeAcceleratorAttributesRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorAttributesRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorAttributesRequest), arg0)
}

// DescribeAcceleratorAttributesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorAttributesWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeAcceleratorAttributesInput, arg2 ...request.Option) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAcceleratorAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAcceleratorAttributesWithContext indicates an expected call of DescribeAcceleratorAttributesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorAttributesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorAttributesWithContext), varargs...)
}

// DescribeAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorRequest(arg0 *globalaccelerator.DescribeAcceleratorInput) (*request.Request, *globalaccelerator.DescribeAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeAcceleratorOutput)
	return ret0, ret1
}

// DescribeAcceleratorRequest indicates an expected call of DescribeAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorRequest), arg0)
}

// DescribeAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.DescribeAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAcceleratorWithContext indicates an expected call of DescribeAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorWithContext), varargs...)
}

// DescribeEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeEndpointGroup(arg0 *globalaccelerator.DescribeEndpointGroupInput) (*globalaccelerator.DescribeEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointGroup indicates an expected call of DescribeEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeEndpointGroup), arg0)
}

// DescribeEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeEndpointGroupRequest(arg0 *globalaccelerator.DescribeEndpointGroupInput) (*request.Request, *globalaccelerator.DescribeEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeEndpointGroupOutput)
	return ret0, ret1
}

// DescribeEndpointGroupRequest indicates an expected call of DescribeEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeEndpointGroupRequest), arg0)
}

// DescribeEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.DescribeEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointGroupWithContext indicates an expected call of DescribeEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeEndpointGroupWithContext), varargs...)
}

// DescribeListener mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeListener(arg0 *globalaccelerator.DescribeListenerInput) (*globalaccelerator.DescribeListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeListener indicates an expected call of DescribeListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeListener), arg0)
}

// DescribeListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeListenerRequest(arg0 *globalaccelerator.DescribeListenerInput) (*request.Request, *globalaccelerator.DescribeListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeListenerOutput)
	return ret0, ret1
}

// DescribeListenerRequest indicates an expected call of DescribeListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeListenerRequest), arg0)
}

// DescribeListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeListenerInput, arg2 ...request.Option) (*globalaccelerator.DescribeListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeListenerWithContext indicates an expected call of DescribeListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeListenerWithContext), varargs...)
}

// ListAccelerators mocks base method
func (m *MockGlobalAcceleratorAPI) ListAccelerators(arg0 *globalaccelerator.ListAcceleratorsInput) (*globalaccelerator.ListAcceleratorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccelerators", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListAcceleratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccelerators indicates an expected call of ListAccelerators
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAccelerators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccelerators", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAccelerators), arg0)
}

// ListAcceleratorsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListAcceleratorsRequest(arg0 *globalaccelerator.ListAcceleratorsInput) (*request.Request, *globalaccelerator.ListAcceleratorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceleratorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListAcceleratorsOutput)
	return ret0, ret1
}

// ListAcceleratorsRequest indicates an expected call of ListAcceleratorsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAcceleratorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceleratorsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAcceleratorsRequest), arg0)
}

// ListAcceleratorsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListAcceleratorsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListAcceleratorsInput, arg2 ...request.Option) (*globalaccelerator.ListAcceleratorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcceleratorsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListAcceleratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcceleratorsWithContext indicates an expected call of ListAcceleratorsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAcceleratorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceleratorsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAcceleratorsWithContext), varargs...)
}

// ListEndpointGroups mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroups(arg0 *globalaccelerator.ListEndpointGroupsInput) (*globalaccelerator.ListEndpointGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointGroups", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListEndpointGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointGroups indicates an expected call of ListEndpointGroups
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroups", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroups), arg0)
}

// ListEndpointGroupsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroupsRequest(arg0 *globalaccelerator.ListEndpointGroupsInput) (*request.Request, *globalaccelerator.ListEndpointGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListEndpointGroupsOutput)
	return ret0, ret1
}

// ListEndpointGroupsRequest indicates an expected call of ListEndpointGroupsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroupsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroupsRequest), arg0)
}

// ListEndpointGroupsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroupsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListEndpointGroupsInput, arg2 ...request.Option) (*globalaccelerator.ListEndpointGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListEndpointGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointGroupsWithContext indicates an expected call of ListEndpointGroupsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroupsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroupsWithContext), varargs...)
}

// ListListeners mocks base method
func (m *MockGlobalAcceleratorAPI) ListListeners(arg0 *globalaccelerator.ListListenersInput) (*globalaccelerator.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListeners", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListeners indicates an expected call of ListListeners
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListeners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListeners", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListeners), arg0)
}

// ListListenersRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListListenersRequest(arg0 *globalaccelerator.ListListenersInput) (*request.Request, *globalaccelerator.ListListenersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListenersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListListenersOutput)
	return ret0, ret1
}

// ListListenersRequest indicates an expected call of ListListenersRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListenersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListenersRequest), arg0)
}

// ListListenersWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListListenersWithContext(arg0 context.Context, arg1 *globalaccelerator.ListListenersInput, arg2 ...request.Option) (*globalaccelerator.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListListenersWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListenersWithContext indicates an expected call of ListListenersWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListenersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListenersWithContext), varargs...)
}

// UpdateAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAccelerator(arg0 *globalaccelerator.UpdateAcceleratorInput) (*globalaccelerator.UpdateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccelerator indicates an expected call of UpdateAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAccelerator), arg0)
}

// UpdateAcceleratorAttributes mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorAttributes(arg0 *globalaccelerator.UpdateAcceleratorAttributesInput) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceleratorAttributes", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceleratorAttributes indicates an expected call of UpdateAcceleratorAttributes
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorAttributes", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorAttributes), arg0)
}

// UpdateAcceleratorAttributesRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorAttributesRequest(arg0 *globalaccelerator.UpdateAcceleratorAttributesInput) (*request.Request, *globalaccelerator.UpdateAcceleratorAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceleratorAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateAcceleratorAttributesOutput)
	return ret0, ret1
}

// UpdateAcceleratorAttributesRequest indicates an expected call of UpdateAcceleratorAttributesRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorAttributesRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorAttributesRequest), arg0)
}

// UpdateAcceleratorAttributesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorAttributesWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateAcceleratorAttributesInput, arg2 ...request.Option) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcceleratorAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceleratorAttributesWithContext indicates an expected call of UpdateAcceleratorAttributesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorAttributesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorAttributesWithContext), varargs...)
}

// UpdateAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorRequest(arg0 *globalaccelerator.UpdateAcceleratorInput) (*request.Request, *globalaccelerator.UpdateAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateAcceleratorOutput)
	return ret0, ret1
}

// UpdateAcceleratorRequest indicates an expected call of UpdateAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorRequest), arg0)
}

// UpdateAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.UpdateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceleratorWithContext indicates an expected call of UpdateAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorWithContext), varargs...)
}

// UpdateEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateEndpointGroup(arg0 *globalaccelerator.UpdateEndpointGroupInput) (*globalaccelerator.UpdateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointGroup indicates an expected call of UpdateEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateEndpointGroup), arg0)
}

// UpdateEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateEndpointGroupRequest(arg0 *globalaccelerator.UpdateEndpointGroupInput) (*request.Request, *globalaccelerator.UpdateEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateEndpointGroupOutput)
	return ret0, ret1
}

// UpdateEndpointGroupRequest indicates an expected call of UpdateEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateEndpointGroupRequest), arg0)
}

// UpdateEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.UpdateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointGroupWithContext indicates an expected call of UpdateEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateEndpointGroupWithContext), varargs...)
}

// UpdateListener mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateListener(arg0 *globalaccelerator.UpdateListenerInput) (*globalaccelerator.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListener indicates an expected call of UpdateListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateListener), arg0)
}

// UpdateListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateListenerRequest(arg0 *globalaccelerator.UpdateListenerInput) (*request.Request, *globalaccelerator.UpdateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateListenerOutput)
	return ret0, ret1
}

// UpdateListenerRequest indicates an expected call of UpdateListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateListenerRequest), arg0)
}

// UpdateListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateListenerInput, arg2 ...request.Option) (*globalaccelerator.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListenerWithContext indicates an expected call of UpdateListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateListenerWithContext), varargs...)
}
