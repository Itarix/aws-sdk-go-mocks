// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/sagemakergeospatial/sagemakergeospatialiface (interfaces: SageMakerGeospatialAPI)

// Package sagemakergeospatialmock is a generated GoMock package.
package sagemakergeospatialmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	sagemakergeospatial "github.com/aws/aws-sdk-go/service/sagemakergeospatial"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSageMakerGeospatialAPI is a mock of SageMakerGeospatialAPI interface
type MockSageMakerGeospatialAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSageMakerGeospatialAPIMockRecorder
}

// MockSageMakerGeospatialAPIMockRecorder is the mock recorder for MockSageMakerGeospatialAPI
type MockSageMakerGeospatialAPIMockRecorder struct {
	mock *MockSageMakerGeospatialAPI
}

// NewMockSageMakerGeospatialAPI creates a new mock instance
func NewMockSageMakerGeospatialAPI(ctrl *gomock.Controller) *MockSageMakerGeospatialAPI {
	mock := &MockSageMakerGeospatialAPI{ctrl: ctrl}
	mock.recorder = &MockSageMakerGeospatialAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSageMakerGeospatialAPI) EXPECT() *MockSageMakerGeospatialAPIMockRecorder {
	return m.recorder
}

// DeleteEarthObservationJob mocks base method
func (m *MockSageMakerGeospatialAPI) DeleteEarthObservationJob(arg0 *sagemakergeospatial.DeleteEarthObservationJobInput) (*sagemakergeospatial.DeleteEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEarthObservationJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.DeleteEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEarthObservationJob indicates an expected call of DeleteEarthObservationJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) DeleteEarthObservationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEarthObservationJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).DeleteEarthObservationJob), arg0)
}

// DeleteEarthObservationJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) DeleteEarthObservationJobRequest(arg0 *sagemakergeospatial.DeleteEarthObservationJobInput) (*request.Request, *sagemakergeospatial.DeleteEarthObservationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEarthObservationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.DeleteEarthObservationJobOutput)
	return ret0, ret1
}

// DeleteEarthObservationJobRequest indicates an expected call of DeleteEarthObservationJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) DeleteEarthObservationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEarthObservationJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).DeleteEarthObservationJobRequest), arg0)
}

// DeleteEarthObservationJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) DeleteEarthObservationJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.DeleteEarthObservationJobInput, arg2 ...request.Option) (*sagemakergeospatial.DeleteEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEarthObservationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.DeleteEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEarthObservationJobWithContext indicates an expected call of DeleteEarthObservationJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) DeleteEarthObservationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEarthObservationJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).DeleteEarthObservationJobWithContext), varargs...)
}

// DeleteVectorEnrichmentJob mocks base method
func (m *MockSageMakerGeospatialAPI) DeleteVectorEnrichmentJob(arg0 *sagemakergeospatial.DeleteVectorEnrichmentJobInput) (*sagemakergeospatial.DeleteVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVectorEnrichmentJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.DeleteVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVectorEnrichmentJob indicates an expected call of DeleteVectorEnrichmentJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) DeleteVectorEnrichmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVectorEnrichmentJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).DeleteVectorEnrichmentJob), arg0)
}

// DeleteVectorEnrichmentJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) DeleteVectorEnrichmentJobRequest(arg0 *sagemakergeospatial.DeleteVectorEnrichmentJobInput) (*request.Request, *sagemakergeospatial.DeleteVectorEnrichmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVectorEnrichmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.DeleteVectorEnrichmentJobOutput)
	return ret0, ret1
}

// DeleteVectorEnrichmentJobRequest indicates an expected call of DeleteVectorEnrichmentJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) DeleteVectorEnrichmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVectorEnrichmentJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).DeleteVectorEnrichmentJobRequest), arg0)
}

// DeleteVectorEnrichmentJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) DeleteVectorEnrichmentJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.DeleteVectorEnrichmentJobInput, arg2 ...request.Option) (*sagemakergeospatial.DeleteVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVectorEnrichmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.DeleteVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVectorEnrichmentJobWithContext indicates an expected call of DeleteVectorEnrichmentJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) DeleteVectorEnrichmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVectorEnrichmentJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).DeleteVectorEnrichmentJobWithContext), varargs...)
}

// ExportEarthObservationJob mocks base method
func (m *MockSageMakerGeospatialAPI) ExportEarthObservationJob(arg0 *sagemakergeospatial.ExportEarthObservationJobInput) (*sagemakergeospatial.ExportEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEarthObservationJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.ExportEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportEarthObservationJob indicates an expected call of ExportEarthObservationJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) ExportEarthObservationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEarthObservationJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ExportEarthObservationJob), arg0)
}

// ExportEarthObservationJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) ExportEarthObservationJobRequest(arg0 *sagemakergeospatial.ExportEarthObservationJobInput) (*request.Request, *sagemakergeospatial.ExportEarthObservationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEarthObservationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.ExportEarthObservationJobOutput)
	return ret0, ret1
}

// ExportEarthObservationJobRequest indicates an expected call of ExportEarthObservationJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) ExportEarthObservationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEarthObservationJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ExportEarthObservationJobRequest), arg0)
}

// ExportEarthObservationJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ExportEarthObservationJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ExportEarthObservationJobInput, arg2 ...request.Option) (*sagemakergeospatial.ExportEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportEarthObservationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.ExportEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportEarthObservationJobWithContext indicates an expected call of ExportEarthObservationJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ExportEarthObservationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEarthObservationJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ExportEarthObservationJobWithContext), varargs...)
}

// ExportVectorEnrichmentJob mocks base method
func (m *MockSageMakerGeospatialAPI) ExportVectorEnrichmentJob(arg0 *sagemakergeospatial.ExportVectorEnrichmentJobInput) (*sagemakergeospatial.ExportVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportVectorEnrichmentJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.ExportVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportVectorEnrichmentJob indicates an expected call of ExportVectorEnrichmentJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) ExportVectorEnrichmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportVectorEnrichmentJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ExportVectorEnrichmentJob), arg0)
}

// ExportVectorEnrichmentJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) ExportVectorEnrichmentJobRequest(arg0 *sagemakergeospatial.ExportVectorEnrichmentJobInput) (*request.Request, *sagemakergeospatial.ExportVectorEnrichmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportVectorEnrichmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.ExportVectorEnrichmentJobOutput)
	return ret0, ret1
}

// ExportVectorEnrichmentJobRequest indicates an expected call of ExportVectorEnrichmentJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) ExportVectorEnrichmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportVectorEnrichmentJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ExportVectorEnrichmentJobRequest), arg0)
}

// ExportVectorEnrichmentJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ExportVectorEnrichmentJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ExportVectorEnrichmentJobInput, arg2 ...request.Option) (*sagemakergeospatial.ExportVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportVectorEnrichmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.ExportVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportVectorEnrichmentJobWithContext indicates an expected call of ExportVectorEnrichmentJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ExportVectorEnrichmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportVectorEnrichmentJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ExportVectorEnrichmentJobWithContext), varargs...)
}

// GetEarthObservationJob mocks base method
func (m *MockSageMakerGeospatialAPI) GetEarthObservationJob(arg0 *sagemakergeospatial.GetEarthObservationJobInput) (*sagemakergeospatial.GetEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarthObservationJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.GetEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarthObservationJob indicates an expected call of GetEarthObservationJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetEarthObservationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarthObservationJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetEarthObservationJob), arg0)
}

// GetEarthObservationJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) GetEarthObservationJobRequest(arg0 *sagemakergeospatial.GetEarthObservationJobInput) (*request.Request, *sagemakergeospatial.GetEarthObservationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarthObservationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.GetEarthObservationJobOutput)
	return ret0, ret1
}

// GetEarthObservationJobRequest indicates an expected call of GetEarthObservationJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetEarthObservationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarthObservationJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetEarthObservationJobRequest), arg0)
}

// GetEarthObservationJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) GetEarthObservationJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.GetEarthObservationJobInput, arg2 ...request.Option) (*sagemakergeospatial.GetEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEarthObservationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.GetEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarthObservationJobWithContext indicates an expected call of GetEarthObservationJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetEarthObservationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarthObservationJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetEarthObservationJobWithContext), varargs...)
}

// GetRasterDataCollection mocks base method
func (m *MockSageMakerGeospatialAPI) GetRasterDataCollection(arg0 *sagemakergeospatial.GetRasterDataCollectionInput) (*sagemakergeospatial.GetRasterDataCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRasterDataCollection", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.GetRasterDataCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRasterDataCollection indicates an expected call of GetRasterDataCollection
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetRasterDataCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRasterDataCollection", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetRasterDataCollection), arg0)
}

// GetRasterDataCollectionRequest mocks base method
func (m *MockSageMakerGeospatialAPI) GetRasterDataCollectionRequest(arg0 *sagemakergeospatial.GetRasterDataCollectionInput) (*request.Request, *sagemakergeospatial.GetRasterDataCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRasterDataCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.GetRasterDataCollectionOutput)
	return ret0, ret1
}

// GetRasterDataCollectionRequest indicates an expected call of GetRasterDataCollectionRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetRasterDataCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRasterDataCollectionRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetRasterDataCollectionRequest), arg0)
}

// GetRasterDataCollectionWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) GetRasterDataCollectionWithContext(arg0 context.Context, arg1 *sagemakergeospatial.GetRasterDataCollectionInput, arg2 ...request.Option) (*sagemakergeospatial.GetRasterDataCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRasterDataCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.GetRasterDataCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRasterDataCollectionWithContext indicates an expected call of GetRasterDataCollectionWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetRasterDataCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRasterDataCollectionWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetRasterDataCollectionWithContext), varargs...)
}

// GetTile mocks base method
func (m *MockSageMakerGeospatialAPI) GetTile(arg0 *sagemakergeospatial.GetTileInput) (*sagemakergeospatial.GetTileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTile", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.GetTileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTile indicates an expected call of GetTile
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetTile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTile", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetTile), arg0)
}

// GetTileRequest mocks base method
func (m *MockSageMakerGeospatialAPI) GetTileRequest(arg0 *sagemakergeospatial.GetTileInput) (*request.Request, *sagemakergeospatial.GetTileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.GetTileOutput)
	return ret0, ret1
}

// GetTileRequest indicates an expected call of GetTileRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetTileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTileRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetTileRequest), arg0)
}

// GetTileWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) GetTileWithContext(arg0 context.Context, arg1 *sagemakergeospatial.GetTileInput, arg2 ...request.Option) (*sagemakergeospatial.GetTileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTileWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.GetTileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTileWithContext indicates an expected call of GetTileWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetTileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTileWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetTileWithContext), varargs...)
}

// GetVectorEnrichmentJob mocks base method
func (m *MockSageMakerGeospatialAPI) GetVectorEnrichmentJob(arg0 *sagemakergeospatial.GetVectorEnrichmentJobInput) (*sagemakergeospatial.GetVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVectorEnrichmentJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.GetVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVectorEnrichmentJob indicates an expected call of GetVectorEnrichmentJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetVectorEnrichmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVectorEnrichmentJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetVectorEnrichmentJob), arg0)
}

// GetVectorEnrichmentJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) GetVectorEnrichmentJobRequest(arg0 *sagemakergeospatial.GetVectorEnrichmentJobInput) (*request.Request, *sagemakergeospatial.GetVectorEnrichmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVectorEnrichmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.GetVectorEnrichmentJobOutput)
	return ret0, ret1
}

// GetVectorEnrichmentJobRequest indicates an expected call of GetVectorEnrichmentJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetVectorEnrichmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVectorEnrichmentJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetVectorEnrichmentJobRequest), arg0)
}

// GetVectorEnrichmentJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) GetVectorEnrichmentJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.GetVectorEnrichmentJobInput, arg2 ...request.Option) (*sagemakergeospatial.GetVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVectorEnrichmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.GetVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVectorEnrichmentJobWithContext indicates an expected call of GetVectorEnrichmentJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) GetVectorEnrichmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVectorEnrichmentJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).GetVectorEnrichmentJobWithContext), varargs...)
}

// ListEarthObservationJobs mocks base method
func (m *MockSageMakerGeospatialAPI) ListEarthObservationJobs(arg0 *sagemakergeospatial.ListEarthObservationJobsInput) (*sagemakergeospatial.ListEarthObservationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEarthObservationJobs", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.ListEarthObservationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEarthObservationJobs indicates an expected call of ListEarthObservationJobs
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListEarthObservationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEarthObservationJobs", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListEarthObservationJobs), arg0)
}

// ListEarthObservationJobsPages mocks base method
func (m *MockSageMakerGeospatialAPI) ListEarthObservationJobsPages(arg0 *sagemakergeospatial.ListEarthObservationJobsInput, arg1 func(*sagemakergeospatial.ListEarthObservationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEarthObservationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEarthObservationJobsPages indicates an expected call of ListEarthObservationJobsPages
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListEarthObservationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEarthObservationJobsPages", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListEarthObservationJobsPages), arg0, arg1)
}

// ListEarthObservationJobsPagesWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ListEarthObservationJobsPagesWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ListEarthObservationJobsInput, arg2 func(*sagemakergeospatial.ListEarthObservationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEarthObservationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEarthObservationJobsPagesWithContext indicates an expected call of ListEarthObservationJobsPagesWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListEarthObservationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEarthObservationJobsPagesWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListEarthObservationJobsPagesWithContext), varargs...)
}

// ListEarthObservationJobsRequest mocks base method
func (m *MockSageMakerGeospatialAPI) ListEarthObservationJobsRequest(arg0 *sagemakergeospatial.ListEarthObservationJobsInput) (*request.Request, *sagemakergeospatial.ListEarthObservationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEarthObservationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.ListEarthObservationJobsOutput)
	return ret0, ret1
}

// ListEarthObservationJobsRequest indicates an expected call of ListEarthObservationJobsRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListEarthObservationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEarthObservationJobsRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListEarthObservationJobsRequest), arg0)
}

// ListEarthObservationJobsWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ListEarthObservationJobsWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ListEarthObservationJobsInput, arg2 ...request.Option) (*sagemakergeospatial.ListEarthObservationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEarthObservationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.ListEarthObservationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEarthObservationJobsWithContext indicates an expected call of ListEarthObservationJobsWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListEarthObservationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEarthObservationJobsWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListEarthObservationJobsWithContext), varargs...)
}

// ListRasterDataCollections mocks base method
func (m *MockSageMakerGeospatialAPI) ListRasterDataCollections(arg0 *sagemakergeospatial.ListRasterDataCollectionsInput) (*sagemakergeospatial.ListRasterDataCollectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRasterDataCollections", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.ListRasterDataCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRasterDataCollections indicates an expected call of ListRasterDataCollections
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListRasterDataCollections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRasterDataCollections", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListRasterDataCollections), arg0)
}

// ListRasterDataCollectionsPages mocks base method
func (m *MockSageMakerGeospatialAPI) ListRasterDataCollectionsPages(arg0 *sagemakergeospatial.ListRasterDataCollectionsInput, arg1 func(*sagemakergeospatial.ListRasterDataCollectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRasterDataCollectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRasterDataCollectionsPages indicates an expected call of ListRasterDataCollectionsPages
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListRasterDataCollectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRasterDataCollectionsPages", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListRasterDataCollectionsPages), arg0, arg1)
}

// ListRasterDataCollectionsPagesWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ListRasterDataCollectionsPagesWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ListRasterDataCollectionsInput, arg2 func(*sagemakergeospatial.ListRasterDataCollectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRasterDataCollectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRasterDataCollectionsPagesWithContext indicates an expected call of ListRasterDataCollectionsPagesWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListRasterDataCollectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRasterDataCollectionsPagesWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListRasterDataCollectionsPagesWithContext), varargs...)
}

// ListRasterDataCollectionsRequest mocks base method
func (m *MockSageMakerGeospatialAPI) ListRasterDataCollectionsRequest(arg0 *sagemakergeospatial.ListRasterDataCollectionsInput) (*request.Request, *sagemakergeospatial.ListRasterDataCollectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRasterDataCollectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.ListRasterDataCollectionsOutput)
	return ret0, ret1
}

// ListRasterDataCollectionsRequest indicates an expected call of ListRasterDataCollectionsRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListRasterDataCollectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRasterDataCollectionsRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListRasterDataCollectionsRequest), arg0)
}

// ListRasterDataCollectionsWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ListRasterDataCollectionsWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ListRasterDataCollectionsInput, arg2 ...request.Option) (*sagemakergeospatial.ListRasterDataCollectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRasterDataCollectionsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.ListRasterDataCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRasterDataCollectionsWithContext indicates an expected call of ListRasterDataCollectionsWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListRasterDataCollectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRasterDataCollectionsWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListRasterDataCollectionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSageMakerGeospatialAPI) ListTagsForResource(arg0 *sagemakergeospatial.ListTagsForResourceInput) (*sagemakergeospatial.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSageMakerGeospatialAPI) ListTagsForResourceRequest(arg0 *sagemakergeospatial.ListTagsForResourceInput) (*request.Request, *sagemakergeospatial.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ListTagsForResourceInput, arg2 ...request.Option) (*sagemakergeospatial.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVectorEnrichmentJobs mocks base method
func (m *MockSageMakerGeospatialAPI) ListVectorEnrichmentJobs(arg0 *sagemakergeospatial.ListVectorEnrichmentJobsInput) (*sagemakergeospatial.ListVectorEnrichmentJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVectorEnrichmentJobs", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.ListVectorEnrichmentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVectorEnrichmentJobs indicates an expected call of ListVectorEnrichmentJobs
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListVectorEnrichmentJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVectorEnrichmentJobs", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListVectorEnrichmentJobs), arg0)
}

// ListVectorEnrichmentJobsPages mocks base method
func (m *MockSageMakerGeospatialAPI) ListVectorEnrichmentJobsPages(arg0 *sagemakergeospatial.ListVectorEnrichmentJobsInput, arg1 func(*sagemakergeospatial.ListVectorEnrichmentJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVectorEnrichmentJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVectorEnrichmentJobsPages indicates an expected call of ListVectorEnrichmentJobsPages
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListVectorEnrichmentJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVectorEnrichmentJobsPages", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListVectorEnrichmentJobsPages), arg0, arg1)
}

// ListVectorEnrichmentJobsPagesWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ListVectorEnrichmentJobsPagesWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ListVectorEnrichmentJobsInput, arg2 func(*sagemakergeospatial.ListVectorEnrichmentJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVectorEnrichmentJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVectorEnrichmentJobsPagesWithContext indicates an expected call of ListVectorEnrichmentJobsPagesWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListVectorEnrichmentJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVectorEnrichmentJobsPagesWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListVectorEnrichmentJobsPagesWithContext), varargs...)
}

// ListVectorEnrichmentJobsRequest mocks base method
func (m *MockSageMakerGeospatialAPI) ListVectorEnrichmentJobsRequest(arg0 *sagemakergeospatial.ListVectorEnrichmentJobsInput) (*request.Request, *sagemakergeospatial.ListVectorEnrichmentJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVectorEnrichmentJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.ListVectorEnrichmentJobsOutput)
	return ret0, ret1
}

// ListVectorEnrichmentJobsRequest indicates an expected call of ListVectorEnrichmentJobsRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListVectorEnrichmentJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVectorEnrichmentJobsRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListVectorEnrichmentJobsRequest), arg0)
}

// ListVectorEnrichmentJobsWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) ListVectorEnrichmentJobsWithContext(arg0 context.Context, arg1 *sagemakergeospatial.ListVectorEnrichmentJobsInput, arg2 ...request.Option) (*sagemakergeospatial.ListVectorEnrichmentJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVectorEnrichmentJobsWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.ListVectorEnrichmentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVectorEnrichmentJobsWithContext indicates an expected call of ListVectorEnrichmentJobsWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) ListVectorEnrichmentJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVectorEnrichmentJobsWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).ListVectorEnrichmentJobsWithContext), varargs...)
}

// SearchRasterDataCollection mocks base method
func (m *MockSageMakerGeospatialAPI) SearchRasterDataCollection(arg0 *sagemakergeospatial.SearchRasterDataCollectionInput) (*sagemakergeospatial.SearchRasterDataCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRasterDataCollection", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.SearchRasterDataCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRasterDataCollection indicates an expected call of SearchRasterDataCollection
func (mr *MockSageMakerGeospatialAPIMockRecorder) SearchRasterDataCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRasterDataCollection", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).SearchRasterDataCollection), arg0)
}

// SearchRasterDataCollectionPages mocks base method
func (m *MockSageMakerGeospatialAPI) SearchRasterDataCollectionPages(arg0 *sagemakergeospatial.SearchRasterDataCollectionInput, arg1 func(*sagemakergeospatial.SearchRasterDataCollectionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRasterDataCollectionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchRasterDataCollectionPages indicates an expected call of SearchRasterDataCollectionPages
func (mr *MockSageMakerGeospatialAPIMockRecorder) SearchRasterDataCollectionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRasterDataCollectionPages", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).SearchRasterDataCollectionPages), arg0, arg1)
}

// SearchRasterDataCollectionPagesWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) SearchRasterDataCollectionPagesWithContext(arg0 context.Context, arg1 *sagemakergeospatial.SearchRasterDataCollectionInput, arg2 func(*sagemakergeospatial.SearchRasterDataCollectionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRasterDataCollectionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchRasterDataCollectionPagesWithContext indicates an expected call of SearchRasterDataCollectionPagesWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) SearchRasterDataCollectionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRasterDataCollectionPagesWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).SearchRasterDataCollectionPagesWithContext), varargs...)
}

// SearchRasterDataCollectionRequest mocks base method
func (m *MockSageMakerGeospatialAPI) SearchRasterDataCollectionRequest(arg0 *sagemakergeospatial.SearchRasterDataCollectionInput) (*request.Request, *sagemakergeospatial.SearchRasterDataCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRasterDataCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.SearchRasterDataCollectionOutput)
	return ret0, ret1
}

// SearchRasterDataCollectionRequest indicates an expected call of SearchRasterDataCollectionRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) SearchRasterDataCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRasterDataCollectionRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).SearchRasterDataCollectionRequest), arg0)
}

// SearchRasterDataCollectionWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) SearchRasterDataCollectionWithContext(arg0 context.Context, arg1 *sagemakergeospatial.SearchRasterDataCollectionInput, arg2 ...request.Option) (*sagemakergeospatial.SearchRasterDataCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRasterDataCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.SearchRasterDataCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRasterDataCollectionWithContext indicates an expected call of SearchRasterDataCollectionWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) SearchRasterDataCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRasterDataCollectionWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).SearchRasterDataCollectionWithContext), varargs...)
}

// StartEarthObservationJob mocks base method
func (m *MockSageMakerGeospatialAPI) StartEarthObservationJob(arg0 *sagemakergeospatial.StartEarthObservationJobInput) (*sagemakergeospatial.StartEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEarthObservationJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.StartEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEarthObservationJob indicates an expected call of StartEarthObservationJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) StartEarthObservationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEarthObservationJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StartEarthObservationJob), arg0)
}

// StartEarthObservationJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) StartEarthObservationJobRequest(arg0 *sagemakergeospatial.StartEarthObservationJobInput) (*request.Request, *sagemakergeospatial.StartEarthObservationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEarthObservationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.StartEarthObservationJobOutput)
	return ret0, ret1
}

// StartEarthObservationJobRequest indicates an expected call of StartEarthObservationJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) StartEarthObservationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEarthObservationJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StartEarthObservationJobRequest), arg0)
}

// StartEarthObservationJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) StartEarthObservationJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.StartEarthObservationJobInput, arg2 ...request.Option) (*sagemakergeospatial.StartEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartEarthObservationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.StartEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEarthObservationJobWithContext indicates an expected call of StartEarthObservationJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) StartEarthObservationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEarthObservationJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StartEarthObservationJobWithContext), varargs...)
}

// StartVectorEnrichmentJob mocks base method
func (m *MockSageMakerGeospatialAPI) StartVectorEnrichmentJob(arg0 *sagemakergeospatial.StartVectorEnrichmentJobInput) (*sagemakergeospatial.StartVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVectorEnrichmentJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.StartVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVectorEnrichmentJob indicates an expected call of StartVectorEnrichmentJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) StartVectorEnrichmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVectorEnrichmentJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StartVectorEnrichmentJob), arg0)
}

// StartVectorEnrichmentJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) StartVectorEnrichmentJobRequest(arg0 *sagemakergeospatial.StartVectorEnrichmentJobInput) (*request.Request, *sagemakergeospatial.StartVectorEnrichmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVectorEnrichmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.StartVectorEnrichmentJobOutput)
	return ret0, ret1
}

// StartVectorEnrichmentJobRequest indicates an expected call of StartVectorEnrichmentJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) StartVectorEnrichmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVectorEnrichmentJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StartVectorEnrichmentJobRequest), arg0)
}

// StartVectorEnrichmentJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) StartVectorEnrichmentJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.StartVectorEnrichmentJobInput, arg2 ...request.Option) (*sagemakergeospatial.StartVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartVectorEnrichmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.StartVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVectorEnrichmentJobWithContext indicates an expected call of StartVectorEnrichmentJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) StartVectorEnrichmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVectorEnrichmentJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StartVectorEnrichmentJobWithContext), varargs...)
}

// StopEarthObservationJob mocks base method
func (m *MockSageMakerGeospatialAPI) StopEarthObservationJob(arg0 *sagemakergeospatial.StopEarthObservationJobInput) (*sagemakergeospatial.StopEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEarthObservationJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.StopEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEarthObservationJob indicates an expected call of StopEarthObservationJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) StopEarthObservationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEarthObservationJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StopEarthObservationJob), arg0)
}

// StopEarthObservationJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) StopEarthObservationJobRequest(arg0 *sagemakergeospatial.StopEarthObservationJobInput) (*request.Request, *sagemakergeospatial.StopEarthObservationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEarthObservationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.StopEarthObservationJobOutput)
	return ret0, ret1
}

// StopEarthObservationJobRequest indicates an expected call of StopEarthObservationJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) StopEarthObservationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEarthObservationJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StopEarthObservationJobRequest), arg0)
}

// StopEarthObservationJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) StopEarthObservationJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.StopEarthObservationJobInput, arg2 ...request.Option) (*sagemakergeospatial.StopEarthObservationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopEarthObservationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.StopEarthObservationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEarthObservationJobWithContext indicates an expected call of StopEarthObservationJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) StopEarthObservationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEarthObservationJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StopEarthObservationJobWithContext), varargs...)
}

// StopVectorEnrichmentJob mocks base method
func (m *MockSageMakerGeospatialAPI) StopVectorEnrichmentJob(arg0 *sagemakergeospatial.StopVectorEnrichmentJobInput) (*sagemakergeospatial.StopVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVectorEnrichmentJob", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.StopVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVectorEnrichmentJob indicates an expected call of StopVectorEnrichmentJob
func (mr *MockSageMakerGeospatialAPIMockRecorder) StopVectorEnrichmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVectorEnrichmentJob", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StopVectorEnrichmentJob), arg0)
}

// StopVectorEnrichmentJobRequest mocks base method
func (m *MockSageMakerGeospatialAPI) StopVectorEnrichmentJobRequest(arg0 *sagemakergeospatial.StopVectorEnrichmentJobInput) (*request.Request, *sagemakergeospatial.StopVectorEnrichmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVectorEnrichmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.StopVectorEnrichmentJobOutput)
	return ret0, ret1
}

// StopVectorEnrichmentJobRequest indicates an expected call of StopVectorEnrichmentJobRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) StopVectorEnrichmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVectorEnrichmentJobRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StopVectorEnrichmentJobRequest), arg0)
}

// StopVectorEnrichmentJobWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) StopVectorEnrichmentJobWithContext(arg0 context.Context, arg1 *sagemakergeospatial.StopVectorEnrichmentJobInput, arg2 ...request.Option) (*sagemakergeospatial.StopVectorEnrichmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopVectorEnrichmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.StopVectorEnrichmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVectorEnrichmentJobWithContext indicates an expected call of StopVectorEnrichmentJobWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) StopVectorEnrichmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVectorEnrichmentJobWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).StopVectorEnrichmentJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSageMakerGeospatialAPI) TagResource(arg0 *sagemakergeospatial.TagResourceInput) (*sagemakergeospatial.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSageMakerGeospatialAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSageMakerGeospatialAPI) TagResourceRequest(arg0 *sagemakergeospatial.TagResourceInput) (*request.Request, *sagemakergeospatial.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) TagResourceWithContext(arg0 context.Context, arg1 *sagemakergeospatial.TagResourceInput, arg2 ...request.Option) (*sagemakergeospatial.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSageMakerGeospatialAPI) UntagResource(arg0 *sagemakergeospatial.UntagResourceInput) (*sagemakergeospatial.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*sagemakergeospatial.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSageMakerGeospatialAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSageMakerGeospatialAPI) UntagResourceRequest(arg0 *sagemakergeospatial.UntagResourceInput) (*request.Request, *sagemakergeospatial.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sagemakergeospatial.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSageMakerGeospatialAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSageMakerGeospatialAPI) UntagResourceWithContext(arg0 context.Context, arg1 *sagemakergeospatial.UntagResourceInput, arg2 ...request.Option) (*sagemakergeospatial.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sagemakergeospatial.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSageMakerGeospatialAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSageMakerGeospatialAPI)(nil).UntagResourceWithContext), varargs...)
}
